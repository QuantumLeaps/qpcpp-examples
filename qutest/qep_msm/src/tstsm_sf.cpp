//$file${.::tstsm_sf.cpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: tstsm.qm
// File:  ${.::tstsm_sf.cpp}
//
// This code has been generated by QM 7.0.1 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// This generated code is covered by the following QP license:
// License #    : LicenseRef-QL-commercial
// Issued to    : SafeQP/C++ Licensee
// Framework(s) : qpcpp
// Support ends : 2025-12-31
// Copyright (C) 2005 Quantum Leaps, LLC. All rights reserved.
//
//                    Q u a n t u m  L e a P s
//                    ------------------------
//                    Modern Embedded Software
//
// SPDX-License-Identifier: LicenseRef-QL-commercial
//
// This software is licensed under the terms of the Quantum Leaps commercial
// licenses. Please contact Quantum Leaps for more information about the
// available licensing options.
//
// RESTRICTIONS
// You may NOT :
// (a) redistribute, encumber, sell, rent, lease, sublicense, or otherwise
//     transfer rights in this software,
// (b) remove or alter any trademark, logo, copyright or other proprietary
//     notices, legends, symbols or labels present in this software,
// (c) plagiarize this software to sidestep the licensing obligations.
//
// Quantum Leaps contact information :
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${.::tstsm_sf.cpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#include "qpcpp.hpp"     // QP/C++ framework
#include "tstsm.hpp"     // TstSM state machine
#include "tstsm_sf.hpp"  // TstSM state machine for Safety Functions

namespace {
Q_DEFINE_THIS_FILE
}

//$declare${SFs} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace APP {

//${SFs::TstSM0} .............................................................
class TstSM0 : public QP::QMsm {
public:
    static TstSM0 inst;

public:
    TstSM0()
     : QP::QMsm(Q_STATE_CAST(0))
    {}
}; // class TstSM0

//${SFs::TstSM1} .............................................................
class TstSM1 : public QP::QMsm {
public:
    static TstSM1 inst;

public:
    TstSM1()
     : QP::QMsm(Q_STATE_CAST(&TstSM1::initial))
    {
        m_state.obj = reinterpret_cast<QP::QMState *>(1234); // corrupt the state
    }

protected:
    QM_STATE_DECL( initial);
    QM_STATE_DECL( s1);
}; // class TstSM1

//${SFs::TstSM2} .............................................................
class TstSM2 : public QP::QMsm {
public:
    static TstSM2 inst;

public:
    TstSM2()
     : QP::QMsm(Q_STATE_CAST(&TstSM2::initial))
    {}

protected:
    QM_STATE_DECL( initial);
    QM_STATE_DECL( s1);
}; // class TstSM2

//${SFs::TstSM3} .............................................................
class TstSM3 : public QP::QMsm {
public:
    static TstSM3 inst;

public:
    TstSM3()
     : QP::QMsm(Q_STATE_CAST(&TstSM3::initial))
    {}

protected:
    QM_STATE_DECL( initial);
    QM_STATE_DECL( s1);
    QM_ACTION_DECL(s1_e);
    QM_ACTION_DECL(s1_x);
    QM_ACTION_DECL(s1_i);
    QM_STATE_DECL( s2);
    QM_ACTION_DECL(s2_e);
    QM_ACTION_DECL(s2_x);
    QM_ACTION_DECL(s2_i);
    QM_STATE_DECL( s3);
    QM_ACTION_DECL(s3_e);
    QM_ACTION_DECL(s3_x);
    QM_ACTION_DECL(s3_i);
    QM_STATE_DECL( s4);
    QM_ACTION_DECL(s4_e);
    QM_ACTION_DECL(s4_x);
    QM_ACTION_DECL(s4_i);
    QM_STATE_DECL( s5);
    QM_ACTION_DECL(s5_e);
    QM_ACTION_DECL(s5_x);
    QM_ACTION_DECL(s5_i);
    QM_STATE_DECL( s6);
    QM_ACTION_DECL(s6_e);
    QM_ACTION_DECL(s6_x);
    QM_ACTION_DECL(s6_i);
    QM_STATE_DECL( s7);
    QM_ACTION_DECL(s7_e);
    QM_ACTION_DECL(s7_x);
    QM_ACTION_DECL(s7_i);
    QM_STATE_DECL( s8);
    QM_ACTION_DECL(s8_e);
    QM_ACTION_DECL(s8_x);
}; // class TstSM3

//${SFs::TstSM5} .............................................................
class TstSM5 : public QP::QMsm {
public:
    static TstSM5 inst;

public:
    friend bool TstSM5_isIn(uint32_t const state_num);
    friend QP::QStateHandler TstSM5_child(uint32_t const state_num);

public:
    TstSM5()
     : QP::QMsm(Q_STATE_CAST(&TstSM5::initial))
    {}

protected:
    QM_STATE_DECL( initial);
    QM_STATE_DECL( s1);
    QM_ACTION_DECL(s1_e);
    QM_ACTION_DECL(s1_x);
    QM_ACTION_DECL(s1_i);
    QM_STATE_DECL( s2);
    QM_ACTION_DECL(s2_e);
    QM_ACTION_DECL(s2_x);
    QM_ACTION_DECL(s2_i);
    QM_STATE_DECL( s3);
    QM_ACTION_DECL(s3_e);
    QM_ACTION_DECL(s3_x);
    QM_STATE_DECL( s4);
    QM_ACTION_DECL(s4_e);
    QM_ACTION_DECL(s4_x);
    QM_ACTION_DECL(s4_i);
    QM_STATE_DECL( s5);
    QM_ACTION_DECL(s5_e);
    QM_ACTION_DECL(s5_x);
    QM_ACTION_DECL(s5_i);
    QM_STATE_DECL( s6);
    QM_ACTION_DECL(s6_e);
    QM_ACTION_DECL(s6_x);
    QM_ACTION_DECL(s6_i);
    QM_STATE_DECL( s7);
    QM_ACTION_DECL(s7_e);
    QM_ACTION_DECL(s7_x);
    QM_ACTION_DECL(s7_i);
    QM_STATE_DECL( s8);
    QM_ACTION_DECL(s8_e);
    QM_ACTION_DECL(s8_x);
    QM_STATE_DECL( t1);
    QM_ACTION_DECL(t1_e);
    QM_ACTION_DECL(t1_x);
    QM_STATE_DECL( t2);
    QM_ACTION_DECL(t2_e);
    QM_ACTION_DECL(t2_x);
    QM_STATE_DECL( t3);
    QM_ACTION_DECL(t3_e);
    QM_ACTION_DECL(t3_x);
    QM_STATE_DECL( t4);
    QM_ACTION_DECL(t4_e);
    QM_ACTION_DECL(t4_x);
    QM_STATE_DECL( t5);
    QM_ACTION_DECL(t5_e);
    QM_ACTION_DECL(t5_x);
    QM_STATE_DECL( t6);
    QM_ACTION_DECL(t6_e);
    QM_ACTION_DECL(t6_x);
    QM_STATE_DECL( t7);
    QM_ACTION_DECL(t7_e);
    QM_ACTION_DECL(t7_x);
    QM_STATE_DECL( t8);
    QM_ACTION_DECL(t8_e);
    QM_ACTION_DECL(t8_x);
    QM_ACTION_DECL(t8_i);
    QM_STATE_DECL( t9);
    QM_ACTION_DECL(t9_x);

protected:
    QP::QMState const *hist_s1;
    QP::QMState const *hist_t1;
}; // class TstSM5

} // namespace APP
//$enddecl${SFs} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//$skip${QP_VERSION} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
// Check for the minimum required QP version
#if (QP_VERSION < 730U) || (QP_VERSION != ((QP_RELEASE^4294967295U)%0x2710U))
#error qpcpp version 7.3.0 or higher required
#endif
//$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$define${Shared_SF} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace APP {

//${Shared_SF::the_TstSM0} ...................................................
QP::QAsm * const the_TstSM0 = &TstSM0::inst;

//${Shared_SF::the_TstSM1} ...................................................
QP::QAsm * const the_TstSM1 = &TstSM1::inst;

//${Shared_SF::the_TstSM2} ...................................................
QP::QAsm * const the_TstSM2 = &TstSM2::inst;

//${Shared_SF::the_TstSM3} ...................................................
QP::QAsm * const the_TstSM3 = &TstSM3::inst;

//${Shared_SF::the_TstSM5} ...................................................
QP::QAsm * const the_TstSM5 = &TstSM5::inst;

//${Shared_SF::TstSM5_isIn} ..................................................
bool TstSM5_isIn(uint32_t const state_num) {
    bool stat = false;
    switch (state_num) {
    case 1:
        stat = the_TstSM5->isIn(Q_STATE_CAST(&TstSM5::s1));
        break;
    case 2:
        stat = the_TstSM5->isIn(Q_STATE_CAST(&TstSM5::s2));
        break;
    case 3:
        stat = the_TstSM5->isIn(Q_STATE_CAST(&TstSM5::s3));
        break;
    case 4:
        stat = the_TstSM5->isIn(Q_STATE_CAST(&TstSM5::s4));
        break;
    default:
        Q_ERROR();
    }
    return stat;
}

//${Shared_SF::TstSM5_child} .................................................
QP::QStateHandler TstSM5_child(uint32_t const state_num) {
    QP::QMState const *child;
    switch (state_num) {
        case 1:
            child = TstSM5::inst.childStateObj(&TstSM5::s1_s);
            break;
        case 2:
            child = TstSM5::inst.childStateObj(&TstSM5::s2_s);
            break;
        case 3:
            child = TstSM5::inst.childStateObj(&TstSM5::s3_s);
            break;
        default:
            Q_ERROR();
    }
    return child->stateHandler;
}

} // namespace APP
//$enddef${Shared_SF} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$define${SFs} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace APP {

//${SFs::TstSM0} .............................................................
TstSM0 TstSM0::inst;

//${SFs::TstSM1} .............................................................
TstSM1 TstSM1::inst;

//${SFs::TstSM1::SM} .........................................................
QM_STATE_DEF(TstSM1, initial) {
    //${SFs::TstSM1::SM::initial}
    Q_UNUSED_PAR(e);

    QS_FUN_DICTIONARY(&TstSM1::s1);
    static QP::QMTranActTable const tatbl_ = { // tran-action table
        &s1_s, // target state
        {
            Q_ACTION_NULL // zero terminator
        }
    };
    return qm_tran_init(&tatbl_);
}

//${SFs::TstSM1::SM::s1} .....................................................
QP::QMState const TstSM1::s1_s = {
    QM_STATE_NULL, // superstate (top)
    &TstSM1::s1,
    Q_ACTION_NULL, // no entry action
    Q_ACTION_NULL, // no exit action
    Q_ACTION_NULL  // no initial tran.
};
//${SFs::TstSM1::SM::s1}
QM_STATE_DEF(TstSM1, s1) {
    QP::QState status_;
    switch (e->sig) {
        default: {
            status_ = Q_RET_SUPER;
            break;
        }
    }
    return status_;
}

//${SFs::TstSM2} .............................................................
TstSM2 TstSM2::inst;

//${SFs::TstSM2::SM} .........................................................
QM_STATE_DEF(TstSM2, initial) {
    //${SFs::TstSM2::SM::initial}
    Q_UNUSED_PAR(e);
    return qm_tran(nullptr); // incorrect initial tran.

    QS_FUN_DICTIONARY(&TstSM2::s1);
    static QP::QMTranActTable const tatbl_ = { // tran-action table
        &s1_s, // target state
        {
            Q_ACTION_NULL // zero terminator
        }
    };
    return qm_tran_init(&tatbl_);
}

//${SFs::TstSM2::SM::s1} .....................................................
QP::QMState const TstSM2::s1_s = {
    QM_STATE_NULL, // superstate (top)
    &TstSM2::s1,
    Q_ACTION_NULL, // no entry action
    Q_ACTION_NULL, // no exit action
    Q_ACTION_NULL  // no initial tran.
};
//${SFs::TstSM2::SM::s1}
QM_STATE_DEF(TstSM2, s1) {
    QP::QState status_;
    switch (e->sig) {
        default: {
            status_ = Q_RET_SUPER;
            break;
        }
    }
    return status_;
}

//${SFs::TstSM3} .............................................................
TstSM3 TstSM3::inst;

//${SFs::TstSM3::SM} .........................................................
QM_STATE_DEF(TstSM3, initial) {
    //${SFs::TstSM3::SM::initial}
    Q_UNUSED_PAR(e);

    QS_FUN_DICTIONARY(&TstSM3::s1);
    QS_FUN_DICTIONARY(&TstSM3::s2);
    QS_FUN_DICTIONARY(&TstSM3::s3);
    QS_FUN_DICTIONARY(&TstSM3::s4);
    QS_FUN_DICTIONARY(&TstSM3::s5);
    QS_FUN_DICTIONARY(&TstSM3::s6);
    QS_FUN_DICTIONARY(&TstSM3::s7);
    QS_FUN_DICTIONARY(&TstSM3::s8);

    static struct {
        QP::QMState const *target;
        QP::QActionHandler act[3];
    } const tatbl_ = { // tran-action table
        &s1_s, // target state
        {
            &s1_e, // entry
            &s1_i, // initial tran.
            Q_ACTION_NULL // zero terminator
        }
    };
    return qm_tran_init(&tatbl_);
}

//${SFs::TstSM3::SM::s1} .....................................................
QP::QMState const TstSM3::s1_s = {
    QM_STATE_NULL, // superstate (top)
    &TstSM3::s1,
    &TstSM3::s1_e,
    &TstSM3::s1_x,
    &TstSM3::s1_i
};
//${SFs::TstSM3::SM::s1}
QM_ACTION_DEF(TstSM3, s1_e) {
    //
    return qm_entry(&s1_s);
}
//${SFs::TstSM3::SM::s1}
QM_ACTION_DEF(TstSM3, s1_x) {
    //
    return qm_exit(&s1_s);
}
//${SFs::TstSM3::SM::s1::initial}
QM_ACTION_DEF(TstSM3, s1_i) {
    //${SFs::TstSM3::SM::s1::initial}

    static struct {
        QP::QMState const *target;
        QP::QActionHandler act[3];
    } const tatbl_ = { // tran-action table
        &s2_s, // target state
        {
            &s2_e, // entry
            &s2_i, // initial tran.
            Q_ACTION_NULL // zero terminator
        }
    };
    return qm_tran_init(&tatbl_);
}
//${SFs::TstSM3::SM::s1}
QM_STATE_DEF(TstSM3, s1) {
    QP::QState status_;
    switch (e->sig) {
        default: {
            status_ = Q_RET_SUPER;
            break;
        }
    }
    return status_;
}

//${SFs::TstSM3::SM::s1::s2} .................................................
QP::QMState const TstSM3::s2_s = {
    &TstSM3::s1_s, // superstate
    &TstSM3::s2,
    &TstSM3::s2_e,
    &TstSM3::s2_x,
    &TstSM3::s2_i
};
//${SFs::TstSM3::SM::s1::s2}
QM_ACTION_DEF(TstSM3, s2_e) {
    //
    return qm_entry(&s2_s);
}
//${SFs::TstSM3::SM::s1::s2}
QM_ACTION_DEF(TstSM3, s2_x) {
    //
    return qm_exit(&s2_s);
}
//${SFs::TstSM3::SM::s1::s2::initial}
QM_ACTION_DEF(TstSM3, s2_i) {
    //${SFs::TstSM3::SM::s1::s2::initial}

    static struct {
        QP::QMState const *target;
        QP::QActionHandler act[3];
    } const tatbl_ = { // tran-action table
        &s3_s, // target state
        {
            &s3_e, // entry
            &s3_i, // initial tran.
            Q_ACTION_NULL // zero terminator
        }
    };
    return qm_tran_init(&tatbl_);
}
//${SFs::TstSM3::SM::s1::s2}
QM_STATE_DEF(TstSM3, s2) {
    QP::QState status_;
    switch (e->sig) {
        default: {
            status_ = Q_RET_SUPER;
            break;
        }
    }
    return status_;
}

//${SFs::TstSM3::SM::s1::s2::s3} .............................................
QP::QMState const TstSM3::s3_s = {
    &TstSM3::s2_s, // superstate
    &TstSM3::s3,
    &TstSM3::s3_e,
    &TstSM3::s3_x,
    &TstSM3::s3_i
};
//${SFs::TstSM3::SM::s1::s2::s3}
QM_ACTION_DEF(TstSM3, s3_e) {
    //
    return qm_entry(&s3_s);
}
//${SFs::TstSM3::SM::s1::s2::s3}
QM_ACTION_DEF(TstSM3, s3_x) {
    //
    return qm_exit(&s3_s);
}
//${SFs::TstSM3::SM::s1::s2::s3::initial}
QM_ACTION_DEF(TstSM3, s3_i) {
    //${SFs::TstSM3::SM::s1::s2::s3::initial}

    static struct {
        QP::QMState const *target;
        QP::QActionHandler act[3];
    } const tatbl_ = { // tran-action table
        &s4_s, // target state
        {
            &s4_e, // entry
            &s4_i, // initial tran.
            Q_ACTION_NULL // zero terminator
        }
    };
    return qm_tran_init(&tatbl_);
}
//${SFs::TstSM3::SM::s1::s2::s3}
QM_STATE_DEF(TstSM3, s3) {
    QP::QState status_;
    switch (e->sig) {
        default: {
            status_ = Q_RET_SUPER;
            break;
        }
    }
    return status_;
}

//${SFs::TstSM3::SM::s1::s2::s3::s4} .........................................
QP::QMState const TstSM3::s4_s = {
    &TstSM3::s3_s, // superstate
    &TstSM3::s4,
    &TstSM3::s4_e,
    &TstSM3::s4_x,
    &TstSM3::s4_i
};
//${SFs::TstSM3::SM::s1::s2::s3::s4}
QM_ACTION_DEF(TstSM3, s4_e) {
    //
    return qm_entry(&s4_s);
}
//${SFs::TstSM3::SM::s1::s2::s3::s4}
QM_ACTION_DEF(TstSM3, s4_x) {
    //
    return qm_exit(&s4_s);
}
//${SFs::TstSM3::SM::s1::s2::s3::s4::initial}
QM_ACTION_DEF(TstSM3, s4_i) {
    //${SFs::TstSM3::SM::s1::s2::s3::s4::initial}

    static struct {
        QP::QMState const *target;
        QP::QActionHandler act[3];
    } const tatbl_ = { // tran-action table
        &s5_s, // target state
        {
            &s5_e, // entry
            &s5_i, // initial tran.
            Q_ACTION_NULL // zero terminator
        }
    };
    return qm_tran_init(&tatbl_);
}
//${SFs::TstSM3::SM::s1::s2::s3::s4}
QM_STATE_DEF(TstSM3, s4) {
    QP::QState status_;
    switch (e->sig) {
        default: {
            status_ = Q_RET_SUPER;
            break;
        }
    }
    return status_;
}

//${SFs::TstSM3::SM::s1::s2::s3::s4::s5} .....................................
QP::QMState const TstSM3::s5_s = {
    &TstSM3::s4_s, // superstate
    &TstSM3::s5,
    &TstSM3::s5_e,
    &TstSM3::s5_x,
    &TstSM3::s5_i
};
//${SFs::TstSM3::SM::s1::s2::s3::s4::s5}
QM_ACTION_DEF(TstSM3, s5_e) {
    //
    return qm_entry(&s5_s);
}
//${SFs::TstSM3::SM::s1::s2::s3::s4::s5}
QM_ACTION_DEF(TstSM3, s5_x) {
    //
    return qm_exit(&s5_s);
}
//${SFs::TstSM3::SM::s1::s2::s3::s4::s5::initial}
QM_ACTION_DEF(TstSM3, s5_i) {
    //${SFs::TstSM3::SM::s1::s2::s3::s4::s5::initial}

    static struct {
        QP::QMState const *target;
        QP::QActionHandler act[3];
    } const tatbl_ = { // tran-action table
        &s6_s, // target state
        {
            &s6_e, // entry
            &s6_i, // initial tran.
            Q_ACTION_NULL // zero terminator
        }
    };
    return qm_tran_init(&tatbl_);
}
//${SFs::TstSM3::SM::s1::s2::s3::s4::s5}
QM_STATE_DEF(TstSM3, s5) {
    QP::QState status_;
    switch (e->sig) {
        default: {
            status_ = Q_RET_SUPER;
            break;
        }
    }
    return status_;
}

//${SFs::TstSM3::SM::s1::s2::s3::s4::s5::s6} .................................
QP::QMState const TstSM3::s6_s = {
    &TstSM3::s5_s, // superstate
    &TstSM3::s6,
    &TstSM3::s6_e,
    &TstSM3::s6_x,
    &TstSM3::s6_i
};
//${SFs::TstSM3::SM::s1::s2::s3::s4::s5::s6}
QM_ACTION_DEF(TstSM3, s6_e) {
    //
    return qm_entry(&s6_s);
}
//${SFs::TstSM3::SM::s1::s2::s3::s4::s5::s6}
QM_ACTION_DEF(TstSM3, s6_x) {
    //
    return qm_exit(&s6_s);
}
//${SFs::TstSM3::SM::s1::s2::s3::s4::s5::s6::initial}
QM_ACTION_DEF(TstSM3, s6_i) {
    //${SFs::TstSM3::SM::s1::s2::s3::s4::s5::s6::initial}

    static struct {
        QP::QMState const *target;
        QP::QActionHandler act[3];
    } const tatbl_ = { // tran-action table
        &s7_s, // target state
        {
            &s7_e, // entry
            &s7_i, // initial tran.
            Q_ACTION_NULL // zero terminator
        }
    };
    return qm_tran_init(&tatbl_);
}
//${SFs::TstSM3::SM::s1::s2::s3::s4::s5::s6}
QM_STATE_DEF(TstSM3, s6) {
    QP::QState status_;
    switch (e->sig) {
        default: {
            status_ = Q_RET_SUPER;
            break;
        }
    }
    return status_;
}

//${SFs::TstSM3::SM::s1::s2::s3::s4::s5::s6::s7} .............................
QP::QMState const TstSM3::s7_s = {
    &TstSM3::s6_s, // superstate
    &TstSM3::s7,
    &TstSM3::s7_e,
    &TstSM3::s7_x,
    &TstSM3::s7_i
};
//${SFs::TstSM3::SM::s1::s2::s3::s4::s5::s6::s7}
QM_ACTION_DEF(TstSM3, s7_e) {
    //
    return qm_entry(&s7_s);
}
//${SFs::TstSM3::SM::s1::s2::s3::s4::s5::s6::s7}
QM_ACTION_DEF(TstSM3, s7_x) {
    //
    return qm_exit(&s7_s);
}
//${SFs::TstSM3::SM::s1::s2::s3::s4::s5::s6::s7::initial}
QM_ACTION_DEF(TstSM3, s7_i) {
    //${SFs::TstSM3::SM::s1::s2::s3::s4::s5::s6::s7::initial}

    static struct {
        QP::QMState const *target;
        QP::QActionHandler act[2];
    } const tatbl_ = { // tran-action table
        &s8_s, // target state
        {
            &s8_e, // entry
            Q_ACTION_NULL // zero terminator
        }
    };
    return qm_tran_init(&tatbl_);
}
//${SFs::TstSM3::SM::s1::s2::s3::s4::s5::s6::s7}
QM_STATE_DEF(TstSM3, s7) {
    QP::QState status_;
    switch (e->sig) {
        default: {
            status_ = Q_RET_SUPER;
            break;
        }
    }
    return status_;
}

//${SFs::TstSM3::SM::s1::s2::s3::s4::s5::s6::s7::s8} .........................
QP::QMState const TstSM3::s8_s = {
    &TstSM3::s7_s, // superstate
    &TstSM3::s8,
    &TstSM3::s8_e,
    &TstSM3::s8_x,
    Q_ACTION_NULL  // no initial tran.
};
//${SFs::TstSM3::SM::s1::s2::s3::s4::s5::s6::s7::s8}
QM_ACTION_DEF(TstSM3, s8_e) {
    //
    return qm_entry(&s8_s);
}
//${SFs::TstSM3::SM::s1::s2::s3::s4::s5::s6::s7::s8}
QM_ACTION_DEF(TstSM3, s8_x) {
    //
    return qm_exit(&s8_s);
}
//${SFs::TstSM3::SM::s1::s2::s3::s4::s5::s6::s7::s8}
QM_STATE_DEF(TstSM3, s8) {
    QP::QState status_;
    switch (e->sig) {
        default: {
            status_ = Q_RET_SUPER;
            break;
        }
    }
    return status_;
}

//${SFs::TstSM5} .............................................................
TstSM5 TstSM5::inst;

//${SFs::TstSM5::SM} .........................................................
QM_STATE_DEF(TstSM5, initial) {
    //${SFs::TstSM5::SM::initial}
    Q_UNUSED_PAR(e);

    QS_OBJ_DICTIONARY(&TstSM5::inst);
    // state history attributes
    hist_s1 = &s8_s;
    hist_t1 = &t9_s;

    QS_FUN_DICTIONARY(&TstSM5::s1);
    QS_FUN_DICTIONARY(&TstSM5::s2);
    QS_FUN_DICTIONARY(&TstSM5::s3);
    QS_FUN_DICTIONARY(&TstSM5::s4);
    QS_FUN_DICTIONARY(&TstSM5::s5);
    QS_FUN_DICTIONARY(&TstSM5::s6);
    QS_FUN_DICTIONARY(&TstSM5::s7);
    QS_FUN_DICTIONARY(&TstSM5::s8);
    QS_FUN_DICTIONARY(&TstSM5::t1);
    QS_FUN_DICTIONARY(&TstSM5::t2);
    QS_FUN_DICTIONARY(&TstSM5::t3);
    QS_FUN_DICTIONARY(&TstSM5::t4);
    QS_FUN_DICTIONARY(&TstSM5::t5);
    QS_FUN_DICTIONARY(&TstSM5::t6);
    QS_FUN_DICTIONARY(&TstSM5::t7);
    QS_FUN_DICTIONARY(&TstSM5::t8);
    QS_FUN_DICTIONARY(&TstSM5::t9);

    static struct {
        QP::QMState const *target;
        QP::QActionHandler act[8];
    } const tatbl_ = { // tran-action table
        &s6_s, // target state
        {
            &s1_e, // entry
            &s2_e, // entry
            &s3_e, // entry
            &s4_e, // entry
            &s5_e, // entry
            &s6_e, // entry
            &s6_i, // initial tran.
            Q_ACTION_NULL // zero terminator
        }
    };
    return qm_tran_init(&tatbl_);
}

//${SFs::TstSM5::SM::s1} .....................................................
QP::QMState const TstSM5::s1_s = {
    QM_STATE_NULL, // superstate (top)
    &TstSM5::s1,
    &TstSM5::s1_e,
    &TstSM5::s1_x,
    &TstSM5::s1_i
};
//${SFs::TstSM5::SM::s1}
QM_ACTION_DEF(TstSM5, s1_e) {
    //
    return qm_entry(&s1_s);
}
//${SFs::TstSM5::SM::s1}
QM_ACTION_DEF(TstSM5, s1_x) {
    //
    // save deep history
    hist_s1 = stateObj();
    return qm_exit(&s1_s);
}
//${SFs::TstSM5::SM::s1::initial}
QM_ACTION_DEF(TstSM5, s1_i) {
    //${SFs::TstSM5::SM::s1::initial}

    static struct {
        QP::QMState const *target;
        QP::QActionHandler act[3];
    } const tatbl_ = { // tran-action table
        &s2_s, // target state
        {
            &s2_e, // entry
            &s2_i, // initial tran.
            Q_ACTION_NULL // zero terminator
        }
    };
    return qm_tran_init(&tatbl_);
}
//${SFs::TstSM5::SM::s1}
QM_STATE_DEF(TstSM5, s1) {
    QP::QState status_;
    switch (e->sig) {
        default: {
            status_ = Q_RET_SUPER;
            break;
        }
    }
    return status_;
}

//${SFs::TstSM5::SM::s1::s2} .................................................
QP::QMState const TstSM5::s2_s = {
    &TstSM5::s1_s, // superstate
    &TstSM5::s2,
    &TstSM5::s2_e,
    &TstSM5::s2_x,
    &TstSM5::s2_i
};
//${SFs::TstSM5::SM::s1::s2}
QM_ACTION_DEF(TstSM5, s2_e) {
    //
    return qm_entry(&s2_s);
}
//${SFs::TstSM5::SM::s1::s2}
QM_ACTION_DEF(TstSM5, s2_x) {
    //
    return qm_exit(&s2_s);
}
//${SFs::TstSM5::SM::s1::s2::initial}
QM_ACTION_DEF(TstSM5, s2_i) {
    //${SFs::TstSM5::SM::s1::s2::initial}

    static struct {
        QP::QMState const *target;
        QP::QActionHandler act[4];
    } const tatbl_ = { // tran-action table
        &s4_s, // target state
        {
            &s3_e, // entry
            &s4_e, // entry
            &s4_i, // initial tran.
            Q_ACTION_NULL // zero terminator
        }
    };
    return qm_tran_init(&tatbl_);
}
//${SFs::TstSM5::SM::s1::s2}
QM_STATE_DEF(TstSM5, s2) {
    QP::QState status_;
    switch (e->sig) {
        default: {
            status_ = Q_RET_SUPER;
            break;
        }
    }
    return status_;
}

//${SFs::TstSM5::SM::s1::s2::s3} .............................................
QP::QMState const TstSM5::s3_s = {
    &TstSM5::s2_s, // superstate
    &TstSM5::s3,
    &TstSM5::s3_e,
    &TstSM5::s3_x,
    Q_ACTION_NULL  // no initial tran.
};
//${SFs::TstSM5::SM::s1::s2::s3}
QM_ACTION_DEF(TstSM5, s3_e) {
    //
    return qm_entry(&s3_s);
}
//${SFs::TstSM5::SM::s1::s2::s3}
QM_ACTION_DEF(TstSM5, s3_x) {
    //
    return qm_exit(&s3_s);
}
//${SFs::TstSM5::SM::s1::s2::s3}
QM_STATE_DEF(TstSM5, s3) {
    QP::QState status_;
    switch (e->sig) {
        //${SFs::TstSM5::SM::s1::s2::s3::A}
        case A_SIG: {

            static struct {
                QP::QMState const *target;
                QP::QActionHandler act[4];
            } const tatbl_ = { // tran-action table
                &s1_s, // target state
                {
                    &s3_x, // exit
                    &s2_x, // exit
                    &s1_i, // initial tran.
                    Q_ACTION_NULL // zero terminator
                }
            };
            status_ = qm_tran(&tatbl_);
            break;
        }
        //${SFs::TstSM5::SM::s1::s2::s3::D}
        case D_SIG: {

            static struct {
                QP::QMState const *target;
                QP::QActionHandler act[9];
            } const tatbl_ = { // tran-action table
                &t5_s, // target state
                {
                    &s3_x, // exit
                    &s2_x, // exit
                    &s1_x, // exit
                    &t1_e, // entry
                    &t2_e, // entry
                    &t3_e, // entry
                    &t4_e, // entry
                    &t5_e, // entry
                    Q_ACTION_NULL // zero terminator
                }
            };
            status_ = qm_tran(&tatbl_);
            break;
        }
        default: {
            status_ = Q_RET_SUPER;
            break;
        }
    }
    return status_;
}

//${SFs::TstSM5::SM::s1::s2::s3::s4} .........................................
QP::QMState const TstSM5::s4_s = {
    &TstSM5::s3_s, // superstate
    &TstSM5::s4,
    &TstSM5::s4_e,
    &TstSM5::s4_x,
    &TstSM5::s4_i
};
//${SFs::TstSM5::SM::s1::s2::s3::s4}
QM_ACTION_DEF(TstSM5, s4_e) {
    //
    return qm_entry(&s4_s);
}
//${SFs::TstSM5::SM::s1::s2::s3::s4}
QM_ACTION_DEF(TstSM5, s4_x) {
    //
    return qm_exit(&s4_s);
}
//${SFs::TstSM5::SM::s1::s2::s3::s4::initial}
QM_ACTION_DEF(TstSM5, s4_i) {
    //${SFs::TstSM5::SM::s1::s2::s3::s4::initial}

    static struct {
        QP::QMState const *target;
        QP::QActionHandler act[3];
    } const tatbl_ = { // tran-action table
        &s5_s, // target state
        {
            &s5_e, // entry
            &s5_i, // initial tran.
            Q_ACTION_NULL // zero terminator
        }
    };
    return qm_tran_init(&tatbl_);
}
//${SFs::TstSM5::SM::s1::s2::s3::s4}
QM_STATE_DEF(TstSM5, s4) {
    QP::QState status_;
    switch (e->sig) {
        default: {
            status_ = Q_RET_SUPER;
            break;
        }
    }
    return status_;
}

//${SFs::TstSM5::SM::s1::s2::s3::s4::s5} .....................................
QP::QMState const TstSM5::s5_s = {
    &TstSM5::s4_s, // superstate
    &TstSM5::s5,
    &TstSM5::s5_e,
    &TstSM5::s5_x,
    &TstSM5::s5_i
};
//${SFs::TstSM5::SM::s1::s2::s3::s4::s5}
QM_ACTION_DEF(TstSM5, s5_e) {
    //
    return qm_entry(&s5_s);
}
//${SFs::TstSM5::SM::s1::s2::s3::s4::s5}
QM_ACTION_DEF(TstSM5, s5_x) {
    //
    return qm_exit(&s5_s);
}
//${SFs::TstSM5::SM::s1::s2::s3::s4::s5::initial}
QM_ACTION_DEF(TstSM5, s5_i) {
    //${SFs::TstSM5::SM::s1::s2::s3::s4::s5::initial}

    static struct {
        QP::QMState const *target;
        QP::QActionHandler act[3];
    } const tatbl_ = { // tran-action table
        &s6_s, // target state
        {
            &s6_e, // entry
            &s6_i, // initial tran.
            Q_ACTION_NULL // zero terminator
        }
    };
    return qm_tran_init(&tatbl_);
}
//${SFs::TstSM5::SM::s1::s2::s3::s4::s5}
QM_STATE_DEF(TstSM5, s5) {
    QP::QState status_;
    switch (e->sig) {
        default: {
            status_ = Q_RET_SUPER;
            break;
        }
    }
    return status_;
}

//${SFs::TstSM5::SM::s1::s2::s3::s4::s5::s6} .................................
QP::QMState const TstSM5::s6_s = {
    &TstSM5::s5_s, // superstate
    &TstSM5::s6,
    &TstSM5::s6_e,
    &TstSM5::s6_x,
    &TstSM5::s6_i
};
//${SFs::TstSM5::SM::s1::s2::s3::s4::s5::s6}
QM_ACTION_DEF(TstSM5, s6_e) {
    //
    return qm_entry(&s6_s);
}
//${SFs::TstSM5::SM::s1::s2::s3::s4::s5::s6}
QM_ACTION_DEF(TstSM5, s6_x) {
    //
    return qm_exit(&s6_s);
}
//${SFs::TstSM5::SM::s1::s2::s3::s4::s5::s6::initial}
QM_ACTION_DEF(TstSM5, s6_i) {
    //${SFs::TstSM5::SM::s1::s2::s3::s4::s5::s6::initial}

    static struct {
        QP::QMState const *target;
        QP::QActionHandler act[3];
    } const tatbl_ = { // tran-action table
        &s7_s, // target state
        {
            &s7_e, // entry
            &s7_i, // initial tran.
            Q_ACTION_NULL // zero terminator
        }
    };
    return qm_tran_init(&tatbl_);
}
//${SFs::TstSM5::SM::s1::s2::s3::s4::s5::s6}
QM_STATE_DEF(TstSM5, s6) {
    QP::QState status_;
    switch (e->sig) {
        default: {
            status_ = Q_RET_SUPER;
            break;
        }
    }
    return status_;
}

//${SFs::TstSM5::SM::s1::s2::s3::s4::s5::s6::s7} .............................
QP::QMState const TstSM5::s7_s = {
    &TstSM5::s6_s, // superstate
    &TstSM5::s7,
    &TstSM5::s7_e,
    &TstSM5::s7_x,
    &TstSM5::s7_i
};
//${SFs::TstSM5::SM::s1::s2::s3::s4::s5::s6::s7}
QM_ACTION_DEF(TstSM5, s7_e) {
    //
    return qm_entry(&s7_s);
}
//${SFs::TstSM5::SM::s1::s2::s3::s4::s5::s6::s7}
QM_ACTION_DEF(TstSM5, s7_x) {
    //
    return qm_exit(&s7_s);
}
//${SFs::TstSM5::SM::s1::s2::s3::s4::s5::s6::s7::initial}
QM_ACTION_DEF(TstSM5, s7_i) {
    //${SFs::TstSM5::SM::s1::s2::s3::s4::s5::s6::s7::initial}

    static struct {
        QP::QMState const *target;
        QP::QActionHandler act[2];
    } const tatbl_ = { // tran-action table
        &s8_s, // target state
        {
            &s8_e, // entry
            Q_ACTION_NULL // zero terminator
        }
    };
    return qm_tran_init(&tatbl_);
}
//${SFs::TstSM5::SM::s1::s2::s3::s4::s5::s6::s7}
QM_STATE_DEF(TstSM5, s7) {
    QP::QState status_;
    switch (e->sig) {
        //${SFs::TstSM5::SM::s1::s2::s3::s4::s5::s6::s7::H}
        case H_SIG: {

            static struct {
                QP::QMState const *target;
                QP::QActionHandler act[9];
            } const tatbl_ = { // tran-action table
                &t1_s, // target state
                {
                    &s7_x, // exit
                    &s6_x, // exit
                    &s5_x, // exit
                    &s4_x, // exit
                    &s3_x, // exit
                    &s2_x, // exit
                    &s1_x, // exit
                    &t1_e, // entry
                    Q_ACTION_NULL // zero terminator
                }
            };
            status_ = qm_tran_hist(hist_t1, &tatbl_);
            break;
        }
        //${SFs::TstSM5::SM::s1::s2::s3::s4::s5::s6::s7::C}
        case C_SIG: {
            return qm_tran(nullptr); // NULL tran. table

            static struct {
                QP::QMState const *target;
                QP::QActionHandler act[4];
            } const tatbl_ = { // tran-action table
                &s5_s, // target state
                {
                    &s7_x, // exit
                    &s6_x, // exit
                    &s5_i, // initial tran.
                    Q_ACTION_NULL // zero terminator
                }
            };
            status_ = qm_tran(&tatbl_);
            break;
        }
        default: {
            status_ = Q_RET_SUPER;
            break;
        }
    }
    return status_;
}

//${SFs::TstSM5::SM::s1::s2::s3::s4::s5::s6::s7::s8} .........................
QP::QMState const TstSM5::s8_s = {
    &TstSM5::s7_s, // superstate
    &TstSM5::s8,
    &TstSM5::s8_e,
    &TstSM5::s8_x,
    Q_ACTION_NULL  // no initial tran.
};
//${SFs::TstSM5::SM::s1::s2::s3::s4::s5::s6::s7::s8}
QM_ACTION_DEF(TstSM5, s8_e) {
    //
    return qm_entry(&s8_s);
}
//${SFs::TstSM5::SM::s1::s2::s3::s4::s5::s6::s7::s8}
QM_ACTION_DEF(TstSM5, s8_x) {
    //
    return qm_exit(&s8_s);
}
//${SFs::TstSM5::SM::s1::s2::s3::s4::s5::s6::s7::s8}
QM_STATE_DEF(TstSM5, s8) {
    QP::QState status_;
    switch (e->sig) {
        //${SFs::TstSM5::SM::s1::s2::s3::s4::s5::s6::s7::s8::B}
        case B_SIG: {

            static struct {
                QP::QMState const *target;
                QP::QActionHandler act[17];
            } const tatbl_ = { // tran-action table
                &t9_s, // target state
                {
                    &s8_x, // exit
                    &s7_x, // exit
                    &s6_x, // exit
                    &s5_x, // exit
                    &s4_x, // exit
                    &s3_x, // exit
                    &s2_x, // exit
                    &s1_x, // exit
                    &t1_e, // entry
                    &t2_e, // entry
                    &t3_e, // entry
                    &t4_e, // entry
                    &t5_e, // entry
                    &t6_e, // entry
                    &t7_e, // entry
                    &t8_e, // entry
                    Q_ACTION_NULL // zero terminator
                }
            };
            status_ = qm_tran(&tatbl_);
            break;
        }
        default: {
            status_ = Q_RET_SUPER;
            break;
        }
    }
    return status_;
}

//${SFs::TstSM5::SM::t1} .....................................................
QP::QMState const TstSM5::t1_s = {
    QM_STATE_NULL, // superstate (top)
    &TstSM5::t1,
    &TstSM5::t1_e,
    &TstSM5::t1_x,
    Q_ACTION_NULL  // no initial tran.
};
//${SFs::TstSM5::SM::t1}
QM_ACTION_DEF(TstSM5, t1_e) {
    //
    return qm_entry(&t1_s);
}
//${SFs::TstSM5::SM::t1}
QM_ACTION_DEF(TstSM5, t1_x) {
    //
    // save shallow history
    hist_t1 = childStateObj(&t1_s);
    return qm_exit(&t1_s);
}
//${SFs::TstSM5::SM::t1}
QM_STATE_DEF(TstSM5, t1) {
    QP::QState status_;
    switch (e->sig) {
        default: {
            status_ = Q_RET_SUPER;
            break;
        }
    }
    return status_;
}

//${SFs::TstSM5::SM::t1::t2} .................................................
QP::QMState const TstSM5::t2_s = {
    &TstSM5::t1_s, // superstate
    &TstSM5::t2,
    &TstSM5::t2_e,
    &TstSM5::t2_x,
    Q_ACTION_NULL  // no initial tran.
};
//${SFs::TstSM5::SM::t1::t2}
QM_ACTION_DEF(TstSM5, t2_e) {
    //
    return qm_entry(&t2_s);
}
//${SFs::TstSM5::SM::t1::t2}
QM_ACTION_DEF(TstSM5, t2_x) {
    //
    return qm_exit(&t2_s);
}
//${SFs::TstSM5::SM::t1::t2}
QM_STATE_DEF(TstSM5, t2) {
    QP::QState status_;
    switch (e->sig) {
        default: {
            status_ = Q_RET_SUPER;
            break;
        }
    }
    return status_;
}

//${SFs::TstSM5::SM::t1::t2::t3} .............................................
QP::QMState const TstSM5::t3_s = {
    &TstSM5::t2_s, // superstate
    &TstSM5::t3,
    &TstSM5::t3_e,
    &TstSM5::t3_x,
    Q_ACTION_NULL  // no initial tran.
};
//${SFs::TstSM5::SM::t1::t2::t3}
QM_ACTION_DEF(TstSM5, t3_e) {
    //
    return qm_entry(&t3_s);
}
//${SFs::TstSM5::SM::t1::t2::t3}
QM_ACTION_DEF(TstSM5, t3_x) {
    //
    return qm_exit(&t3_s);
}
//${SFs::TstSM5::SM::t1::t2::t3}
QM_STATE_DEF(TstSM5, t3) {
    QP::QState status_;
    switch (e->sig) {
        default: {
            status_ = Q_RET_SUPER;
            break;
        }
    }
    return status_;
}

//${SFs::TstSM5::SM::t1::t2::t3::t4} .........................................
QP::QMState const TstSM5::t4_s = {
    &TstSM5::t3_s, // superstate
    &TstSM5::t4,
    &TstSM5::t4_e,
    &TstSM5::t4_x,
    Q_ACTION_NULL  // no initial tran.
};
//${SFs::TstSM5::SM::t1::t2::t3::t4}
QM_ACTION_DEF(TstSM5, t4_e) {
    //
    return qm_entry(&t4_s);
}
//${SFs::TstSM5::SM::t1::t2::t3::t4}
QM_ACTION_DEF(TstSM5, t4_x) {
    //
    return qm_exit(&t4_s);
}
//${SFs::TstSM5::SM::t1::t2::t3::t4}
QM_STATE_DEF(TstSM5, t4) {
    QP::QState status_;
    switch (e->sig) {
        //${SFs::TstSM5::SM::t1::t2::t3::t4::D}
        case D_SIG: {

            static struct {
                QP::QMState const *target;
                QP::QActionHandler act[6];
            } const tatbl_ = { // tran-action table
                &t8_s, // target state
                {
                    &t5_e, // entry
                    &t6_e, // entry
                    &t7_e, // entry
                    &t8_e, // entry
                    &t8_i, // initial tran.
                    Q_ACTION_NULL // zero terminator
                }
            };
            status_ = qm_tran(&tatbl_);
            break;
        }
        default: {
            status_ = Q_RET_SUPER;
            break;
        }
    }
    return status_;
}

//${SFs::TstSM5::SM::t1::t2::t3::t4::t5} .....................................
QP::QMState const TstSM5::t5_s = {
    &TstSM5::t4_s, // superstate
    &TstSM5::t5,
    &TstSM5::t5_e,
    &TstSM5::t5_x,
    Q_ACTION_NULL  // no initial tran.
};
//${SFs::TstSM5::SM::t1::t2::t3::t4::t5}
QM_ACTION_DEF(TstSM5, t5_e) {
    //
    return qm_entry(&t5_s);
}
//${SFs::TstSM5::SM::t1::t2::t3::t4::t5}
QM_ACTION_DEF(TstSM5, t5_x) {
    //
    return qm_exit(&t5_s);
}
//${SFs::TstSM5::SM::t1::t2::t3::t4::t5}
QM_STATE_DEF(TstSM5, t5) {
    QP::QState status_;
    switch (e->sig) {
        //${SFs::TstSM5::SM::t1::t2::t3::t4::t5::H}
        case H_SIG: {

            static struct {
                QP::QMState const *target;
                QP::QActionHandler act[7];
            } const tatbl_ = { // tran-action table
                &s1_s, // target state
                {
                    &t5_x, // exit
                    &t4_x, // exit
                    &t3_x, // exit
                    &t2_x, // exit
                    &t1_x, // exit
                    &s1_e, // entry
                    Q_ACTION_NULL // zero terminator
                }
            };
            status_ = qm_tran_hist(hist_s1, &tatbl_);
            break;
        }
        default: {
            status_ = Q_RET_SUPER;
            break;
        }
    }
    return status_;
}

//${SFs::TstSM5::SM::t1::t2::t3::t4::t5::t6} .................................
QP::QMState const TstSM5::t6_s = {
    &TstSM5::t5_s, // superstate
    &TstSM5::t6,
    &TstSM5::t6_e,
    &TstSM5::t6_x,
    Q_ACTION_NULL  // no initial tran.
};
//${SFs::TstSM5::SM::t1::t2::t3::t4::t5::t6}
QM_ACTION_DEF(TstSM5, t6_e) {
    //
    return qm_entry(&t6_s);
}
//${SFs::TstSM5::SM::t1::t2::t3::t4::t5::t6}
QM_ACTION_DEF(TstSM5, t6_x) {
    //
    return qm_exit(&t6_s);
}
//${SFs::TstSM5::SM::t1::t2::t3::t4::t5::t6}
QM_STATE_DEF(TstSM5, t6) {
    QP::QState status_;
    switch (e->sig) {
        default: {
            status_ = Q_RET_SUPER;
            break;
        }
    }
    return status_;
}

//${SFs::TstSM5::SM::t1::t2::t3::t4::t5::t6::t7} .............................
QP::QMState const TstSM5::t7_s = {
    &TstSM5::t6_s, // superstate
    &TstSM5::t7,
    &TstSM5::t7_e,
    &TstSM5::t7_x,
    Q_ACTION_NULL  // no initial tran.
};
//${SFs::TstSM5::SM::t1::t2::t3::t4::t5::t6::t7}
QM_ACTION_DEF(TstSM5, t7_e) {
    //
    return qm_entry(&t7_s);
}
//${SFs::TstSM5::SM::t1::t2::t3::t4::t5::t6::t7}
QM_ACTION_DEF(TstSM5, t7_x) {
    //
    return qm_exit(&t7_s);
}
//${SFs::TstSM5::SM::t1::t2::t3::t4::t5::t6::t7}
QM_STATE_DEF(TstSM5, t7) {
    QP::QState status_;
    switch (e->sig) {
        default: {
            status_ = Q_RET_SUPER;
            break;
        }
    }
    return status_;
}

//${SFs::TstSM5::SM::t1::t2::t3::t4::t5::t6::t7::t8} .........................
QP::QMState const TstSM5::t8_s = {
    &TstSM5::t7_s, // superstate
    &TstSM5::t8,
    &TstSM5::t8_e,
    &TstSM5::t8_x,
    &TstSM5::t8_i
};
//${SFs::TstSM5::SM::t1::t2::t3::t4::t5::t6::t7::t8}
QM_ACTION_DEF(TstSM5, t8_e) {
    //
    return qm_entry(&t8_s);
}
//${SFs::TstSM5::SM::t1::t2::t3::t4::t5::t6::t7::t8}
QM_ACTION_DEF(TstSM5, t8_x) {
    //
    return qm_exit(&t8_s);
}
//${SFs::TstSM5::SM::t1::t2::t3::t4::t5::t6::t7::t8::initial}
QM_ACTION_DEF(TstSM5, t8_i) {
    //${SFs::TstSM5::SM::t1::t2::t3::t4::t5::t6::t7::t8::initial}
    static QP::QMTranActTable const tatbl_ = { // tran-action table
        &t9_s, // target state
        {
            Q_ACTION_NULL // zero terminator
        }
    };
    return qm_tran_init(&tatbl_);
}
//${SFs::TstSM5::SM::t1::t2::t3::t4::t5::t6::t7::t8}
QM_STATE_DEF(TstSM5, t8) {
    QP::QState status_;
    switch (e->sig) {
        default: {
            status_ = Q_RET_SUPER;
            break;
        }
    }
    return status_;
}

//${SFs::TstSM5::SM::t1::t2::t3::t4::t5::t6::t7::t8::t9} .....................
QP::QMState const TstSM5::t9_s = {
    &TstSM5::t8_s, // superstate
    &TstSM5::t9,
    Q_ACTION_NULL, // no entry action
    &TstSM5::t9_x,
    Q_ACTION_NULL  // no initial tran.
};
//${SFs::TstSM5::SM::t1::t2::t3::t4::t5::t6::t7::t8::t9}
QM_ACTION_DEF(TstSM5, t9_x) {
    //
    return qm_exit(&t9_s);
}
//${SFs::TstSM5::SM::t1::t2::t3::t4::t5::t6::t7::t8::t9}
QM_STATE_DEF(TstSM5, t9) {
    QP::QState status_;
    switch (e->sig) {
        default: {
            status_ = Q_RET_SUPER;
            break;
        }
    }
    return status_;
}

} // namespace APP
//$enddef${SFs} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
