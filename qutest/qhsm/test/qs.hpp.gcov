        -:    0:Source:../../../../include/qs.hpp
        -:    0:Graph:build/qep_hsm.gcno
        -:    0:Data:build/qep_hsm.gcda
        -:    0:Runs:6
        -:    1://$file${include::qs.hpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
        -:    2://
        -:    3:// Model: qpcpp.qm
        -:    4:// File:  ${include::qs.hpp}
        -:    5://
        -:    6:// This code has been generated by QM 7.0.0 <www.state-machine.com/qm>.
        -:    7:// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
        -:    8://
        -:    9:// This generated code is covered by the following QP license:
        -:   10:// License #    : LicenseRef-QL-dual
        -:   11:// Issued to    : General public
        -:   12:// Framework(s) : qpcpp
        -:   13:// Support ends : 2025-12-31
        -:   14://
        -:   15:// Copyright (C) 2005 Quantum Leaps, LLC. All rights reserved.
        -:   16://
        -:   17://                    Q u a n t u m  L e a P s
        -:   18://                    ------------------------
        -:   19://                    Modern Embedded Software
        -:   20://
        -:   21:// SPDX-License-Identifier: GPL-3.0-or-later OR LicenseRef-QL-commercial
        -:   22://
        -:   23:// The QP/C++ software is dual-licensed under the terms of the open-source
        -:   24:// GNU General Public License (GPL) or under the terms of one of the closed-
        -:   25:// source Quantum Leaps commercial licenses.
        -:   26://
        -:   27:// Redistributions in source code must retain this top-level comment block.
        -:   28:// Plagiarizing this software to sidestep the license obligations is illegal.
        -:   29://
        -:   30:// NOTE:
        -:   31:// The GPL (see <www.gnu.org/licenses/gpl-3.0>) does NOT permit the
        -:   32:// incorporation of the QP/C++ software into proprietary programs. Please
        -:   33:// contact Quantum Leaps for commercial licensing options, which expressly
        -:   34:// supersede the GPL and are designed explicitly for licensees interested
        -:   35:// in using QP/C++ in closed-source proprietary applications.
        -:   36://
        -:   37:// Quantum Leaps contact information:
        -:   38:// <www.state-machine.com/licensing>
        -:   39:// <info@state-machine.com>
        -:   40://
        -:   41://$endhead${include::qs.hpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        -:   42:#ifndef QS_HPP_
        -:   43:#define QS_HPP_
        -:   44:
        -:   45:#ifndef Q_SPY
        -:   46:#error "Q_SPY must be defined to include qs.hpp"
        -:   47:#endif
        -:   48:
        -:   49://============================================================================
        -:   50://! @cond INTERNAL
        -:   51:
        -:   52:#ifndef QS_CTR_SIZE
        -:   53:#define QS_CTR_SIZE 2U
        -:   54:#endif
        -:   55:
        -:   56:#ifndef QS_TIME_SIZE
        -:   57:#define QS_TIME_SIZE 4U
        -:   58:#endif
        -:   59:
        -:   60://! @endcond
        -:   61://============================================================================
        -:   62:
        -:   63://$declare${QS::types} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
        -:   64:namespace QP {
        -:   65:
        -:   66://${QS::types::QSpyPre} ......................................................
        -:   67://! pre-defined QS record IDs
        -:   68:enum QSpyPre : std::int8_t {
        -:   69:    // [0] QS session (not maskable)
        -:   70:    QS_EMPTY,             //!< QS record for cleanly starting a session
        -:   71:
        -:   72:    // [1] SM records
        -:   73:    QS_QEP_STATE_ENTRY,   //!< a state was entered
        -:   74:    QS_QEP_STATE_EXIT,    //!< a state was exited
        -:   75:    QS_QEP_STATE_INIT,    //!< an initial transition was taken in a state
        -:   76:    QS_QEP_INIT_TRAN,     //!< the top-most initial transition was taken
        -:   77:    QS_QEP_INTERN_TRAN,   //!< an internal transition was taken
        -:   78:    QS_QEP_TRAN,          //!< a regular transition was taken
        -:   79:    QS_QEP_IGNORED,       //!< an event was ignored (silently discarded)
        -:   80:    QS_QEP_DISPATCH,      //!< an event was dispatched (begin of RTC step)
        -:   81:    QS_QEP_UNHANDLED,     //!< an event was un-handled due to a guard
        -:   82:
        -:   83:    // [10] Active Object (AO) records
        -:   84:    QS_QF_ACTIVE_DEFER,   //!< AO deferred an event
        -:   85:    QS_QF_ACTIVE_RECALL,  //!< AO recalled an event
        -:   86:    QS_QF_ACTIVE_SUBSCRIBE,   //!< an AO subscribed to an event
        -:   87:    QS_QF_ACTIVE_UNSUBSCRIBE, //!< an AO unsubscribed to an event
        -:   88:    QS_QF_ACTIVE_POST,      //!< an event was posted (FIFO) directly to AO
        -:   89:    QS_QF_ACTIVE_POST_LIFO, //!< an event was posted (LIFO) directly to AO
        -:   90:    QS_QF_ACTIVE_GET,     //!< AO got an event and its queue is not empty
        -:   91:    QS_QF_ACTIVE_GET_LAST,//!< AO got an event and its queue is empty
        -:   92:    QS_QF_ACTIVE_RECALL_ATTEMPT, //!< AO attempted to recall an event
        -:   93:
        -:   94:    // [19] Event Queue (EQ) records
        -:   95:    QS_QF_EQUEUE_POST,      //!< an event was posted (FIFO) to a raw queue
        -:   96:    QS_QF_EQUEUE_POST_LIFO, //!< an event was posted (LIFO) to a raw queue
        -:   97:    QS_QF_EQUEUE_GET,     //!< get an event and queue still not empty
        -:   98:    QS_QF_EQUEUE_GET_LAST,//!< get the last event from the queue
        -:   99:
        -:  100:    // [23] Framework (QF) records
        -:  101:    QS_QF_NEW_ATTEMPT,    //!< an attempt to allocate an event failed
        -:  102:
        -:  103:    // [24] Memory Pool (MP) records
        -:  104:    QS_QF_MPOOL_GET,      //!< a memory block was removed from memory pool
        -:  105:    QS_QF_MPOOL_PUT,      //!< a memory block was returned to memory pool
        -:  106:
        -:  107:    // [26] Additional Framework (QF) records
        -:  108:    QS_QF_PUBLISH,        //!< an event was published to active objects
        -:  109:    QS_QF_NEW_REF,        //!< new event reference was created
        -:  110:    QS_QF_NEW,            //!< new event was created
        -:  111:    QS_QF_GC_ATTEMPT,     //!< garbage collection attempt
        -:  112:    QS_QF_GC,             //!< garbage collection
        -:  113:    QS_QF_TICK,           //!< QTimeEvt tick was called
        -:  114:
        -:  115:    // [32] Time Event (TE) records
        -:  116:    QS_QF_TIMEEVT_ARM,    //!< a time event was armed
        -:  117:    QS_QF_TIMEEVT_AUTO_DISARM, //!< a time event expired and was disarmed
        -:  118:    QS_QF_TIMEEVT_DISARM_ATTEMPT,//!< attempt to disarm a disarmed QTimeEvt
        -:  119:    QS_QF_TIMEEVT_DISARM, //!< true disarming of an armed time event
        -:  120:    QS_QF_TIMEEVT_REARM,  //!< rearming of a time event
        -:  121:    QS_QF_TIMEEVT_POST,   //!< a time event posted itself directly to an AO
        -:  122:
        -:  123:    // [38] Additional Framework (QF) records
        -:  124:    QS_QF_DELETE_REF,     //!< an event reference is about to be deleted
        -:  125:    QS_QF_CRIT_ENTRY,     //!< critical section was entered
        -:  126:    QS_QF_CRIT_EXIT,      //!< critical section was exited
        -:  127:    QS_QF_ISR_ENTRY,      //!< an ISR was entered
        -:  128:    QS_QF_ISR_EXIT,       //!< an ISR was exited
        -:  129:    QS_QF_INT_DISABLE,    //!< interrupts were disabled
        -:  130:    QS_QF_INT_ENABLE,     //!< interrupts were enabled
        -:  131:
        -:  132:    // [45] Additional Active Object (AO) records
        -:  133:    QS_QF_ACTIVE_POST_ATTEMPT,//!< attempt to post an evt to AO failed
        -:  134:
        -:  135:    // [46] Additional Event Queue (EQ) records
        -:  136:    QS_QF_EQUEUE_POST_ATTEMPT,//!< attempt to post evt to QEQueue failed
        -:  137:
        -:  138:    // [47] Additional Memory Pool (MP) records
        -:  139:    QS_QF_MPOOL_GET_ATTEMPT,  //!< attempt to get a memory block failed
        -:  140:
        -:  141:    // [48] Scheduler (SC) records
        -:  142:    QS_SCHED_PREEMPT,     //!< scheduler asynchronously preempted a task
        -:  143:    QS_SCHED_RESTORE,     //!< scheduler restored preempted task
        -:  144:    QS_SCHED_LOCK,        //!< scheduler was locked
        -:  145:    QS_SCHED_UNLOCK,      //!< scheduler was unlocked
        -:  146:    QS_SCHED_NEXT,        //!< scheduler started next task
        -:  147:    QS_SCHED_IDLE,        //!< scheduler restored the idle task
        -:  148:
        -:  149:    // [54] Miscellaneous QS records (not maskable)
        -:  150:    QS_ENUM_DICT,         //!< enumeration dictionary entry
        -:  151:
        -:  152:    // [55] Additional QEP records
        -:  153:    QS_QEP_TRAN_HIST,     //!< a tran. to history was taken
        -:  154:    QS_QEP_TRAN_EP,       //!< a tran. to entry point into a submachine
        -:  155:    QS_QEP_TRAN_XP,       //!< a tran. to exit  point out of a submachine
        -:  156:
        -:  157:    // [58] Miscellaneous QS records (not maskable)
        -:  158:    QS_TEST_PAUSED,       //!< test has been paused
        -:  159:    QS_TEST_PROBE_GET,    //!< reports that Test-Probe has been used
        -:  160:    QS_SIG_DICT,          //!< signal dictionary entry
        -:  161:    QS_OBJ_DICT,          //!< object dictionary entry
        -:  162:    QS_FUN_DICT,          //!< function dictionary entry
        -:  163:    QS_USR_DICT,          //!< user QS record dictionary entry
        -:  164:    QS_TARGET_INFO,       //!< reports the Target information
        -:  165:    QS_TARGET_DONE,       //!< reports completion of a user callback
        -:  166:    QS_RX_STATUS,         //!< reports QS data receive status
        -:  167:    QS_QUERY_DATA,        //!< reports the data from "current object" query
        -:  168:    QS_PEEK_DATA,         //!< reports the data from the PEEK query
        -:  169:    QS_ASSERT_FAIL,       //!< assertion failed in the code
        -:  170:    QS_QF_RUN,            //!< QF_run() was entered
        -:  171:
        -:  172:    // [71] Semaphore (SEM) records
        -:  173:    QS_SEM_TAKE,          //!< a semaphore was taken by a thread
        -:  174:    QS_SEM_BLOCK,         //!< a semaphore blocked a thread
        -:  175:    QS_SEM_SIGNAL,        //!< a semaphore was signaled
        -:  176:    QS_SEM_BLOCK_ATTEMPT, //!< a semaphore blocked was attempted
        -:  177:
        -:  178:    // [75] Mutex (MTX) records
        -:  179:    QS_MTX_LOCK,          //!< a mutex was locked
        -:  180:    QS_MTX_BLOCK,         //!< a mutex blocked a thread
        -:  181:    QS_MTX_UNLOCK,        //!< a mutex was unlocked
        -:  182:    QS_MTX_LOCK_ATTEMPT,  //!< a mutex lock was attempted
        -:  183:    QS_MTX_BLOCK_ATTEMPT, //!< a mutex blocking was attempted
        -:  184:    QS_MTX_UNLOCK_ATTEMPT,//!< a mutex unlock was attempted
        -:  185:
        -:  186:    // [81]
        -:  187:    QS_PRE_MAX            //!< the # predefined signals
        -:  188:};
        -:  189:
        -:  190://${QS::types::QSpyGroups} ...................................................
        -:  191://! QS-TX record groups for QS_GLB_FILTER()
        -:  192:enum QSpyGroups : std::int16_t {
        -:  193:    QS_ALL_RECORDS = 0xF0,//!< all maskable QS records
        -:  194:    QS_SM_RECORDS,        //!< State Machine QS records
        -:  195:    QS_AO_RECORDS,        //!< Active Object QS records
        -:  196:    QS_EQ_RECORDS,        //!< Event Queues QS records
        -:  197:    QS_MP_RECORDS,        //!< Memory Pools QS records
        -:  198:    QS_TE_RECORDS,        //!< Time Events QS records
        -:  199:    QS_QF_RECORDS,        //!< QF QS records
        -:  200:    QS_SC_RECORDS,        //!< Scheduler QS records
        -:  201:    QS_SEM_RECORDS,       //!< Semaphore QS records
        -:  202:    QS_MTX_RECORDS,       //!< Mutex QS records
        -:  203:    QS_U0_RECORDS,        //!< User Group 100-104 records
        -:  204:    QS_U1_RECORDS,        //!< User Group 105-109 records
        -:  205:    QS_U2_RECORDS,        //!< User Group 110-114 records
        -:  206:    QS_U3_RECORDS,        //!< User Group 115-119 records
        -:  207:    QS_U4_RECORDS,        //!< User Group 120-124 records
        -:  208:    QS_UA_RECORDS         //!< All User records
        -:  209:};
        -:  210:
        -:  211://${QS::types::QSpyUserOffsets} ..............................................
        -:  212://! QS user record group offsets for QS_GLB_FILTER()
        -:  213:enum QSpyUserOffsets : std::int16_t {
        -:  214:    QS_USER  = 100,          //!< the first record available to QS users
        -:  215:    QS_USER0 = QS_USER,      //!< offset for User Group 0
        -:  216:    QS_USER1 = QS_USER0 + 5, //!< offset for User Group 1
        -:  217:    QS_USER2 = QS_USER1 + 5, //!< offset for User Group 2
        -:  218:    QS_USER3 = QS_USER2 + 5, //!< offset for User Group 3
        -:  219:    QS_USER4 = QS_USER3 + 5  //!< offset for User Group 4
        -:  220:};
        -:  221:
        -:  222://${QS::types::QSpyIdOffsets} ................................................
        -:  223://! QS ID offsets for QS_LOC_FILTER()
        -:  224:enum QSpyIdOffsets : std::int16_t {
        -:  225:    QS_AO_ID = 0,  //!< offset for AO priorities
        -:  226:    QS_EP_ID = 64, //!< offset for event-pool IDs
        -:  227:    QS_EQ_ID = 80, //!< offset for event-queue IDs
        -:  228:    QS_AP_ID = 96  //!< offset for Application-specific IDs
        -:  229:};
        -:  230:
        -:  231://${QS::types::QSpyIdGroups} .................................................
        -:  232://! QS ID groups for QS_LOC_FILTER()
        -:  233:enum QSpyIdGroups : std::int16_t {
        -:  234:    QS_ALL_IDS = 0xF0,            //!< all QS IDs
        -:  235:    QS_AO_IDS  = 0x80 + QS_AO_ID, //!< AO IDs (priorities)
        -:  236:    QS_EP_IDS  = 0x80 + QS_EP_ID, //!< event-pool IDs
        -:  237:    QS_EQ_IDS  = 0x80 + QS_EQ_ID, //!< event-queue IDs
        -:  238:    QS_AP_IDS  = 0x80 + QS_AP_ID  //!< Application-specific IDs
        -:  239:};
        -:  240:
        -:  241://${QS::types::QSpyId} .......................................................
        -:  242:struct QSpyId {
        -:  243:    std::uint8_t m_prio; //!< prio. (qsId) for the QS "local filter"
        -:  244:
        -:  245:    // get the prio. (qsId) from the QSpyId object
        -:  246:    std::uint_fast8_t getPrio() const noexcept {
        -:  247:        return static_cast<std::uint_fast8_t>(m_prio);
        -:  248:    }
        -:  249:};
        -:  250:
        -:  251://${QS::types::QSObj} ........................................................
        -:  252:#if (QS_OBJ_PTR_SIZE == 2U)
        -:  253:using QSObj = std::uint16_t;
        -:  254:#endif //  (QS_OBJ_PTR_SIZE == 2U)
        -:  255:
        -:  256://${QS::types::QSObj} ........................................................
        -:  257:#if (QS_OBJ_PTR_SIZE == 4U)
        -:  258:using QSObj = std::uint32_t;
        -:  259:#endif //  (QS_OBJ_PTR_SIZE == 4U)
        -:  260:
        -:  261://${QS::types::QSObj} ........................................................
        -:  262:#if (QS_OBJ_PTR_SIZE == 8U)
        -:  263:using QSObj = std::uint64_t;
        -:  264:#endif //  (QS_OBJ_PTR_SIZE == 8U)
        -:  265:
        -:  266://${QS::types::QSFun} ........................................................
        -:  267:#if (QS_FUN_PTR_SIZE == 2U)
        -:  268:using QSFun = std::uint16_t;
        -:  269:#endif //  (QS_FUN_PTR_SIZE == 2U)
        -:  270:
        -:  271://${QS::types::QSFun} ........................................................
        -:  272:#if (QS_FUN_PTR_SIZE == 4U)
        -:  273:using QSFun = std::uint32_t;
        -:  274:#endif //  (QS_FUN_PTR_SIZE == 4U)
        -:  275:
        -:  276://${QS::types::QSFun} ........................................................
        -:  277:#if (QS_FUN_PTR_SIZE == 8U)
        -:  278:using QSFun = std::uint64_t;
        -:  279:#endif //  (QS_FUN_PTR_SIZE == 8U)
        -:  280:
        -:  281://${QS::types::QSpyFunPtr} ...................................................
        -:  282:using QSpyFunPtr = void (*)();
        -:  283:
        -:  284://${QS::types::QSCtr} ........................................................
        -:  285:#if (QS_CTR_SIZE == 2U)
        -:  286:using QSCtr = std::uint16_t;
        -:  287:#endif //  (QS_CTR_SIZE == 2U)
        -:  288:
        -:  289://${QS::types::QSCtr} ........................................................
        -:  290:#if (QS_CTR_SIZE == 4U)
        -:  291:using QSCtr = std::uint32_t;
        -:  292:#endif //  (QS_CTR_SIZE == 4U)
        -:  293:
        -:  294://${QS::types::QSTimeCtr} ....................................................
        -:  295:#if (QS_TIME_SIZE == 2U)
        -:  296:using QSTimeCtr = std::uint16_t;
        -:  297:#endif //  (QS_TIME_SIZE == 2U)
        -:  298:
        -:  299://${QS::types::QSTimeCtr} ....................................................
        -:  300:#if (QS_TIME_SIZE == 4U)
        -:  301:using QSTimeCtr = std::uint32_t;
        -:  302:#endif //  (QS_TIME_SIZE == 4U)
        -:  303:
        -:  304:} // namespace QP
        -:  305://$enddecl${QS::types} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        -:  306://$declare${QS::filters} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
        -:  307:namespace QP {
        -:  308:namespace QS {
        -:  309:
        -:  310://${QS::filters::Filter} .....................................................
        -:  311:class Filter {
        -:  312:public:
        -:  313:    std::uint8_t glb[16];
        -:  314:    std::uint8_t loc[16];
        -:  315:}; // class Filter
        -:  316:
        -:  317://${QS::filters::filt_} ......................................................
        -:  318:extern Filter filt_;
        -:  319:
        -:  320:} // namespace QS
        -:  321:} // namespace QP
        -:  322://$enddecl${QS::filters} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        -:  323://$declare${QS-macros} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
        -:  324:
        -:  325://${QS-macros::QS_INIT} ......................................................
        -:  326:#define QS_INIT(arg_) (QP::QS::onStartup(arg_))
        -:  327:
        -:  328://${QS-macros::QS_EXIT} ......................................................
        -:  329:#define QS_EXIT() (QP::QS::onCleanup())
        -:  330:
        -:  331://${QS-macros::QS_OUTPUT} ....................................................
        -:  332:#define QS_OUTPUT() (QP::QS::doOutput())
        -:  333:
        -:  334://${QS-macros::QS_RX_INPUT} ..................................................
        -:  335:#define QS_RX_INPUT() (QP::QS::doInput())
        -:  336:
        -:  337://${QS-macros::QS_GLB_FILTER} ................................................
        -:  338:#define QS_GLB_FILTER(rec_) \
        -:  339:    (QP::QS::glbFilter_(static_cast<std::int_fast16_t>(rec_)))
        -:  340:
        -:  341://${QS-macros::QS_LOC_FILTER} ................................................
        -:  342:#define QS_LOC_FILTER(qsId_) \
        -:  343:    (QP::QS::locFilter_(static_cast<std::int_fast16_t>(qsId_)))
        -:  344:
        -:  345://${QS-macros::QS_BEGIN_ID} ..................................................
        -:  346:#define QS_BEGIN_ID(rec_, qsId_) \
        -:  347:if (QS_GLB_CHECK_(rec_) && QS_LOC_CHECK_(qsId_)) { \
        -:  348:    QS_CRIT_STAT \
        -:  349:    QS_CRIT_ENTRY(); \
        -:  350:    QS_MEM_SYS(); \
        -:  351:    QP::QS::beginRec_(static_cast<std::uint_fast8_t>(rec_)); \
        -:  352:    QS_TIME_PRE_(); {
        -:  353:
        -:  354://${QS-macros::QS_END} .......................................................
        -:  355:#define QS_END() } \
        -:  356:    QP::QS::endRec_(); \
        -:  357:    QS_MEM_APP(); \
        -:  358:    QS_CRIT_EXIT(); \
        -:  359:}
        -:  360:
        -:  361://${QS-macros::QS_FLUSH} .....................................................
        -:  362:#define QS_FLUSH() (QP::QS::onFlush())
        -:  363:
        -:  364://${QS-macros::QS_BEGIN_INCRIT} ..............................................
        -:  365:#define QS_BEGIN_INCRIT(rec_, qsId_) \
        -:  366:if (QS_GLB_CHECK_(rec_) && QS_LOC_CHECK_(qsId_)) { \
        -:  367:    QP::QS::beginRec_(rec_); \
        -:  368:    QS_TIME_PRE_(); {
        -:  369:
        -:  370://${QS-macros::QS_END_INCRIT} ................................................
        -:  371:#define QS_END_INCRIT() } \
        -:  372:    QP::QS::endRec_(); \
        -:  373:}
        -:  374:
        -:  375://${QS-macros::QS_GLB_CHECK_} ................................................
        -:  376:#define QS_GLB_CHECK_(rec_) \
        -:  377:((static_cast<std::uint_fast8_t>(QP::QS::filt_.glb[ \
        -:  378:            static_cast<std::uint_fast8_t>(rec_) >> 3U]) \
        -:  379:      & (static_cast<std::uint_fast8_t>(1U) \
        -:  380:        << (static_cast<std::uint_fast8_t>(rec_) & 7U))) != 0U)
        -:  381:
        -:  382://${QS-macros::QS_LOC_CHECK_} ................................................
        -:  383:#define QS_LOC_CHECK_(qsId_) \
        -:  384:((static_cast<std::uint_fast8_t>(QP::QS::filt_.loc \
        -:  385:            [static_cast<std::uint_fast8_t>(qsId_) >> 3U]) \
        -:  386:      & (static_cast<std::uint_fast8_t>(1U) \
        -:  387:        << (static_cast<std::uint_fast8_t>(qsId_) & 7U))) != 0U)
        -:  388:
        -:  389://${QS-macros::QS_REC_DONE} ..................................................
        -:  390:#ifndef QS_REC_DONE
        -:  391:#define QS_REC_DONE() (static_cast<void>(0))
        -:  392:#endif // ndef QS_REC_DONE
        -:  393:
        -:  394://${QS-macros::QS_I8} ........................................................
        -:  395:#define QS_I8(width_, data_) \
        -:  396:(QP::QS::u8_fmt_(static_cast<std::uint8_t>( \
        -:  397:    (static_cast<std::uint8_t>(((width_) << 4U) & 0x7U)) \
        -:  398:    | static_cast<std::uint8_t>(QP::QS::I8_ENUM_T)), (data_)))
        -:  399:
        -:  400://${QS-macros::QS_U8} ........................................................
        -:  401:#define QS_U8(width_, data_) \
        -:  402:(QP::QS::u8_fmt_(static_cast<std::uint8_t>( \
        -:  403:    (static_cast<std::uint8_t>((width_) << 4U)) \
        -:  404:    | static_cast<std::uint8_t>(QP::QS::U8_T)), (data_)))
        -:  405:
        -:  406://${QS-macros::QS_I16} .......................................................
        -:  407:#define QS_I16(width_, data_) \
        -:  408:(QP::QS::u16_fmt_(static_cast<std::uint8_t>( \
        -:  409:    (static_cast<std::uint8_t>((width_) << 4U)) \
        -:  410:    | static_cast<std::uint8_t>(QP::QS::I16_T)), (data_)))
        -:  411:
        -:  412://${QS-macros::QS_U16} .......................................................
        -:  413:#define QS_U16(width_, data_) \
        -:  414:(QP::QS::u16_fmt_(static_cast<std::uint8_t>((((width_) << 4U)) \
        -:  415:    | static_cast<std::uint8_t>(QP::QS::U16_T)), (data_)))
        -:  416:
        -:  417://${QS-macros::QS_I32} .......................................................
        -:  418:#define QS_I32(width_, data_) \
        -:  419:(QP::QS::u32_fmt_( \
        -:  420:    static_cast<std::uint8_t>((static_cast<std::uint8_t>((width_) << 4U)) \
        -:  421:    | static_cast<std::uint8_t>(QP::QS::I32_T)), (data_)))
        -:  422:
        -:  423://${QS-macros::QS_U32} .......................................................
        -:  424:#define QS_U32(width_, data_) \
        -:  425:(QP::QS::u32_fmt_(static_cast<std::uint8_t>( \
        -:  426:    (static_cast<std::uint8_t>((width_) << 4U)) \
        -:  427:    | static_cast<std::uint8_t>(QP::QS::U32_T)), (data_)))
        -:  428:
        -:  429://${QS-macros::QS_I64} .......................................................
        -:  430:#define QS_I64(width_, data_) \
        -:  431:(QP::QS::u64_fmt_(static_cast<std::uint8_t>( \
        -:  432:    (static_cast<std::uint8_t>((width_) << 4U)) \
        -:  433:    | static_cast<std::uint8_t>(QP::QS::I64_T)), (data_)))
        -:  434:
        -:  435://${QS-macros::QS_U64} .......................................................
        -:  436:#define QS_U64(width_, data_) \
        -:  437:(QP::QS::u64_fmt_(static_cast<std::uint8_t>( \
        -:  438:    (static_cast<std::uint8_t>((width_) << 4U)) \
        -:  439:        | static_cast<std::uint8_t>(QP::QS::U64_T)), (data_)))
        -:  440:
        -:  441://${QS-macros::QS_F32} .......................................................
        -:  442:#define QS_F32(width_, data_) \
        -:  443:(QP::QS::f32_fmt_(static_cast<std::uint8_t>( \
        -:  444:    (static_cast<std::uint8_t>((width_) << 4U)) \
        -:  445:    | static_cast<std::uint8_t>(QP::QS::F32_T)), (data_)))
        -:  446:
        -:  447://${QS-macros::QS_F64} .......................................................
        -:  448:#define QS_F64(width_, data_)  \
        -:  449:(QP::QS::f64_fmt_(static_cast<std::uint8_t>( \
        -:  450:    (static_cast<std::uint8_t>((width_) << 4U)) \
        -:  451:    | static_cast<std::uint8_t>(QP::QS::F64_T)), (data_)))
        -:  452:
        -:  453://${QS-macros::QS_STR} .......................................................
        -:  454:#define QS_STR(str_) (QP::QS::str_fmt_(str_))
        -:  455:
        -:  456://${QS-macros::QS_MEM} .......................................................
        -:  457:#define QS_MEM(mem_, size_) (QP::QS::mem_fmt_((mem_), (size_)))
        -:  458:
        -:  459://${QS-macros::QS_ENUM} ......................................................
        -:  460:#define QS_ENUM(group_, value_) \
        -:  461:    (QP::QS::u8_fmt_(static_cast<std::uint8_t>(0x80U | ((group_) << 4U)) \
        -:  462:                     | static_cast<std::uint8_t>(QP::QS::I8_ENUM_T),\
        -:  463:                static_cast<std::uint8_t>(value_)))
        -:  464:
        -:  465://${QS-macros::QS_TIME_PRE_} .................................................
        -:  466:#if (QS_TIME_SIZE == 2U)
        -:  467:#define QS_TIME_PRE_() (QP::QS::u16_raw_(QP::QS::onGetTime()))
        -:  468:#endif //  (QS_TIME_SIZE == 2U)
        -:  469:
        -:  470://${QS-macros::QS_TIME_PRE_} .................................................
        -:  471:#if (QS_TIME_SIZE == 4U)
        -:  472:#define QS_TIME_PRE_() (QP::QS::u32_raw_(QP::QS::onGetTime()))
        -:  473:#endif //  (QS_TIME_SIZE == 4U)
        -:  474:
        -:  475://${QS-macros::QS_OBJ} .......................................................
        -:  476:#if (QS_OBJ_PTR_SIZE == 2U)
        -:  477:#define QS_OBJ(obj_) (QP::QS::u16_fmt_(QP::QS::OBJ_T, \
        -:  478:        reinterpret_cast<std::uint16_t>(obj_)))
        -:  479:#endif //  (QS_OBJ_PTR_SIZE == 2U)
        -:  480:
        -:  481://${QS-macros::QS_OBJ} .......................................................
        -:  482:#if (QS_OBJ_PTR_SIZE == 4U)
        -:  483:#define QS_OBJ(obj_) (QP::QS::u32_fmt_(QP::QS::OBJ_T, \
        -:  484:        reinterpret_cast<std::uint32_t>(obj_)))
        -:  485:#endif //  (QS_OBJ_PTR_SIZE == 4U)
        -:  486:
        -:  487://${QS-macros::QS_OBJ} .......................................................
        -:  488:#if (QS_OBJ_PTR_SIZE == 8U)
        -:  489:#define QS_OBJ(obj_) (QP::QS::u64_fmt_(QP::QS::OBJ_T, \
        -:  490:        reinterpret_cast<std::uint64_t>(obj_)))
        -:  491:#endif //  (QS_OBJ_PTR_SIZE == 8U)
        -:  492:
        -:  493://${QS-macros::QS_FUN} .......................................................
        -:  494:#if (QS_FUN_PTR_SIZE == 2U)
        -:  495:#define QS_FUN(fun_) (QP::QS::u16_fmt_(QP::QS::FUN_T, \
        -:  496:        reinterpret_cast<std::uint16_t>(fun_)))
        -:  497:#endif //  (QS_FUN_PTR_SIZE == 2U)
        -:  498:
        -:  499://${QS-macros::QS_FUN} .......................................................
        -:  500:#if (QS_FUN_PTR_SIZE == 4U)
        -:  501:#define QS_FUN(fun_) (QP::QS::u32_fmt_(QP::QS::FUN_T, \
        -:  502:        reinterpret_cast<std::uint32_t>(fun_)))
        -:  503:#endif //  (QS_FUN_PTR_SIZE == 4U)
        -:  504:
        -:  505://${QS-macros::QS_FUN} .......................................................
        -:  506:#if (QS_FUN_PTR_SIZE == 8U)
        -:  507:#define QS_FUN(fun_) (QP::QS::u64_fmt_(QP::QS::FUN_T, \
        -:  508:        reinterpret_cast<std::uint64_t>(fun_)))
        -:  509:#endif //  (QS_FUN_PTR_SIZE == 8U)
        -:  510:
        -:  511://${QS-macros::QS_SIG} .......................................................
        -:  512:#if (Q_SIGNAL_SIZE == 1U)
        -:  513:#define QS_SIG(sig_, obj_) \
        -:  514:    QP::QS::u8_fmt_(QP::QS::SIG_T, static_cast<std::uint8_t>(sig_)); \
        -:  515:    QP::QS::obj_raw_(obj_)
        -:  516:#endif //  (Q_SIGNAL_SIZE == 1U)
        -:  517:
        -:  518://${QS-macros::QS_SIG} .......................................................
        -:  519:#if (Q_SIGNAL_SIZE == 2U)
        -:  520:#define QS_SIG(sig_, obj_) \
        -:  521:    QP::QS::u16_fmt_(QP::QS::SIG_T, static_cast<std::uint16_t>(sig_)); \
        -:  522:    QP::QS::obj_raw_(obj_)
        -:  523:#endif //  (Q_SIGNAL_SIZE == 2U)
        -:  524:
        -:  525://${QS-macros::QS_SIG} .......................................................
        -:  526:#if (Q_SIGNAL_SIZE == 4U)
        -:  527:#define QS_SIG(sig_, obj_) \
        -:  528:    QP::QS::u32_fmt_(QP::QS::SIG_T, static_cast<std::uint32_t>(sig_)); \
        -:  529:    QP::QS::obj_raw_(obj_)
        -:  530:#endif //  (Q_SIGNAL_SIZE == 4U)
        -:  531:
        -:  532://${QS-macros::QS_SIG_DICTIONARY} ............................................
        -:  533:#define QS_SIG_DICTIONARY(sig_, obj_) \
        -:  534:    (QP::QS::sig_dict_pre_((sig_), (obj_), #sig_))
        -:  535:
        -:  536://${QS-macros::QS_OBJ_DICTIONARY} ............................................
        -:  537:#define QS_OBJ_DICTIONARY(obj_) \
        -:  538:    (QP::QS::obj_dict_pre_((obj_), #obj_))
        -:  539:
        -:  540://${QS-macros::QS_OBJ_ARR_DICTIONARY} ........................................
        -:  541:#define QS_OBJ_ARR_DICTIONARY(obj_, idx_) \
        -:  542:    (QP::QS::obj_arr_dict_pre_((obj_), (idx_), #obj_))
        -:  543:
        -:  544://${QS-macros::QS_FUN_DICTIONARY} ............................................
        -:  545:#define QS_FUN_DICTIONARY(fun_) \
        -:  546:    (QP::QS::fun_dict_pre_(     \
        -:  547:        QP::QS::force_cast<void (*)()>(fun_), #fun_))
        -:  548:
        -:  549://${QS-macros::QS_USR_DICTIONARY} ............................................
        -:  550:#define QS_USR_DICTIONARY(rec_) \
        -:  551:    (QP::QS::usr_dict_pre_((rec_), #rec_))
        -:  552:
        -:  553://${QS-macros::QS_ENUM_DICTIONARY} ...........................................
        -:  554:#define QS_ENUM_DICTIONARY(value_, group_) \
        -:  555:    (QP::QS::enum_dict_pre_((value_), (group_), #value_))
        -:  556:
        -:  557://${QS-macros::QS_QF_CRIT_ENTRY} .............................................
        -:  558:#define QS_QF_CRIT_ENTRY() (QP::QS::crit_entry_pre_())
        -:  559:
        -:  560://${QS-macros::QS_QF_CRIT_EXIT} ..............................................
        -:  561:#define QS_QF_CRIT_EXIT() (QP::QS::crit_exit_pre_())
        -:  562:
        -:  563://${QS-macros::QS_QF_ISR_ENTRY} ..............................................
        -:  564:#define QS_QF_ISR_ENTRY(isrnest_, prio_) \
        -:  565:    (QP::QS::isr_entry_pre_((isrnest_), (prio_)))
        -:  566:
        -:  567://${QS-macros::QS_QF_ISR_EXIT} ...............................................
        -:  568:#define QS_QF_ISR_EXIT(isrnest_, prio_) \
        -:  569:    (QP::QS::isr_exit_pre_((isrnest_), (prio_)))
        -:  570:
        -:  571://${QS-macros::QS_ONLY} ......................................................
        -:  572:#define QS_ONLY(code_) (code_)
        -:  573:
        -:  574://${QS-macros::QS_ASSERTION} .................................................
        -:  575:#define QS_ASSERTION(module_, id_, delay_) \
        -:  576:    (QP::QS::assertion_pre_((module_), (id_), (delay_)))
        -:  577:
        -:  578://${QS-macros::QS_EOD} .......................................................
        -:  579:#define QS_EOD (static_cast<std::uint16_t>(0xFFFFU))
        -:  580:
        -:  581://${QS-macros::QS_CMD} .......................................................
        -:  582:#define QS_CMD (static_cast<std::uint8_t>(7U))
        -:  583:
        -:  584://${QS-macros::QS_HEX_FMT} ...................................................
        -:  585:#define QS_HEX_FMT (static_cast<std::uint8_t>(0x0FU))
        -:  586:
        -:  587://${QS-macros::QS_CRIT_STAT} .................................................
        -:  588:#ifndef QS_CRIT_STAT
        -:  589:#define QS_CRIT_STAT QF_CRIT_STAT
        -:  590:#endif // ndef QS_CRIT_STAT
        -:  591:
        -:  592://${QS-macros::QS_CRIT_ENTRY} ................................................
        -:  593:#ifndef QS_CRIT_ENTRY
        -:  594:#define QS_CRIT_ENTRY() QF_CRIT_ENTRY()
        -:  595:#endif // ndef QS_CRIT_ENTRY
        -:  596:
        -:  597://${QS-macros::QS_CRIT_EXIT} .................................................
        -:  598:#ifndef QS_CRIT_EXIT
        -:  599:#define QS_CRIT_EXIT() QF_CRIT_EXIT()
        -:  600:#endif // ndef QS_CRIT_EXIT
        -:  601:
        -:  602://${QS-macros::QS_MEM_SYS} ...................................................
        -:  603:#ifndef QS_MEM_SYS
        -:  604:#define QS_MEM_SYS() QF_MEM_SYS()
        -:  605:#endif // ndef QS_MEM_SYS
        -:  606:
        -:  607://${QS-macros::QS_MEM_APP} ...................................................
        -:  608:#ifndef QS_MEM_APP
        -:  609:#define QS_MEM_APP() QF_MEM_APP()
        -:  610:#endif // ndef QS_MEM_APP
        -:  611://$enddecl${QS-macros} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        -:  612:
        -:  613://============================================================================
        -:  614://! @cond INTERNAL
        -:  615:
        -:  616:namespace QP {
        -:  617:namespace QS {
        -:  618:
        -:  619:struct Attr {
        -:  620:    void const * locFilter_AP; //!< @deprecated
        -:  621:    std::uint8_t * buf;
        -:  622:    QSCtr end;
        -:  623:    QSCtr volatile head;
        -:  624:    QSCtr volatile tail;
        -:  625:    QSCtr volatile used;
        -:  626:    std::uint8_t volatile seq;
        -:  627:    std::uint8_t volatile chksum;
        -:  628:    std::uint8_t volatile critNest;
        -:  629:    std::uint8_t flags;
        -:  630:};
        -:  631:
        -:  632:extern Attr priv_;
        -:  633:
        -:  634:void glbFilter_(std::int_fast16_t const filter) noexcept;
        -:  635:void locFilter_(std::int_fast16_t const filter) noexcept;
        -:  636:
        -:  637:void beginRec_(std::uint_fast8_t const rec) noexcept;
        -:  638:void endRec_() noexcept;
        -:  639:
        -:  640:void u8_raw_(std::uint8_t const d) noexcept;
        -:  641:void u8u8_raw_(std::uint8_t const d1, std::uint8_t const d2) noexcept;
        -:  642:void u16_raw_(std::uint16_t d) noexcept;
        -:  643:void u32_raw_(std::uint32_t d) noexcept;
        -:  644:void u64_raw_(std::uint64_t d) noexcept;
        -:  645:void obj_raw_(void const * const obj) noexcept;
        -:  646:void str_raw_(char const * s) noexcept;
        -:  647:
        -:  648:void u8_fmt_(std::uint8_t const format, std::uint8_t const d) noexcept;
        -:  649:void u16_fmt_(std::uint8_t format, std::uint16_t d) noexcept;
        -:  650:void u32_fmt_(std::uint8_t format,
        -:  651:    std::uint32_t d) noexcept;
        -:  652:void u64_fmt_(std::uint8_t format, std::uint64_t d) noexcept;
        -:  653:void f32_fmt_(std::uint8_t format, float32_t f) noexcept;
        -:  654:void f64_fmt_(std::uint8_t format, float64_t d) noexcept;
        -:  655:void str_fmt_(char const * s) noexcept;
        -:  656:void mem_fmt_(std::uint8_t const * blk, std::uint8_t size) noexcept;
        -:  657:
        -:  658:void sig_dict_pre_(QSignal const sig, void const * const obj,
        -:  659:    char const * const name) noexcept;
        -:  660:void obj_dict_pre_(void const * const obj,
        -:  661:    char const * const name) noexcept;
        -:  662:void obj_arr_dict_pre_(void const * const obj,
        -:  663:    std::uint_fast16_t const idx,
        -:  664:    char const * const name) noexcept;
        -:  665:void fun_dict_pre_(QSpyFunPtr fun,
        -:  666:    char const * const name) noexcept;
        -:  667:void usr_dict_pre_(enum_t const rec, char const * const name) noexcept;
        -:  668:void enum_dict_pre_(enum_t const value, std::uint8_t const group,
        -:  669:    char const * const name) noexcept;
        -:  670:
        -:  671:void assertion_pre_(char const * const module, int_t const id,
        -:  672:    std::uint32_t const delay) noexcept;
        -:  673:void crit_entry_pre_() noexcept;
        -:  674:void crit_exit_pre_() noexcept;
        -:  675:void isr_entry_pre_(std::uint8_t const isrnest,
        -:  676:    std::uint8_t const prio) noexcept;
        -:  677:void isr_exit_pre_(std::uint8_t const isrnest,
        -:  678:    std::uint8_t const prio) noexcept;
        -:  679:
        -:  680:void target_info_pre_(std::uint8_t const isReset);
        -:  681:
        -:  682:} // namespace QS
        -:  683:} // namespace QP
        -:  684:
        -:  685://! @endcond
        -:  686://============================================================================
        -:  687:
        -:  688://$declare${QS::QS-TX} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
        -:  689:namespace QP {
        -:  690:namespace QS {
        -:  691:
        -:  692://${QS::QS-TX::preType} ......................................................
        -:  693://! Enumerates data elements for app-specific trace records
        -:  694:enum preType : std::uint8_t {
        -:  695:    I8_ENUM_T, //!< signed 8-bit integer or enum format
        -:  696:    U8_T,      //!< unsigned 8-bit integer format
        -:  697:    I16_T,     //!< signed 16-bit integer format
        -:  698:    U16_T,     //!< unsigned 16-bit integer format
        -:  699:    I32_T,     //!< signed 32-bit integer format
        -:  700:    U32_T,     //!< unsigned 32-bit integer format
        -:  701:    F32_T,     //!< 32-bit floating point format
        -:  702:    F64_T,     //!< 64-bit floating point format
        -:  703:    STR_T,     //!< zero-terminated ASCII string format
        -:  704:    MEM_T,     //!< up to 255-bytes memory block format
        -:  705:    SIG_T,     //!< event signal format
        -:  706:    OBJ_T,     //!< object pointer format
        -:  707:    FUN_T,     //!< function pointer format
        -:  708:    I64_T,     //!< signed 64-bit integer format
        -:  709:    U64_T      //!< unsigned 64-bit integer format
        -:  710:};
        -:  711:
        -:  712://${QS::QS-TX::force_cast} ...................................................
        -:  713:template<typename T_OUT, typename T_IN>
        6:  714:inline T_OUT force_cast(T_IN in) {
        -:  715:    union TCast {
        -:  716:        T_IN  in;
        -:  717:        T_OUT out;
        -:  718:    } u = { in };
        -:  719:    return u.out;
        -:  720:}
        -:  721:
        -:  722://${QS::QS-TX::initBuf} ......................................................
        -:  723:void initBuf(
        -:  724:    std::uint8_t * const sto,
        -:  725:    std::uint_fast32_t const stoSize) noexcept;
        -:  726:
        -:  727://${QS::QS-TX::getByte} ......................................................
        -:  728:std::uint16_t getByte() noexcept;
        -:  729:
        -:  730://${QS::QS-TX::getBlock} .....................................................
        -:  731:std::uint8_t const * getBlock(std::uint16_t * const pNbytes) noexcept;
        -:  732:
        -:  733://${QS::QS-TX::doOutput} .....................................................
        -:  734:void doOutput();
        -:  735:
        -:  736://${QS::QS-TX::onStartup} ....................................................
        -:  737:bool onStartup(void const * arg);
        -:  738:
        -:  739://${QS::QS-TX::onCleanup} ....................................................
        -:  740:void onCleanup();
        -:  741:
        -:  742://${QS::QS-TX::onFlush} ......................................................
        -:  743:void onFlush();
        -:  744:
        -:  745://${QS::QS-TX::onGetTime} ....................................................
        -:  746:QSTimeCtr onGetTime();
        -:  747:
        -:  748:} // namespace QS
        -:  749:} // namespace QP
        -:  750://$enddecl${QS::QS-TX} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        -:  751:
        -:  752://============================================================================
        -:  753:#ifdef Q_UTEST
        -:  754:
        -:  755://$declare${QS::QUTest} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
        -:  756:namespace QP {
        -:  757:namespace QS {
        -:  758:
        -:  759://${QS::QUTest::TProbe} ......................................................
        -:  760:struct TProbe {
        -:  761:    QSFun addr;
        -:  762:    std::uint32_t data;
        -:  763:    std::uint8_t  idx;
        -:  764:};
        -:  765:
        -:  766://${QS::QUTest::onTestSetup} .................................................
        -:  767:void onTestSetup();
        -:  768:
        -:  769://${QS::QUTest::onTestTeardown} ..............................................
        -:  770:void onTestTeardown();
        -:  771:
        -:  772://${QS::QUTest::onTestEvt} ...................................................
        -:  773:void onTestEvt(QEvt * e);
        -:  774:
        -:  775://${QS::QUTest::onTestPost} ..................................................
        -:  776:void onTestPost(
        -:  777:    void const * sender,
        -:  778:    QActive * recipient,
        -:  779:    QEvt const * e,
        -:  780:    bool status);
        -:  781:
        -:  782://${QS::QUTest::onTestLoop} ..................................................
        -:  783:void onTestLoop();
        -:  784:
        -:  785:} // namespace QS
        -:  786:} // namespace QP
        -:  787://$enddecl${QS::QUTest} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        -:  788:
        -:  789:#define QUTEST_ON_POST 124
        -:  790:
        -:  791://============================================================================
        -:  792://! @cond INTERNAL
        -:  793:
        -:  794:namespace QP {
        -:  795:namespace QS {
        -:  796:
        -:  797:struct TestAttr {
        -:  798:    TProbe tpBuf[16];
        -:  799:    std::uint8_t tpNum;
        -:  800:    QSTimeCtr testTime;
        -:  801:    QPSet readySet;
        -:  802:    QPSet readySet_dis;
        -:  803:    std::uint_fast8_t intLock;
        -:  804:};
        -:  805:
        -:  806:extern TestAttr tstPriv_;
        -:  807:
        -:  808:void test_pause_();
        -:  809:std::uint32_t getTestProbe_(QSpyFunPtr const api) noexcept;
        -:  810:
        -:  811:} // namespace QS
        -:  812:} // namespace QP
        -:  813:
        -:  814://! @endcond
        -:  815://============================================================================
        -:  816:
        -:  817:// QP-stub for QUTest
        -:  818:// NOTE: The QP-stub is needed for unit testing QP applications,
        -:  819:// but might NOT be needed for testing QP itself.
        -:  820:#if (Q_UTEST != 0)
        -:  821:
        -:  822://$declare${QS::QUTest-stub::QHsmDummy} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
        -:  823:namespace QP {
        -:  824:
        -:  825://${QS::QUTest-stub::QHsmDummy} ..............................................
        -:  826:class QHsmDummy : public QP::QAsm {
        -:  827:public:
        -:  828:    QHsmDummy();
        -:  829:    void init(
        -:  830:        void const * const e,
        -:  831:        std::uint_fast8_t const qsId) override;
        -:  832:    void dispatch(
        -:  833:        QEvt const * const e,
        -:  834:        std::uint_fast8_t const qsId) override;
        -:  835:}; // class QHsmDummy
        -:  836:
        -:  837:} // namespace QP
        -:  838://$enddecl${QS::QUTest-stub::QHsmDummy} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        -:  839://$declare${QS::QUTest-stub::QActiveDummy} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
        -:  840:namespace QP {
        -:  841:
        -:  842://${QS::QUTest-stub::QActiveDummy} ...........................................
        -:  843:class QActiveDummy : public QP::QActive {
        -:  844:private:
        -:  845:    friend class QActive;
        -:  846:
        -:  847:public:
        -:  848:    QActiveDummy();
        -:  849:    void init(
        -:  850:        void const * const e,
        -:  851:        std::uint_fast8_t const qsId) override;
        -:  852:    void dispatch(
        -:  853:        QEvt const * const e,
        -:  854:        std::uint_fast8_t const qsId) override;
        -:  855:
        -:  856:private:
        -:  857:    bool fakePost(
        -:  858:        QEvt const * const e,
        -:  859:        std::uint_fast16_t const margin,
        -:  860:        void const * const sender) noexcept;
        -:  861:    void fakePostLIFO(QEvt const * const e) noexcept;
        -:  862:}; // class QActiveDummy
        -:  863:
        -:  864:} // namespace QP
        -:  865://$enddecl${QS::QUTest-stub::QActiveDummy} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        -:  866:
        -:  867:#endif // Q_UTEST != 0
        -:  868:
        -:  869:#define QS_TEST_PROBE_DEF(fun_) \
        -:  870:    std::uint32_t const qs_tp_ = \
        -:  871:        QP::QS::getTestProbe_(QP::QS::force_cast<void (*)()>(fun_));
        -:  872:
        -:  873:#define QS_TEST_PROBE(code_) \
        -:  874:    if (qs_tp_ != 0U) { code_ }
        -:  875:
        -:  876:#define QS_TEST_PROBE_ID(id_, code_) \
        -:  877:    if (qs_tp_ == static_cast<std::uint32_t>(id_)) { code_ }
        -:  878:
        -:  879:#define QS_TEST_PAUSE()  (QP::QS::test_pause_())
        -:  880:
        -:  881:#else // Q_UTEST not defined
        -:  882:
        -:  883:// dummy definitions when not building for QUTEST
        -:  884:#define QS_TEST_PROBE_DEF(fun_)
        -:  885:#define QS_TEST_PROBE(code_)
        -:  886:#define QS_TEST_PROBE_ID(id_, code_)
        -:  887:#define QS_TEST_PAUSE()  (static_cast<void>(0))
        -:  888:
        -:  889:#endif // Q_UTEST
        -:  890:
        -:  891://============================================================================
        -:  892://! @cond INTERNAL
        -:  893:
        -:  894:namespace QP {
        -:  895:namespace QS {
        -:  896:
        -:  897://............................................................................
        -:  898:struct CmdVar {
        -:  899:    std::uint32_t param1;
        -:  900:    std::uint32_t param2;
        -:  901:    std::uint32_t param3;
        -:  902:    std::uint8_t  idx;
        -:  903:    std::uint8_t  cmdId;
        -:  904:};
        -:  905:
        -:  906:struct TickVar {
        -:  907:    std::uint_fast8_t rate;
        -:  908:};
        -:  909:
        -:  910:struct PeekVar {
        -:  911:    std::uint16_t offs;
        -:  912:    std::uint8_t  size;
        -:  913:    std::uint8_t  num;
        -:  914:    std::uint8_t  idx;
        -:  915:};
        -:  916:
        -:  917:struct PokeVar {
        -:  918:    std::uint32_t data;
        -:  919:    std::uint16_t offs;
        -:  920:    std::uint8_t  size;
        -:  921:    std::uint8_t  num;
        -:  922:    std::uint8_t  idx;
        -:  923:    std::uint8_t  fill;
        -:  924:};
        -:  925:
        -:  926:struct FltVar {
        -:  927:    std::uint8_t data[16];
        -:  928:    std::uint8_t idx;
        -:  929:    std::uint8_t recId; // global/local
        -:  930:};
        -:  931:
        -:  932:struct ObjVar {
        -:  933:    QSObj   addr;
        -:  934:    std::uint8_t idx;
        -:  935:    std::uint8_t kind; // see qs.hpp, enum QSpyObjKind
        -:  936:    std::uint8_t recId;
        -:  937:};
        -:  938:
        -:  939:struct EvtVar {
        -:  940:    QP::QEvt     *e;
        -:  941:    std::uint8_t *p;
        -:  942:    QP::QSignal   sig;
        -:  943:    std::uint16_t len;
        -:  944:    std::uint8_t  prio;
        -:  945:    std::uint8_t  idx;
        -:  946:};
        -:  947:
        -:  948:struct RxAttr {
        -:  949:    void * currObj[8];
        -:  950:    std::uint8_t * buf;
        -:  951:    QSCtr  end;
        -:  952:    QSCtr volatile head;
        -:  953:    QSCtr volatile tail;
        -:  954:    std::uint8_t state;
        -:  955:    std::uint8_t esc;
        -:  956:    std::uint8_t seq;
        -:  957:    std::uint8_t chksum;
        -:  958:#ifdef Q_UTEST
        -:  959:    bool inTestLoop;
        -:  960:#endif
        -:  961:    union Variant {
        -:  962:        CmdVar   cmd;
        -:  963:        TickVar  tick;
        -:  964:        PeekVar  peek;
        -:  965:        PokeVar  poke;
        -:  966:        FltVar   flt;
        -:  967:        ObjVar   obj;
        -:  968:        EvtVar   evt;
        -:  969:#ifdef Q_UTEST
        -:  970:        QP::QS::TProbe tp;
        -:  971:#endif // Q_UTEST
        -:  972:    } var;
        -:  973:} ;
        -:  974:
        -:  975:extern RxAttr rxPriv_;
        -:  976:
        -:  977:} // namespace QS
        -:  978:} // namespace QP
        -:  979:
        -:  980://! @endcond
        -:  981://============================================================================
        -:  982:
        -:  983://$declare${QS::QS-RX} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
        -:  984:namespace QP {
        -:  985:namespace QS {
        -:  986:
        -:  987://${QS::QS-RX::QSpyObjKind} ..................................................
        -:  988://! Kinds of objects used QS-RX
        -:  989:enum QSpyObjKind : std::uint8_t {
        -:  990:    SM_OBJ,    //!< state machine object
        -:  991:    AO_OBJ,    //!< active object
        -:  992:    MP_OBJ,    //!< event pool object
        -:  993:    EQ_OBJ,    //!< raw queue object
        -:  994:    TE_OBJ,    //!< time event object
        -:  995:    AP_OBJ,    //!< generic Application-specific object
        -:  996:    MAX_OBJ
        -:  997:};
        -:  998:
        -:  999://${QS::QS-RX::OSpyObjCombnation} ............................................
        -: 1000://! Object combinations for QS-RX
        -: 1001:enum OSpyObjCombnation : std::uint8_t {
        -: 1002:    SM_AO_OBJ = MAX_OBJ //!< combination of SM and AO
        -: 1003:};
        -: 1004:
        -: 1005://${QS::QS-RX::rxInitBuf} ....................................................
        -: 1006:void rxInitBuf(
        -: 1007:    std::uint8_t * const sto,
        -: 1008:    std::uint16_t const stoSize) noexcept;
        -: 1009:
        -: 1010://${QS::QS-RX::rxPut} ........................................................
        -: 1011:inline bool rxPut(std::uint8_t const b) noexcept {
        -: 1012:    // NOTE: does not need critical section
        -: 1013:    // But requires system-level memory access (QF_MEM_SYS()).
        -: 1014:
        -: 1015:    QSCtr head = rxPriv_.head + 1U;
        -: 1016:    if (head == rxPriv_.end) {
        -: 1017:        head = 0U;
        -: 1018:    }
        -: 1019:    if (head != rxPriv_.tail) { // buffer NOT full?
        -: 1020:        rxPriv_.buf[rxPriv_.head] = b;
        -: 1021:        rxPriv_.head = head;
        -: 1022:        return true;  // byte placed in the buffer
        -: 1023:    }
        -: 1024:    else {
        -: 1025:        return false; // byte NOT placed in the buffer
        -: 1026:    }
        -: 1027:}
        -: 1028:
        -: 1029://${QS::QS-RX::rxParse} ......................................................
        -: 1030:void rxParse();
        -: 1031:
        -: 1032://${QS::QS-RX::setCurrObj} ...................................................
        -: 1033:void setCurrObj(
        -: 1034:    std::uint8_t const obj_kind,
        -: 1035:    void * const obj_ptr);
        -: 1036:
        -: 1037://${QS::QS-RX::rxGetNfree} ...................................................
        -: 1038:std::uint16_t rxGetNfree() noexcept;
        -: 1039:
        -: 1040://${QS::QS-RX::doInput} ......................................................
        -: 1041:void doInput();
        -: 1042:
        -: 1043://${QS::QS-RX::onReset} ......................................................
        -: 1044:void onReset();
        -: 1045:
        -: 1046://${QS::QS-RX::onCommand} ....................................................
        -: 1047:void onCommand(
        -: 1048:    std::uint8_t cmdId,
        -: 1049:    std::uint32_t param1,
        -: 1050:    std::uint32_t param2,
        -: 1051:    std::uint32_t param3);
        -: 1052:
        -: 1053:} // namespace QS
        -: 1054:} // namespace QP
        -: 1055://$enddecl${QS::QS-RX} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        -: 1056:
        -: 1057:#endif // QS_HPP_
