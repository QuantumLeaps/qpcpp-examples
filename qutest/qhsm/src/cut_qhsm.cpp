//$file${.::cut_qhsm.cpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: qhsm.qm
// File:  ${.::cut_qhsm.cpp}
//
// This code has been generated by QM 6.2.2 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
//                    Q u a n t u m  L e a P s
//                    ------------------------
//                    Modern Embedded Software
//
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This generated code is open source software: you can redistribute it under
// the terms of the GNU General Public License as published by the Free
// Software Foundation.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
// more details.
//
// NOTE:
// Please contact Quantum Leaps for commercial licensing options, which
// expressly supersede the GNU General Public License and are specifically
// designed for licensees interested in retaining the proprietary status
// of the generated code.
//
// Contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${.::cut_qhsm.cpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#include "qpcpp.hpp"      // QP/C++ framework
#include "cut_qhsm.hpp"   // Code Under Test (CUT)

namespace {
Q_DEFINE_THIS_FILE
}

namespace APP {

//$declare${SMs::QHsmTst} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${SMs::QHsmTst} ............................................................
class QHsmTst : public QP::QHsm {
private:
    bool m_foo;

public:
    friend bool QHsmTst_isIn(std::uint32_t const state_num);

public:
    QHsmTst()
      : QHsm(&initial)
    {}

protected:
    Q_STATE_DECL(initial);
    Q_STATE_DECL(s);
    Q_STATE_DECL(s1);
    Q_STATE_DECL(s11);
    Q_STATE_DECL(s111);
    Q_STATE_DECL(s112);
    Q_STATE_DECL(s12);
    Q_STATE_DECL(s2);
    Q_STATE_DECL(s21);
    Q_STATE_DECL(s211);
    Q_STATE_DECL(s212);
    Q_STATE_DECL(s22);
    Q_STATE_DECL(t);

protected:
    QP::QStateHandler hist_s;
    QP::QStateHandler hist_s1;
    QP::QStateHandler hist_s2;
}; // class QHsmTst
//$enddecl${SMs::QHsmTst} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

static QHsmTst l_hsmtst; // the only instance of the QHsmTst class

// global-scope definitions -----------------------------------------
QP::QAsm * const the_sm = &l_hsmtst; // the opaque pointer

//$skip${QP_VERSION} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
// Check for the minimum required QP version
#if (QP_VERSION < 730U) || (QP_VERSION != ((QP_RELEASE^4294967295U)%0x2710U))
#error qpcpp version 7.3.0 or higher required
#endif
//$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$define${SMs::QHsmTst} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${SMs::QHsmTst} ............................................................

//${SMs::QHsmTst::SM} ........................................................
Q_STATE_DEF(QHsmTst, initial) {
    //${SMs::QHsmTst::SM::initial}
    m_foo = 0U;
    BSP_display("top-INIT;");

    QS_SIG_DICTIONARY(A_SIG, nullptr);
    QS_SIG_DICTIONARY(B_SIG, nullptr);
    QS_SIG_DICTIONARY(C_SIG, nullptr);
    QS_SIG_DICTIONARY(D_SIG, nullptr);
    QS_SIG_DICTIONARY(E_SIG, nullptr);
    QS_SIG_DICTIONARY(F_SIG, nullptr);
    QS_SIG_DICTIONARY(G_SIG, nullptr);
    QS_SIG_DICTIONARY(H_SIG, nullptr);
    QS_SIG_DICTIONARY(I_SIG, nullptr);
    // state history attributes
    hist_s = &s1;
    hist_s1 = &s111;
    hist_s2 = &s211;

    QS_FUN_DICTIONARY(&QHsmTst::s);
    QS_FUN_DICTIONARY(&QHsmTst::s1);
    QS_FUN_DICTIONARY(&QHsmTst::s11);
    QS_FUN_DICTIONARY(&QHsmTst::s111);
    QS_FUN_DICTIONARY(&QHsmTst::s112);
    QS_FUN_DICTIONARY(&QHsmTst::s12);
    QS_FUN_DICTIONARY(&QHsmTst::s2);
    QS_FUN_DICTIONARY(&QHsmTst::s21);
    QS_FUN_DICTIONARY(&QHsmTst::s211);
    QS_FUN_DICTIONARY(&QHsmTst::s212);
    QS_FUN_DICTIONARY(&QHsmTst::s22);
    QS_FUN_DICTIONARY(&QHsmTst::t);

    return tran(&s2);
}

//${SMs::QHsmTst::SM::s} .....................................................
Q_STATE_DEF(QHsmTst, s) {
    QP::QState status_;
    switch (e->sig) {
        //${SMs::QHsmTst::SM::s}
        case Q_ENTRY_SIG: {
            BSP_display("s-ENTRY;");
            status_ = Q_RET_HANDLED;
            break;
        }
        //${SMs::QHsmTst::SM::s}
        case Q_EXIT_SIG: {
            BSP_display("s-EXIT;");
            // save shallow history
            hist_s = childState(&s);
            status_ = Q_RET_HANDLED;
            break;
        }
        //${SMs::QHsmTst::SM::s::initial}
        case Q_INIT_SIG: {
            BSP_display("s-INIT;");
            status_ = tran(&s1);
            break;
        }
        //${SMs::QHsmTst::SM::s::E}
        case E_SIG: {
            BSP_display("s-E;");
            status_ = tran(&s11);
            break;
        }
        //${SMs::QHsmTst::SM::s::I}
        case I_SIG: {
            BSP_display("s-I;");
            status_ = Q_RET_HANDLED;
            break;
        }
        //${SMs::QHsmTst::SM::s::C}
        case C_SIG: {
            BSP_display("s-C;");
            status_ = tran(&t);
            break;
        }
        default: {
            status_ = super(&top);
            break;
        }
    }
    return status_;
}

//${SMs::QHsmTst::SM::s::s1} .................................................
Q_STATE_DEF(QHsmTst, s1) {
    QP::QState status_;
    switch (e->sig) {
        //${SMs::QHsmTst::SM::s::s1}
        case Q_ENTRY_SIG: {
            BSP_display("s1-ENTRY;");
            status_ = Q_RET_HANDLED;
            break;
        }
        //${SMs::QHsmTst::SM::s::s1}
        case Q_EXIT_SIG: {
            BSP_display("s1-EXIT;");
            // save deep history
            hist_s1 = state();
            status_ = Q_RET_HANDLED;
            break;
        }
        //${SMs::QHsmTst::SM::s::s1::initial}
        case Q_INIT_SIG: {
            BSP_display("s1-INIT;");
            status_ = tran(&s111);
            break;
        }
        //${SMs::QHsmTst::SM::s::s1::E}
        case E_SIG: {
            BSP_display("s1-E;");
            status_ = tran(&s12);
            break;
        }
        //${SMs::QHsmTst::SM::s::s1::F}
        case F_SIG: {
            BSP_display("s1-F;");
            status_ = tran(&s21);
            break;
        }
        //${SMs::QHsmTst::SM::s::s1::I}
        case I_SIG: {
            //${SMs::QHsmTst::SM::s::s1::I::[m_foo]}
            if (m_foo) {
                m_foo = 0U;
                BSP_display("s1-I;");
                status_ = Q_RET_HANDLED;
            }
            else {
                status_ = Q_RET_UNHANDLED;
            }
            break;
        }
        default: {
            status_ = super(&s);
            break;
        }
    }
    return status_;
}

//${SMs::QHsmTst::SM::s::s1::s11} ............................................
Q_STATE_DEF(QHsmTst, s11) {
    QP::QState status_;
    switch (e->sig) {
        //${SMs::QHsmTst::SM::s::s1::s11}
        case Q_ENTRY_SIG: {
            BSP_display("s11-ENTRY;");
            status_ = Q_RET_HANDLED;
            break;
        }
        //${SMs::QHsmTst::SM::s::s1::s11}
        case Q_EXIT_SIG: {
            BSP_display("s11-EXIT;");
            status_ = Q_RET_HANDLED;
            break;
        }
        //${SMs::QHsmTst::SM::s::s1::s11::initial}
        case Q_INIT_SIG: {
            BSP_display("s11-INIT;");
            status_ = tran(&s111);
            break;
        }
        //${SMs::QHsmTst::SM::s::s1::s11::A}
        case A_SIG: {
            BSP_display("s11-A;");
            status_ = tran(&s11);
            break;
        }
        //${SMs::QHsmTst::SM::s::s1::s11::B}
        case B_SIG: {
            BSP_display("s11-B;");
            status_ = tran(&s111);
            break;
        }
        //${SMs::QHsmTst::SM::s::s1::s11::D}
        case D_SIG: {
            //${SMs::QHsmTst::SM::s::s1::s11::D::[!m_foo]}
            if (!m_foo) {
                m_foo = 1U;
                BSP_display("s11-D;");
                status_ = tran(&s1);
            }
            else {
                status_ = Q_RET_UNHANDLED;
            }
            break;
        }
        //${SMs::QHsmTst::SM::s::s1::s11::G}
        case G_SIG: {
            BSP_display("s11-G->H*-s2;");
            status_ = tran_hist(hist_s2);
            break;
        }
        default: {
            status_ = super(&s1);
            break;
        }
    }
    return status_;
}

//${SMs::QHsmTst::SM::s::s1::s11::s111} ......................................
Q_STATE_DEF(QHsmTst, s111) {
    QP::QState status_;
    switch (e->sig) {
        //${SMs::QHsmTst::SM::s::s1::s11::s111}
        case Q_ENTRY_SIG: {
            BSP_display("s111-ENTRY;");
            status_ = Q_RET_HANDLED;
            break;
        }
        //${SMs::QHsmTst::SM::s::s1::s11::s111}
        case Q_EXIT_SIG: {
            BSP_display("s111-EXIT;");
            status_ = Q_RET_HANDLED;
            break;
        }
        //${SMs::QHsmTst::SM::s::s1::s11::s111::C}
        case C_SIG: {
            BSP_display("s111-C;");
            status_ = tran(&s112);
            break;
        }
        default: {
            status_ = super(&s11);
            break;
        }
    }
    return status_;
}

//${SMs::QHsmTst::SM::s::s1::s11::s112} ......................................
Q_STATE_DEF(QHsmTst, s112) {
    QP::QState status_;
    switch (e->sig) {
        //${SMs::QHsmTst::SM::s::s1::s11::s112}
        case Q_ENTRY_SIG: {
            BSP_display("s112-ENTRY;");
            status_ = Q_RET_HANDLED;
            break;
        }
        //${SMs::QHsmTst::SM::s::s1::s11::s112}
        case Q_EXIT_SIG: {
            BSP_display("s112-EXIT;");
            status_ = Q_RET_HANDLED;
            break;
        }
        //${SMs::QHsmTst::SM::s::s1::s11::s112::H}
        case H_SIG: {
            BSP_display("s112-H;");
            status_ = tran(&s);
            break;
        }
        default: {
            status_ = super(&s11);
            break;
        }
    }
    return status_;
}

//${SMs::QHsmTst::SM::s::s1::s12} ............................................
Q_STATE_DEF(QHsmTst, s12) {
    QP::QState status_;
    switch (e->sig) {
        //${SMs::QHsmTst::SM::s::s1::s12}
        case Q_ENTRY_SIG: {
            BSP_display("s12-ENTRY;");
            status_ = Q_RET_HANDLED;
            break;
        }
        //${SMs::QHsmTst::SM::s::s1::s12}
        case Q_EXIT_SIG: {
            BSP_display("s12-EXIT;");
            status_ = Q_RET_HANDLED;
            break;
        }
        default: {
            status_ = super(&s1);
            break;
        }
    }
    return status_;
}

//${SMs::QHsmTst::SM::s::s2} .................................................
Q_STATE_DEF(QHsmTst, s2) {
    QP::QState status_;
    switch (e->sig) {
        //${SMs::QHsmTst::SM::s::s2}
        case Q_ENTRY_SIG: {
            BSP_display("s2-ENTRY;");
            status_ = Q_RET_HANDLED;
            break;
        }
        //${SMs::QHsmTst::SM::s::s2}
        case Q_EXIT_SIG: {
            BSP_display("s2-EXIT;");
            // save deep history
            hist_s2 = state();
            status_ = Q_RET_HANDLED;
            break;
        }
        //${SMs::QHsmTst::SM::s::s2::initial}
        case Q_INIT_SIG: {
            BSP_display("s2-INIT;");
            status_ = tran(&s211);
            break;
        }
        //${SMs::QHsmTst::SM::s::s2::E}
        case E_SIG: {
            BSP_display("s2-E;");
            status_ = tran(&s22);
            break;
        }
        //${SMs::QHsmTst::SM::s::s2::F}
        case F_SIG: {
            BSP_display("s2-F;");
            status_ = tran(&s11);
            break;
        }
        //${SMs::QHsmTst::SM::s::s2::I}
        case I_SIG: {
            //${SMs::QHsmTst::SM::s::s2::I::[m_foo]}
            if (m_foo) {
                m_foo = 0U;
                BSP_display("s2-I;");
                status_ = Q_RET_HANDLED;
            }
            else {
                status_ = Q_RET_UNHANDLED;
            }
            break;
        }
        default: {
            status_ = super(&s);
            break;
        }
    }
    return status_;
}

//${SMs::QHsmTst::SM::s::s2::s21} ............................................
Q_STATE_DEF(QHsmTst, s21) {
    QP::QState status_;
    switch (e->sig) {
        //${SMs::QHsmTst::SM::s::s2::s21}
        case Q_ENTRY_SIG: {
            BSP_display("s21-ENTRY;");
            status_ = Q_RET_HANDLED;
            break;
        }
        //${SMs::QHsmTst::SM::s::s2::s21}
        case Q_EXIT_SIG: {
            BSP_display("s21-EXIT;");
            status_ = Q_RET_HANDLED;
            break;
        }
        //${SMs::QHsmTst::SM::s::s2::s21::initial}
        case Q_INIT_SIG: {
            BSP_display("s21-INIT;");
            status_ = tran(&s211);
            break;
        }
        //${SMs::QHsmTst::SM::s::s2::s21::A}
        case A_SIG: {
            BSP_display("s21-A;");
            status_ = tran(&s21);
            break;
        }
        //${SMs::QHsmTst::SM::s::s2::s21::B}
        case B_SIG: {
            BSP_display("s21-B;");
            status_ = tran(&s211);
            break;
        }
        //${SMs::QHsmTst::SM::s::s2::s21::D}
        case D_SIG: {
            //${SMs::QHsmTst::SM::s::s2::s21::D::[!m_foo]}
            if (!m_foo) {
                m_foo = 1U;
                BSP_display("s21-D;");
                status_ = tran(&s2);
            }
            else {
                status_ = Q_RET_UNHANDLED;
            }
            break;
        }
        //${SMs::QHsmTst::SM::s::s2::s21::G}
        case G_SIG: {
            BSP_display("s21-G->H*-s1;");
            status_ = tran_hist(hist_s1);
            break;
        }
        default: {
            status_ = super(&s2);
            break;
        }
    }
    return status_;
}

//${SMs::QHsmTst::SM::s::s2::s21::s211} ......................................
Q_STATE_DEF(QHsmTst, s211) {
    QP::QState status_;
    switch (e->sig) {
        //${SMs::QHsmTst::SM::s::s2::s21::s211}
        case Q_ENTRY_SIG: {
            BSP_display("s211-ENTRY;");
            status_ = Q_RET_HANDLED;
            break;
        }
        //${SMs::QHsmTst::SM::s::s2::s21::s211}
        case Q_EXIT_SIG: {
            BSP_display("s211-EXIT;");
            status_ = Q_RET_HANDLED;
            break;
        }
        //${SMs::QHsmTst::SM::s::s2::s21::s211::C}
        case C_SIG: {
            BSP_display("s211-C;");
            status_ = tran(&s212);
            break;
        }
        default: {
            status_ = super(&s21);
            break;
        }
    }
    return status_;
}

//${SMs::QHsmTst::SM::s::s2::s21::s212} ......................................
Q_STATE_DEF(QHsmTst, s212) {
    QP::QState status_;
    switch (e->sig) {
        //${SMs::QHsmTst::SM::s::s2::s21::s212}
        case Q_ENTRY_SIG: {
            BSP_display("s212-ENTRY;");
            status_ = Q_RET_HANDLED;
            break;
        }
        //${SMs::QHsmTst::SM::s::s2::s21::s212}
        case Q_EXIT_SIG: {
            BSP_display("s212-EXIT;");
            status_ = Q_RET_HANDLED;
            break;
        }
        //${SMs::QHsmTst::SM::s::s2::s21::s212::H}
        case H_SIG: {
            BSP_display("s212-H;");
            status_ = tran(&s);
            break;
        }
        default: {
            status_ = super(&s21);
            break;
        }
    }
    return status_;
}

//${SMs::QHsmTst::SM::s::s2::s22} ............................................
Q_STATE_DEF(QHsmTst, s22) {
    QP::QState status_;
    switch (e->sig) {
        //${SMs::QHsmTst::SM::s::s2::s22}
        case Q_ENTRY_SIG: {
            BSP_display("s22-ENTRY;");
            status_ = Q_RET_HANDLED;
            break;
        }
        //${SMs::QHsmTst::SM::s::s2::s22}
        case Q_EXIT_SIG: {
            BSP_display("s22-EXIT;");
            status_ = Q_RET_HANDLED;
            break;
        }
        default: {
            status_ = super(&s2);
            break;
        }
    }
    return status_;
}

//${SMs::QHsmTst::SM::t} .....................................................
Q_STATE_DEF(QHsmTst, t) {
    QP::QState status_;
    switch (e->sig) {
        //${SMs::QHsmTst::SM::t}
        case Q_ENTRY_SIG: {
            BSP_display("t-ENTRY;");
            status_ = Q_RET_HANDLED;
            break;
        }
        //${SMs::QHsmTst::SM::t}
        case Q_EXIT_SIG: {
            BSP_display("t-EXIT;");
            status_ = Q_RET_HANDLED;
            break;
        }
        //${SMs::QHsmTst::SM::t::C}
        case C_SIG: {
            BSP_display("t-C->H-s;");
            status_ = tran_hist(hist_s);
            break;
        }
        default: {
            status_ = super(&top);
            break;
        }
    }
    return status_;
}
//$enddef${SMs::QHsmTst} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

bool QHsmTst_isIn(std::uint32_t const state_num) {
    QP::QHsm * const me = &l_hsmtst;
    bool stat = false;
    switch (state_num) {
    case 0:
        stat = me->isIn(Q_STATE_CAST(&QHsmTst::s));
        break;
    case 1:
        stat = me->isIn(Q_STATE_CAST(&QHsmTst::s1));
        break;
    case 11:
        stat = me->isIn(Q_STATE_CAST(&QHsmTst::s11));
        break;
    case 111:
        stat = me->isIn(Q_STATE_CAST(&QHsmTst::s111));
        break;
    case 112:
        stat = me->isIn(Q_STATE_CAST(&QHsmTst::s112));
        break;
    case 12:
        stat = me->isIn(Q_STATE_CAST(&QHsmTst::s12));
        break;
    case 2:
        stat = me->isIn(Q_STATE_CAST(&QHsmTst::s2));
        break;
    case 21:
        stat = me->isIn(Q_STATE_CAST(&QHsmTst::s21));
        break;
    case 211:
        stat = me->isIn(Q_STATE_CAST(&QHsmTst::s211));
        break;
    case 212:
        stat = me->isIn(Q_STATE_CAST(&QHsmTst::s212));
        break;
    case 22:
        stat = me->isIn(Q_STATE_CAST(&QHsmTst::s22));
        break;
    default:
        Q_ERROR();
    }
    return stat;
}

} // namespace APP
