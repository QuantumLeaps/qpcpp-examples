//$file${src::gizmo.cpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: gizmo.qm
// File:  ${src::gizmo.cpp}
//
// This code has been generated by QM 5.3.0 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This generated code is open source software: you can redistribute it under
// the terms of the GNU General Public License as published by the Free
// Software Foundation.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
// more details.
//
// NOTE:
// Alternatively, this generated code may be distributed under the terms
// of Quantum Leaps commercial licenses, which expressly supersede the GNU
// General Public License and are specifically designed for licensees
// interested in retaining the proprietary status of their code.
//
// Contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${src::gizmo.cpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#include "qpcpp.hpp"  // QP/C++ framework API
#include "bsp.hpp"    // Board Support Package interface
#include "gizmo.hpp"  // Gizmo AO

//using namespace QP;

//$declare${AOs::Gizmo} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${AOs::Gizmo} ..............................................................
class Gizmo : public QP::QActive {
public:
    static Gizmo inst;

public:
    Gizmo();

protected:
    Q_STATE_DECL(initial);
    Q_STATE_DECL(init);
    Q_STATE_DECL(on_battery);
    Q_STATE_DECL(on_mains);
}; // class Gizmo
//$enddecl${AOs::Gizmo} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//$skip${QP_VERSION} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
// Check for the minimum required QP version
#if (QP_VERSION < 730U) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8U))
#error qpcpp version 7.3.0 or higher required
#endif
//$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//$define${AOs::AO_Gizmo} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${AOs::AO_Gizmo} ...........................................................
QP::QActive * const AO_Gizmo = &Gizmo::inst;
//$enddef${AOs::AO_Gizmo} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$define${AOs::Gizmo} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${AOs::Gizmo} ..............................................................
Gizmo Gizmo::inst;

//${AOs::Gizmo::Gizmo} .......................................................
Gizmo::Gizmo()
  : QActive(&initial)
{}

//${AOs::Gizmo::SM} ..........................................................
Q_STATE_DEF(Gizmo, initial) {
    //${AOs::Gizmo::SM::initial}
    Q_UNUSED_PAR(e);

    QS_FUN_DICTIONARY(&Gizmo::init);
    QS_FUN_DICTIONARY(&Gizmo::on_battery);
    QS_FUN_DICTIONARY(&Gizmo::on_mains);

    return tran(&init);
}

//${AOs::Gizmo::SM::init} ....................................................
Q_STATE_DEF(Gizmo, init) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::Gizmo::SM::init}
        case Q_ENTRY_SIG: {
            static QP::QEvt const startEvt(START_SIG);
            POST(&startEvt, this); // self-post
            status_ = Q_RET_HANDLED;
            break;
        }
        //${AOs::Gizmo::SM::init::START}
        case START_SIG: {
            QS_BEGIN_ID(QP::QS_USER1, m_prio)
               QS_STR("START");
            QS_END()
            //${AOs::Gizmo::SM::init::START::[BSP:getStatus()]}
            if (BSP::getStatus()) {
                status_ = tran(&on_mains);
            }
            //${AOs::Gizmo::SM::init::START::[else]}
            else {
                status_ = tran(&on_battery);
            }
            break;
        }
        default: {
            status_ = super(&top);
            break;
        }
    }
    return status_;
}

//${AOs::Gizmo::SM::on_battery} ..............................................
Q_STATE_DEF(Gizmo, on_battery) {
    QP::QState status_;
    switch (e->sig) {
        default: {
            status_ = super(&top);
            break;
        }
    }
    return status_;
}

//${AOs::Gizmo::SM::on_mains} ................................................
Q_STATE_DEF(Gizmo, on_mains) {
    QP::QState status_;
    switch (e->sig) {
        default: {
            status_ = super(&top);
            break;
        }
    }
    return status_;
}
//$enddef${AOs::Gizmo} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
