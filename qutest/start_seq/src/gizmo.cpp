//$file${src::gizmo.cpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: gizmo.qm
// File:  ${src::gizmo.cpp}
//
// This code has been generated by QM 7.0.1 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// Copyright (c) 2005 Quantum Leaps, LLC. All rights reserved.
//
//                 ____________________________________
//                /                                   /
//               /    GGGGGGG    PPPPPPPP   LL       /
//              /   GG     GG   PP     PP  LL       /
//             /   GG          PP     PP  LL       /
//            /   GG   GGGGG  PPPPPPPP   LL       /
//           /   GG      GG  PP         LL       /
//          /     GGGGGGG   PP         LLLLLLL  /
//         /___________________________________/
//
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This generated code is open-source software licensed under the GNU
// General Public License (GPL) as published by the Free Software Foundation
// (see <https://www.gnu.org/licenses>).
//
// NOTE:
// The GPL does NOT permit the incorporation of this code into proprietary
// programs. Please contact Quantum Leaps for commercial licensing options,
// which expressly supersede the GPL and are designed explicitly for
// closed-source distribution.
//
// Quantum Leaps contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${src::gizmo.cpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#include "qpcpp.hpp"  // QP/C++ framework API
#include "bsp.hpp"    // Board Support Package interface
#include "gizmo.hpp"  // Gizmo AO

//using namespace QP;

//$declare${AOs::Gizmo} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${AOs::Gizmo} ..............................................................
class Gizmo : public QP::QActive {
public:
    static Gizmo inst;

public:
    Gizmo();

protected:
    Q_STATE_DECL(initial);
    Q_STATE_DECL(initialize);
    Q_STATE_DECL(on_battery);
    Q_STATE_DECL(on_mains);
}; // class Gizmo
//$enddecl${AOs::Gizmo} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//$skip${QP_VERSION} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
// Check for the minimum required QP version
#if (QP_VERSION < 730U) || (QP_VERSION != ((QP_RELEASE^4294967295U)%0x2710U))
#error qpcpp version 7.3.0 or higher required
#endif
//$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$define${AOs::AO_Gizmo} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${AOs::AO_Gizmo} ...........................................................
QP::QActive * const AO_Gizmo = &Gizmo::inst;
//$enddef${AOs::AO_Gizmo} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$define${AOs::Gizmo} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${AOs::Gizmo} ..............................................................
Gizmo Gizmo::inst;

//${AOs::Gizmo::Gizmo} .......................................................
Gizmo::Gizmo()
  : QActive(&initial)
{}

//${AOs::Gizmo::SM} ..........................................................
Q_STATE_DEF(Gizmo, initial) {
    //${AOs::Gizmo::SM::initial}
    Q_UNUSED_PAR(e);

    QS_FUN_DICTIONARY(&Gizmo::initialize);
    QS_FUN_DICTIONARY(&Gizmo::on_battery);
    QS_FUN_DICTIONARY(&Gizmo::on_mains);

    return tran(&initialize);
}

//${AOs::Gizmo::SM::initialize} ..............................................
Q_STATE_DEF(Gizmo, initialize) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::Gizmo::SM::initialize}
        case Q_ENTRY_SIG: {
            static QP::QEvt const startEvt(START_SIG);
            POST(&startEvt, this); // self-post
            status_ = Q_RET_HANDLED;
            break;
        }
        //${AOs::Gizmo::SM::initialize::START}
        case START_SIG: {
            QS_BEGIN_ID(QP::QS_USER1, m_prio)
               QS_STR("START");
            QS_END()
            //${AOs::Gizmo::SM::initialize::START::[BSP:getStatus()]}
            if (BSP::getStatus()) {
                status_ = tran(&on_mains);
            }
            //${AOs::Gizmo::SM::initialize::START::[else]}
            else {
                status_ = tran(&on_battery);
            }
            break;
        }
        default: {
            status_ = super(&top);
            break;
        }
    }
    return status_;
}

//${AOs::Gizmo::SM::on_battery} ..............................................
Q_STATE_DEF(Gizmo, on_battery) {
    QP::QState status_;
    switch (e->sig) {
        default: {
            status_ = super(&top);
            break;
        }
    }
    return status_;
}

//${AOs::Gizmo::SM::on_mains} ................................................
Q_STATE_DEF(Gizmo, on_mains) {
    QP::QState status_;
    switch (e->sig) {
        default: {
            status_ = super(&top);
            break;
        }
    }
    return status_;
}
//$enddef${AOs::Gizmo} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
