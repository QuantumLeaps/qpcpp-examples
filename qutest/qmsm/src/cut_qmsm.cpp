//$file${.::cut_qmsm.cpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: qmsm.qm
// File:  ${.::cut_qmsm.cpp}
//
// This code has been generated by QM 7.0.1 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// Copyright (c) 2005 Quantum Leaps, LLC. All rights reserved.
//
//                 ____________________________________
//                /                                   /
//               /    GGGGGGG    PPPPPPPP   LL       /
//              /   GG     GG   PP     PP  LL       /
//             /   GG          PP     PP  LL       /
//            /   GG   GGGGG  PPPPPPPP   LL       /
//           /   GG      GG  PP         LL       /
//          /     GGGGGGG   PP         LLLLLLL  /
//         /___________________________________/
//
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This generated code is open-source software licensed under the GNU
// General Public License (GPL) as published by the Free Software Foundation
// (see <https://www.gnu.org/licenses>).
//
// NOTE:
// The GPL does NOT permit the incorporation of this code into proprietary
// programs. Please contact Quantum Leaps for commercial licensing options,
// which expressly supersede the GPL and are designed explicitly for
// closed-source distribution.
//
// Quantum Leaps contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${.::cut_qmsm.cpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#include "qpcpp.hpp"      // QP/C++ framework
#include "cut_qmsm.hpp"   // Code Under Test (CUT)

namespace {
Q_DEFINE_THIS_FILE
}

//$declare${SMs::TstSM} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace APP {

//${SMs::TstSM} ..............................................................
class TstSM : public QP::QMsm {
private:
    std::uint8_t m_foo;

public:
    static TstSM inst;

public:
    TstSM();
    friend bool TstSM_isIn(std::uint32_t const state_num);

protected:
    QM_STATE_DECL( initial);
    QM_STATE_DECL( s);
    QM_ACTION_DECL(s_e);
    QM_ACTION_DECL(s_x);
    QM_ACTION_DECL(s_i);
    QM_STATE_DECL( s1);
    QM_ACTION_DECL(s1_e);
    QM_ACTION_DECL(s1_x);
    QM_ACTION_DECL(s1_i);
    QM_STATE_DECL( s11);
    QM_ACTION_DECL(s11_e);
    QM_ACTION_DECL(s11_x);
    QM_ACTION_DECL(s11_i);
    QM_STATE_DECL( s111);
    QM_ACTION_DECL(s111_e);
    QM_ACTION_DECL(s111_x);
    QM_STATE_DECL( s112);
    QM_ACTION_DECL(s112_e);
    QM_ACTION_DECL(s112_x);
    QM_STATE_DECL( s12);
    QM_ACTION_DECL(s12_e);
    QM_ACTION_DECL(s12_x);
    QM_STATE_DECL( s2);
    QM_ACTION_DECL(s2_e);
    QM_ACTION_DECL(s2_x);
    QM_ACTION_DECL(s2_i);
    QM_STATE_DECL( s21);
    QM_ACTION_DECL(s21_e);
    QM_ACTION_DECL(s21_x);
    QM_ACTION_DECL(s21_i);
    QM_STATE_DECL( s211);
    QM_ACTION_DECL(s211_e);
    QM_ACTION_DECL(s211_x);
    QM_STATE_DECL( s212);
    QM_ACTION_DECL(s212_e);
    QM_ACTION_DECL(s212_x);
    QM_STATE_DECL( s22);
    QM_ACTION_DECL(s22_e);
    QM_ACTION_DECL(s22_x);
    QM_STATE_DECL( t);
    QM_ACTION_DECL(t_e);
    QM_ACTION_DECL(t_x);

protected:
    QP::QMState const *hist_s;
    QP::QMState const *hist_s1;
    QP::QMState const *hist_s2;
}; // class TstSM

} // namespace APP
//$enddecl${SMs::TstSM} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$skip${QP_VERSION} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
// Check for the minimum required QP version
#if (QP_VERSION < 730U) || (QP_VERSION != ((QP_RELEASE^4294967295U)%0x2710U))
#error qpcpp version 7.3.0 or higher required
#endif
//$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$define${Shared::the_sm} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace APP {

//${Shared::the_sm} ..........................................................
QP::QAsm * const the_sm = &TstSM::inst;

} // namespace APP
//$enddef${Shared::the_sm} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$define${Shared::TstSM_isIn} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace APP {

//${Shared::TstSM_isIn} ......................................................
bool TstSM_isIn(std::uint32_t const state_num) {
    QP::QAsm * const me = &TstSM::inst;
    bool stat = false;
    switch (state_num) {
    case 0:
        stat = me->isIn(Q_STATE_CAST(&TstSM::s));
        break;
    case 1:
        stat = me->isIn(Q_STATE_CAST(&TstSM::s1));
        break;
    case 11:
        stat = me->isIn(Q_STATE_CAST(&TstSM::s11));
        break;
    case 111:
        stat = me->isIn(Q_STATE_CAST(&TstSM::s111));
        break;
    case 112:
        stat = me->isIn(Q_STATE_CAST(&TstSM::s112));
        break;
    case 12:
        stat = me->isIn(Q_STATE_CAST(&TstSM::s12));
        break;
    case 2:
        stat = me->isIn(Q_STATE_CAST(&TstSM::s2));
        break;
    case 21:
        stat = me->isIn(Q_STATE_CAST(&TstSM::s21));
        break;
    case 211:
        stat = me->isIn(Q_STATE_CAST(&TstSM::s211));
        break;
    case 212:
        stat = me->isIn(Q_STATE_CAST(&TstSM::s212));
        break;
    case 22:
        stat = me->isIn(Q_STATE_CAST(&TstSM::s22));
        break;
    default:
        Q_ERROR();
    }
    return stat;
}

} // namespace APP
//$enddef${Shared::TstSM_isIn} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$define${SMs::TstSM} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace APP {

//${SMs::TstSM} ..............................................................
TstSM TstSM::inst;

//${SMs::TstSM::TstSM} .......................................................
TstSM::TstSM()
  : QP::QMsm(Q_STATE_CAST(&TstSM::initial))
{}

//${SMs::TstSM::SM} ..........................................................
QM_STATE_DEF(TstSM, initial) {
    //${SMs::TstSM::SM::initial}
    Q_UNUSED_PAR(e);
    m_foo = 0U;
    BSP_display("top-INIT;");

    QS_SIG_DICTIONARY(A_SIG, (void *)0);
    QS_SIG_DICTIONARY(B_SIG, (void *)0);
    QS_SIG_DICTIONARY(C_SIG, (void *)0);
    QS_SIG_DICTIONARY(D_SIG, (void *)0);
    QS_SIG_DICTIONARY(E_SIG, (void *)0);
    QS_SIG_DICTIONARY(F_SIG, (void *)0);
    QS_SIG_DICTIONARY(G_SIG, (void *)0);
    QS_SIG_DICTIONARY(H_SIG, (void *)0);
    QS_SIG_DICTIONARY(I_SIG, (void *)0);
    // state history attributes
    hist_s = &s1_s;
    hist_s1 = &s11_s;
    hist_s2 = &s211_s;

    QS_FUN_DICTIONARY(&TstSM::s);
    QS_FUN_DICTIONARY(&TstSM::s1);
    QS_FUN_DICTIONARY(&TstSM::s11);
    QS_FUN_DICTIONARY(&TstSM::s111);
    QS_FUN_DICTIONARY(&TstSM::s112);
    QS_FUN_DICTIONARY(&TstSM::s12);
    QS_FUN_DICTIONARY(&TstSM::s2);
    QS_FUN_DICTIONARY(&TstSM::s21);
    QS_FUN_DICTIONARY(&TstSM::s211);
    QS_FUN_DICTIONARY(&TstSM::s212);
    QS_FUN_DICTIONARY(&TstSM::s22);
    QS_FUN_DICTIONARY(&TstSM::t);

    static struct {
        QP::QMState const *target;
        QP::QActionHandler act[4];
    } const tatbl_ = { // tran-action table
        &s2_s, // target state
        {
            &s_e, // entry
            &s2_e, // entry
            &s2_i, // initial tran.
            Q_ACTION_NULL // zero terminator
        }
    };
    return qm_tran_init(&tatbl_);
}

//${SMs::TstSM::SM::s} .......................................................
QP::QMState const TstSM::s_s = {
    QM_STATE_NULL, // superstate (top)
    &TstSM::s,
    &TstSM::s_e,
    &TstSM::s_x,
    &TstSM::s_i
};
//${SMs::TstSM::SM::s}
QM_ACTION_DEF(TstSM, s_e) {
    BSP_display("s-ENTRY;");
    return qm_entry(&s_s);
}
//${SMs::TstSM::SM::s}
QM_ACTION_DEF(TstSM, s_x) {
    BSP_display("s-EXIT;");
    // save shallow history
    hist_s = childStateObj(&s_s);
    return qm_exit(&s_s);
}
//${SMs::TstSM::SM::s::initial}
QM_ACTION_DEF(TstSM, s_i) {
    //${SMs::TstSM::SM::s::initial}
    BSP_display("s-INIT;");

    static struct {
        QP::QMState const *target;
        QP::QActionHandler act[3];
    } const tatbl_ = { // tran-action table
        &s1_s, // target state
        {
            &s1_e, // entry
            &s1_i, // initial tran.
            Q_ACTION_NULL // zero terminator
        }
    };
    return qm_tran_init(&tatbl_);
}
//${SMs::TstSM::SM::s}
QM_STATE_DEF(TstSM, s) {
    QP::QState status_;
    switch (e->sig) {
        //${SMs::TstSM::SM::s::E}
        case E_SIG: {
            BSP_display("s-E;");

            static struct {
                QP::QMState const *target;
                QP::QActionHandler act[4];
            } const tatbl_ = { // tran-action table
                &s11_s, // target state
                {
                    &s1_e, // entry
                    &s11_e, // entry
                    &s11_i, // initial tran.
                    Q_ACTION_NULL // zero terminator
                }
            };
            status_ = qm_tran(&tatbl_);
            break;
        }
        //${SMs::TstSM::SM::s::I}
        case I_SIG: {
            BSP_display("s-I;");
            status_ = Q_RET_HANDLED;
            break;
        }
        //${SMs::TstSM::SM::s::C}
        case C_SIG: {
            BSP_display("s-C;");

            static struct {
                QP::QMState const *target;
                QP::QActionHandler act[3];
            } const tatbl_ = { // tran-action table
                &t_s, // target state
                {
                    &s_x, // exit
                    &t_e, // entry
                    Q_ACTION_NULL // zero terminator
                }
            };
            status_ = qm_tran(&tatbl_);
            break;
        }
        default: {
            status_ = Q_RET_SUPER;
            break;
        }
    }
    return status_;
}

//${SMs::TstSM::SM::s::s1} ...................................................
QP::QMState const TstSM::s1_s = {
    &TstSM::s_s, // superstate
    &TstSM::s1,
    &TstSM::s1_e,
    &TstSM::s1_x,
    &TstSM::s1_i
};
//${SMs::TstSM::SM::s::s1}
QM_ACTION_DEF(TstSM, s1_e) {
    BSP_display("s1-ENTRY;");
    return qm_entry(&s1_s);
}
//${SMs::TstSM::SM::s::s1}
QM_ACTION_DEF(TstSM, s1_x) {
    BSP_display("s1-EXIT;");
    // save shallow history
    hist_s1 = childStateObj(&s1_s);
    return qm_exit(&s1_s);
}
//${SMs::TstSM::SM::s::s1::initial}
QM_ACTION_DEF(TstSM, s1_i) {
    //${SMs::TstSM::SM::s::s1::initial}
    BSP_display("s1-INIT;");

    static struct {
        QP::QMState const *target;
        QP::QActionHandler act[3];
    } const tatbl_ = { // tran-action table
        &s111_s, // target state
        {
            &s11_e, // entry
            &s111_e, // entry
            Q_ACTION_NULL // zero terminator
        }
    };
    return qm_tran_init(&tatbl_);
}
//${SMs::TstSM::SM::s::s1}
QM_STATE_DEF(TstSM, s1) {
    QP::QState status_;
    switch (e->sig) {
        //${SMs::TstSM::SM::s::s1::E}
        case E_SIG: {
            BSP_display("s1-E;");

            static struct {
                QP::QMState const *target;
                QP::QActionHandler act[2];
            } const tatbl_ = { // tran-action table
                &s12_s, // target state
                {
                    &s12_e, // entry
                    Q_ACTION_NULL // zero terminator
                }
            };
            status_ = qm_tran(&tatbl_);
            break;
        }
        //${SMs::TstSM::SM::s::s1::F}
        case F_SIG: {
            BSP_display("s1-F;");

            static struct {
                QP::QMState const *target;
                QP::QActionHandler act[5];
            } const tatbl_ = { // tran-action table
                &s21_s, // target state
                {
                    &s1_x, // exit
                    &s2_e, // entry
                    &s21_e, // entry
                    &s21_i, // initial tran.
                    Q_ACTION_NULL // zero terminator
                }
            };
            status_ = qm_tran(&tatbl_);
            break;
        }
        //${SMs::TstSM::SM::s::s1::I}
        case I_SIG: {
            //${SMs::TstSM::SM::s::s1::I::[m_foo]}
            if (m_foo) {
                m_foo = 0U;
                BSP_display("s1-I;");
                status_ = Q_RET_HANDLED;
            }
            else {
                status_ = Q_RET_UNHANDLED;
            }
            break;
        }
        default: {
            status_ = Q_RET_SUPER;
            break;
        }
    }
    return status_;
}

//${SMs::TstSM::SM::s::s1::s11} ..............................................
QP::QMState const TstSM::s11_s = {
    &TstSM::s1_s, // superstate
    &TstSM::s11,
    &TstSM::s11_e,
    &TstSM::s11_x,
    &TstSM::s11_i
};
//${SMs::TstSM::SM::s::s1::s11}
QM_ACTION_DEF(TstSM, s11_e) {
    BSP_display("s11-ENTRY;");
    return qm_entry(&s11_s);
}
//${SMs::TstSM::SM::s::s1::s11}
QM_ACTION_DEF(TstSM, s11_x) {
    BSP_display("s11-EXIT;");
    return qm_exit(&s11_s);
}
//${SMs::TstSM::SM::s::s1::s11::initial}
QM_ACTION_DEF(TstSM, s11_i) {
    //${SMs::TstSM::SM::s::s1::s11::initial}
    BSP_display("s11-INIT;");

    static struct {
        QP::QMState const *target;
        QP::QActionHandler act[2];
    } const tatbl_ = { // tran-action table
        &s111_s, // target state
        {
            &s111_e, // entry
            Q_ACTION_NULL // zero terminator
        }
    };
    return qm_tran_init(&tatbl_);
}
//${SMs::TstSM::SM::s::s1::s11}
QM_STATE_DEF(TstSM, s11) {
    QP::QState status_;
    switch (e->sig) {
        //${SMs::TstSM::SM::s::s1::s11::A}
        case A_SIG: {
            BSP_display("s11-A;");

            static struct {
                QP::QMState const *target;
                QP::QActionHandler act[4];
            } const tatbl_ = { // tran-action table
                &s11_s, // target state
                {
                    &s11_x, // exit
                    &s11_e, // entry
                    &s11_i, // initial tran.
                    Q_ACTION_NULL // zero terminator
                }
            };
            status_ = qm_tran(&tatbl_);
            break;
        }
        //${SMs::TstSM::SM::s::s1::s11::B}
        case B_SIG: {
            BSP_display("s11-B;");

            static struct {
                QP::QMState const *target;
                QP::QActionHandler act[2];
            } const tatbl_ = { // tran-action table
                &s111_s, // target state
                {
                    &s111_e, // entry
                    Q_ACTION_NULL // zero terminator
                }
            };
            status_ = qm_tran(&tatbl_);
            break;
        }
        //${SMs::TstSM::SM::s::s1::s11::D}
        case D_SIG: {
            //${SMs::TstSM::SM::s::s1::s11::D::[!m_foo]}
            if (!m_foo) {
                m_foo = 1U;
                BSP_display("s11-D;");

                static struct {
                    QP::QMState const *target;
                    QP::QActionHandler act[3];
                } const tatbl_ = { // tran-action table
                    &s1_s, // target state
                    {
                        &s11_x, // exit
                        &s1_i, // initial tran.
                        Q_ACTION_NULL // zero terminator
                    }
                };
                status_ = qm_tran(&tatbl_);
            }
            else {
                status_ = Q_RET_UNHANDLED;
            }
            break;
        }
        //${SMs::TstSM::SM::s::s1::s11::G}
        case G_SIG: {
            BSP_display("s11-G->H*-s2;");

            static struct {
                QP::QMState const *target;
                QP::QActionHandler act[4];
            } const tatbl_ = { // tran-action table
                &s2_s, // target state
                {
                    &s11_x, // exit
                    &s1_x, // exit
                    &s2_e, // entry
                    Q_ACTION_NULL // zero terminator
                }
            };
            status_ = qm_tran_hist(hist_s2, &tatbl_);
            break;
        }
        default: {
            status_ = Q_RET_SUPER;
            break;
        }
    }
    return status_;
}

//${SMs::TstSM::SM::s::s1::s11::s111} ........................................
QP::QMState const TstSM::s111_s = {
    &TstSM::s11_s, // superstate
    &TstSM::s111,
    &TstSM::s111_e,
    &TstSM::s111_x,
    Q_ACTION_NULL  // no initial tran.
};
//${SMs::TstSM::SM::s::s1::s11::s111}
QM_ACTION_DEF(TstSM, s111_e) {
    BSP_display("s111-ENTRY;");
    return qm_entry(&s111_s);
}
//${SMs::TstSM::SM::s::s1::s11::s111}
QM_ACTION_DEF(TstSM, s111_x) {
    BSP_display("s111-EXIT;");
    return qm_exit(&s111_s);
}
//${SMs::TstSM::SM::s::s1::s11::s111}
QM_STATE_DEF(TstSM, s111) {
    QP::QState status_;
    switch (e->sig) {
        //${SMs::TstSM::SM::s::s1::s11::s111::C}
        case C_SIG: {
            BSP_display("s111-C;");

            static struct {
                QP::QMState const *target;
                QP::QActionHandler act[3];
            } const tatbl_ = { // tran-action table
                &s112_s, // target state
                {
                    &s111_x, // exit
                    &s112_e, // entry
                    Q_ACTION_NULL // zero terminator
                }
            };
            status_ = qm_tran(&tatbl_);
            break;
        }
        default: {
            status_ = Q_RET_SUPER;
            break;
        }
    }
    return status_;
}

//${SMs::TstSM::SM::s::s1::s11::s112} ........................................
QP::QMState const TstSM::s112_s = {
    &TstSM::s11_s, // superstate
    &TstSM::s112,
    &TstSM::s112_e,
    &TstSM::s112_x,
    Q_ACTION_NULL  // no initial tran.
};
//${SMs::TstSM::SM::s::s1::s11::s112}
QM_ACTION_DEF(TstSM, s112_e) {
    BSP_display("s112-ENTRY;");
    return qm_entry(&s112_s);
}
//${SMs::TstSM::SM::s::s1::s11::s112}
QM_ACTION_DEF(TstSM, s112_x) {
    BSP_display("s112-EXIT;");
    return qm_exit(&s112_s);
}
//${SMs::TstSM::SM::s::s1::s11::s112}
QM_STATE_DEF(TstSM, s112) {
    QP::QState status_;
    switch (e->sig) {
        //${SMs::TstSM::SM::s::s1::s11::s112::H}
        case H_SIG: {
            BSP_display("s112-H;");

            static struct {
                QP::QMState const *target;
                QP::QActionHandler act[5];
            } const tatbl_ = { // tran-action table
                &s_s, // target state
                {
                    &s112_x, // exit
                    &s11_x, // exit
                    &s1_x, // exit
                    &s_i, // initial tran.
                    Q_ACTION_NULL // zero terminator
                }
            };
            status_ = qm_tran(&tatbl_);
            break;
        }
        default: {
            status_ = Q_RET_SUPER;
            break;
        }
    }
    return status_;
}

//${SMs::TstSM::SM::s::s1::s12} ..............................................
QP::QMState const TstSM::s12_s = {
    &TstSM::s1_s, // superstate
    &TstSM::s12,
    &TstSM::s12_e,
    &TstSM::s12_x,
    Q_ACTION_NULL  // no initial tran.
};
//${SMs::TstSM::SM::s::s1::s12}
QM_ACTION_DEF(TstSM, s12_e) {
    BSP_display("s12-ENTRY;");
    return qm_entry(&s12_s);
}
//${SMs::TstSM::SM::s::s1::s12}
QM_ACTION_DEF(TstSM, s12_x) {
    BSP_display("s12-EXIT;");
    return qm_exit(&s12_s);
}
//${SMs::TstSM::SM::s::s1::s12}
QM_STATE_DEF(TstSM, s12) {
    QP::QState status_;
    switch (e->sig) {
        default: {
            status_ = Q_RET_SUPER;
            break;
        }
    }
    return status_;
}

//${SMs::TstSM::SM::s::s2} ...................................................
QP::QMState const TstSM::s2_s = {
    &TstSM::s_s, // superstate
    &TstSM::s2,
    &TstSM::s2_e,
    &TstSM::s2_x,
    &TstSM::s2_i
};
//${SMs::TstSM::SM::s::s2}
QM_ACTION_DEF(TstSM, s2_e) {
    BSP_display("s2-ENTRY;");
    return qm_entry(&s2_s);
}
//${SMs::TstSM::SM::s::s2}
QM_ACTION_DEF(TstSM, s2_x) {
    BSP_display("s2-EXIT;");
    // save deep history
    hist_s2 = stateObj();
    return qm_exit(&s2_s);
}
//${SMs::TstSM::SM::s::s2::initial}
QM_ACTION_DEF(TstSM, s2_i) {
    //${SMs::TstSM::SM::s::s2::initial}
    BSP_display("s2-INIT;");

    static struct {
        QP::QMState const *target;
        QP::QActionHandler act[3];
    } const tatbl_ = { // tran-action table
        &s211_s, // target state
        {
            &s21_e, // entry
            &s211_e, // entry
            Q_ACTION_NULL // zero terminator
        }
    };
    return qm_tran_init(&tatbl_);
}
//${SMs::TstSM::SM::s::s2}
QM_STATE_DEF(TstSM, s2) {
    QP::QState status_;
    switch (e->sig) {
        //${SMs::TstSM::SM::s::s2::E}
        case E_SIG: {
            BSP_display("s2-E;");

            static struct {
                QP::QMState const *target;
                QP::QActionHandler act[2];
            } const tatbl_ = { // tran-action table
                &s22_s, // target state
                {
                    &s22_e, // entry
                    Q_ACTION_NULL // zero terminator
                }
            };
            status_ = qm_tran(&tatbl_);
            break;
        }
        //${SMs::TstSM::SM::s::s2::F}
        case F_SIG: {
            BSP_display("s2-F;");

            static struct {
                QP::QMState const *target;
                QP::QActionHandler act[5];
            } const tatbl_ = { // tran-action table
                &s11_s, // target state
                {
                    &s2_x, // exit
                    &s1_e, // entry
                    &s11_e, // entry
                    &s11_i, // initial tran.
                    Q_ACTION_NULL // zero terminator
                }
            };
            status_ = qm_tran(&tatbl_);
            break;
        }
        //${SMs::TstSM::SM::s::s2::I}
        case I_SIG: {
            //${SMs::TstSM::SM::s::s2::I::[m_foo]}
            if (m_foo) {
                m_foo = 0U;
                BSP_display("s2-I;");
                status_ = Q_RET_HANDLED;
            }
            else {
                status_ = Q_RET_UNHANDLED;
            }
            break;
        }
        default: {
            status_ = Q_RET_SUPER;
            break;
        }
    }
    return status_;
}

//${SMs::TstSM::SM::s::s2::s21} ..............................................
QP::QMState const TstSM::s21_s = {
    &TstSM::s2_s, // superstate
    &TstSM::s21,
    &TstSM::s21_e,
    &TstSM::s21_x,
    &TstSM::s21_i
};
//${SMs::TstSM::SM::s::s2::s21}
QM_ACTION_DEF(TstSM, s21_e) {
    BSP_display("s21-ENTRY;");
    return qm_entry(&s21_s);
}
//${SMs::TstSM::SM::s::s2::s21}
QM_ACTION_DEF(TstSM, s21_x) {
    BSP_display("s21-EXIT;");
    return qm_exit(&s21_s);
}
//${SMs::TstSM::SM::s::s2::s21::initial}
QM_ACTION_DEF(TstSM, s21_i) {
    //${SMs::TstSM::SM::s::s2::s21::initial}
    BSP_display("s21-INIT;");

    static struct {
        QP::QMState const *target;
        QP::QActionHandler act[2];
    } const tatbl_ = { // tran-action table
        &s211_s, // target state
        {
            &s211_e, // entry
            Q_ACTION_NULL // zero terminator
        }
    };
    return qm_tran_init(&tatbl_);
}
//${SMs::TstSM::SM::s::s2::s21}
QM_STATE_DEF(TstSM, s21) {
    QP::QState status_;
    switch (e->sig) {
        //${SMs::TstSM::SM::s::s2::s21::A}
        case A_SIG: {
            BSP_display("s21-A;");

            static struct {
                QP::QMState const *target;
                QP::QActionHandler act[4];
            } const tatbl_ = { // tran-action table
                &s21_s, // target state
                {
                    &s21_x, // exit
                    &s21_e, // entry
                    &s21_i, // initial tran.
                    Q_ACTION_NULL // zero terminator
                }
            };
            status_ = qm_tran(&tatbl_);
            break;
        }
        //${SMs::TstSM::SM::s::s2::s21::B}
        case B_SIG: {
            BSP_display("s21-B;");

            static struct {
                QP::QMState const *target;
                QP::QActionHandler act[2];
            } const tatbl_ = { // tran-action table
                &s211_s, // target state
                {
                    &s211_e, // entry
                    Q_ACTION_NULL // zero terminator
                }
            };
            status_ = qm_tran(&tatbl_);
            break;
        }
        //${SMs::TstSM::SM::s::s2::s21::D}
        case D_SIG: {
            //${SMs::TstSM::SM::s::s2::s21::D::[!m_foo]}
            if (!m_foo) {
                m_foo = 1U;
                BSP_display("s21-D;");

                static struct {
                    QP::QMState const *target;
                    QP::QActionHandler act[3];
                } const tatbl_ = { // tran-action table
                    &s2_s, // target state
                    {
                        &s21_x, // exit
                        &s2_i, // initial tran.
                        Q_ACTION_NULL // zero terminator
                    }
                };
                status_ = qm_tran(&tatbl_);
            }
            else {
                status_ = Q_RET_UNHANDLED;
            }
            break;
        }
        //${SMs::TstSM::SM::s::s2::s21::G}
        case G_SIG: {
            BSP_display("s21-G->H*-s1;");

            static struct {
                QP::QMState const *target;
                QP::QActionHandler act[4];
            } const tatbl_ = { // tran-action table
                &s1_s, // target state
                {
                    &s21_x, // exit
                    &s2_x, // exit
                    &s1_e, // entry
                    Q_ACTION_NULL // zero terminator
                }
            };
            status_ = qm_tran_hist(hist_s1, &tatbl_);
            break;
        }
        default: {
            status_ = Q_RET_SUPER;
            break;
        }
    }
    return status_;
}

//${SMs::TstSM::SM::s::s2::s21::s211} ........................................
QP::QMState const TstSM::s211_s = {
    &TstSM::s21_s, // superstate
    &TstSM::s211,
    &TstSM::s211_e,
    &TstSM::s211_x,
    Q_ACTION_NULL  // no initial tran.
};
//${SMs::TstSM::SM::s::s2::s21::s211}
QM_ACTION_DEF(TstSM, s211_e) {
    BSP_display("s211-ENTRY;");
    return qm_entry(&s211_s);
}
//${SMs::TstSM::SM::s::s2::s21::s211}
QM_ACTION_DEF(TstSM, s211_x) {
    BSP_display("s211-EXIT;");
    return qm_exit(&s211_s);
}
//${SMs::TstSM::SM::s::s2::s21::s211}
QM_STATE_DEF(TstSM, s211) {
    QP::QState status_;
    switch (e->sig) {
        //${SMs::TstSM::SM::s::s2::s21::s211::C}
        case C_SIG: {
            BSP_display("s211-C;");

            static struct {
                QP::QMState const *target;
                QP::QActionHandler act[3];
            } const tatbl_ = { // tran-action table
                &s212_s, // target state
                {
                    &s211_x, // exit
                    &s212_e, // entry
                    Q_ACTION_NULL // zero terminator
                }
            };
            status_ = qm_tran(&tatbl_);
            break;
        }
        default: {
            status_ = Q_RET_SUPER;
            break;
        }
    }
    return status_;
}

//${SMs::TstSM::SM::s::s2::s21::s212} ........................................
QP::QMState const TstSM::s212_s = {
    &TstSM::s21_s, // superstate
    &TstSM::s212,
    &TstSM::s212_e,
    &TstSM::s212_x,
    Q_ACTION_NULL  // no initial tran.
};
//${SMs::TstSM::SM::s::s2::s21::s212}
QM_ACTION_DEF(TstSM, s212_e) {
    BSP_display("s212-ENTRY;");
    return qm_entry(&s212_s);
}
//${SMs::TstSM::SM::s::s2::s21::s212}
QM_ACTION_DEF(TstSM, s212_x) {
    BSP_display("s212-EXIT;");
    return qm_exit(&s212_s);
}
//${SMs::TstSM::SM::s::s2::s21::s212}
QM_STATE_DEF(TstSM, s212) {
    QP::QState status_;
    switch (e->sig) {
        //${SMs::TstSM::SM::s::s2::s21::s212::H}
        case H_SIG: {
            BSP_display("s212-H;");

            static struct {
                QP::QMState const *target;
                QP::QActionHandler act[5];
            } const tatbl_ = { // tran-action table
                &s_s, // target state
                {
                    &s212_x, // exit
                    &s21_x, // exit
                    &s2_x, // exit
                    &s_i, // initial tran.
                    Q_ACTION_NULL // zero terminator
                }
            };
            status_ = qm_tran(&tatbl_);
            break;
        }
        default: {
            status_ = Q_RET_SUPER;
            break;
        }
    }
    return status_;
}

//${SMs::TstSM::SM::s::s2::s22} ..............................................
QP::QMState const TstSM::s22_s = {
    &TstSM::s2_s, // superstate
    &TstSM::s22,
    &TstSM::s22_e,
    &TstSM::s22_x,
    Q_ACTION_NULL  // no initial tran.
};
//${SMs::TstSM::SM::s::s2::s22}
QM_ACTION_DEF(TstSM, s22_e) {
    BSP_display("s22-ENTRY;");
    return qm_entry(&s22_s);
}
//${SMs::TstSM::SM::s::s2::s22}
QM_ACTION_DEF(TstSM, s22_x) {
    BSP_display("s22-EXIT;");
    return qm_exit(&s22_s);
}
//${SMs::TstSM::SM::s::s2::s22}
QM_STATE_DEF(TstSM, s22) {
    QP::QState status_;
    switch (e->sig) {
        default: {
            status_ = Q_RET_SUPER;
            break;
        }
    }
    return status_;
}

//${SMs::TstSM::SM::t} .......................................................
QP::QMState const TstSM::t_s = {
    QM_STATE_NULL, // superstate (top)
    &TstSM::t,
    &TstSM::t_e,
    &TstSM::t_x,
    Q_ACTION_NULL  // no initial tran.
};
//${SMs::TstSM::SM::t}
QM_ACTION_DEF(TstSM, t_e) {
    BSP_display("t-ENTRY;");
    return qm_entry(&t_s);
}
//${SMs::TstSM::SM::t}
QM_ACTION_DEF(TstSM, t_x) {
    BSP_display("t-EXIT;");
    return qm_exit(&t_s);
}
//${SMs::TstSM::SM::t}
QM_STATE_DEF(TstSM, t) {
    QP::QState status_;
    switch (e->sig) {
        //${SMs::TstSM::SM::t::C}
        case C_SIG: {
            BSP_display("t-C->H-s;");

            static struct {
                QP::QMState const *target;
                QP::QActionHandler act[3];
            } const tatbl_ = { // tran-action table
                &s_s, // target state
                {
                    &t_x, // exit
                    &s_e, // entry
                    Q_ACTION_NULL // zero terminator
                }
            };
            status_ = qm_tran_hist(hist_s, &tatbl_);
            break;
        }
        //${SMs::TstSM::SM::t::E}
        case E_SIG: {
            BSP_display("t-E->H*-s2;");

            static struct {
                QP::QMState const *target;
                QP::QActionHandler act[4];
            } const tatbl_ = { // tran-action table
                &s2_s, // target state
                {
                    &t_x, // exit
                    &s_e, // entry
                    &s2_e, // entry
                    Q_ACTION_NULL // zero terminator
                }
            };
            status_ = qm_tran_hist(hist_s2, &tatbl_);
            break;
        }
        default: {
            status_ = Q_RET_SUPER;
            break;
        }
    }
    return status_;
}

} // namespace APP
//$enddef${SMs::TstSM} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
