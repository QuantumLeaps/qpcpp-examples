//$file${.::cut_qmsm.cpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: qmsm.qm
// File:  ${.::cut_qmsm.cpp}
//
// This code has been generated by QM 6.2.2 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
//                    Q u a n t u m  L e a P s
//                    ------------------------
//                    Modern Embedded Software
//
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This generated code is open source software: you can redistribute it under
// the terms of the GNU General Public License as published by the Free
// Software Foundation.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
// more details.
//
// NOTE:
// Please contact Quantum Leaps for commercial licensing options, which
// expressly supersede the GNU General Public License and are specifically
// designed for licensees interested in retaining the proprietary status
// of the generated code.
//
// Contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${.::cut_qmsm.cpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#include "qpcpp.hpp"
#include "cut_qmsm.hpp"

namespace {
Q_DEFINE_THIS_FILE
}

namespace APP {

//$declare${SMs::QMsmTst} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${SMs::QMsmTst} ............................................................
class QMsmTst : public QP::QMsm {
private:
    bool m_foo;

public:
    friend bool QMsmTst_isIn(std::uint32_t const state_num);

public:
    QMsmTst()
      : QMsm(&initial)
    {}

protected:
    // exit points for submachine ${SMs::QMsmTst::SM::sub}
    struct SM_sub {
        QP::QMState super;
        QP::QActionHandler const xpH; // exit-point segment
        QP::QActionHandler const xpG; // exit-point segment
    } const *sub_sub;

    QM_STATE_DECL( initial);
    QM_STATE_DECL( s);
    QM_ACTION_DECL(s_e);
    QM_ACTION_DECL(s_x);
    QM_ACTION_DECL(s_i);
    QM_SM_STATE_DECL(sub, s1);
    QM_ACTION_DECL(s1_e);
    QM_ACTION_DECL(s1_xpH);
    QM_ACTION_DECL(s1_xpG);
    QM_SM_STATE_DECL(sub, s2);
    QM_ACTION_DECL(s2_e);
    QM_ACTION_DECL(s2_xpH);
    QM_ACTION_DECL(s2_xpG);
    QM_STATE_DECL( t);
    QM_ACTION_DECL(t_e);
    QM_ACTION_DECL(t_x);

    // submachine ${SMs::QMsmTst::SM::sub}
    QM_STATE_DECL( sub);
    QM_ACTION_DECL(sub_e);
    QM_ACTION_DECL(sub_x);
    QM_ACTION_DECL(sub_i);
    QM_ACTION_DECL(sub_ep1_ep);
    QM_STATE_DECL( sub_sub1);
    QM_ACTION_DECL(sub_sub1_e);
    QM_ACTION_DECL(sub_sub1_x);
    QM_ACTION_DECL(sub_sub1_i);
    QM_STATE_DECL( sub_sub11);
    QM_ACTION_DECL(sub_sub11_e);
    QM_ACTION_DECL(sub_sub11_x);
    QM_STATE_DECL( sub_sub12);
    QM_ACTION_DECL(sub_sub12_e);
    QM_ACTION_DECL(sub_sub12_x);
    QM_STATE_DECL( sub_sub2);
    QM_ACTION_DECL(sub_sub2_e);
    QM_ACTION_DECL(sub_sub2_x);

protected:
    QP::QMState const *hist_s;
    QP::QMState const *hist_s1;
    QP::QMState const *hist_s2;
}; // class QMsmTst
//$enddecl${SMs::QMsmTst} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

static QMsmTst l_msmtst; // the only instance of the QMsmTst class

// global-scope definitions -----------------------------------------
QP::QAsm * const the_sm = &l_msmtst; // the opaque pointer

//$skip${QP_VERSION} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
// Check for the minimum required QP version
#if (QP_VERSION < 730U) || (QP_VERSION != ((QP_RELEASE^4294967295U)%0x2710U))
#error qpcpp version 7.3.0 or higher required
#endif
//$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$define${SMs::QMsmTst} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${SMs::QMsmTst} ............................................................

//${SMs::QMsmTst::SM} ........................................................
QM_STATE_DEF(QMsmTst, initial) {
    //${SMs::QMsmTst::SM::initial}
    Q_UNUSED_PAR(e);
    m_foo = 0U;
    BSP_display("top-INIT;");

    QS_SIG_DICTIONARY(A_SIG, nullptr);
    QS_SIG_DICTIONARY(B_SIG, nullptr);
    QS_SIG_DICTIONARY(C_SIG, nullptr);
    QS_SIG_DICTIONARY(D_SIG, nullptr);
    QS_SIG_DICTIONARY(E_SIG, nullptr);
    QS_SIG_DICTIONARY(F_SIG, nullptr);
    QS_SIG_DICTIONARY(G_SIG, nullptr);
    QS_SIG_DICTIONARY(H_SIG, nullptr);
    QS_SIG_DICTIONARY(I_SIG, nullptr);
    // state history attributes
    hist_s = &s1_s.super;
    hist_s1 = &sub_sub11_s;
    hist_s2 = &sub_sub11_s;

    QS_FUN_DICTIONARY(&QMsmTst::s);
    QS_FUN_DICTIONARY(&QMsmTst::s1);
    QS_FUN_DICTIONARY(&QMsmTst::s2);
    QS_FUN_DICTIONARY(&QMsmTst::t);
    QS_FUN_DICTIONARY(&QMsmTst::sub_sub1);
    QS_FUN_DICTIONARY(&QMsmTst::sub_sub11);
    QS_FUN_DICTIONARY(&QMsmTst::sub_sub12);
    QS_FUN_DICTIONARY(&QMsmTst::sub_sub2);
    QS_FUN_DICTIONARY(&QMsmTst::sub);

    static struct {
        QP::QMState const *target;
        QP::QActionHandler act[4];
    } const tatbl_ = { // tran-action table
        &sub_s, // target submachine
        {
            &s_e, // entry
            &s2_e, // entry
            &sub_i, // initial tran.
            Q_ACTION_NULL // zero terminator
        }
    };
    return qm_tran_init(&tatbl_);
}

//${SMs::QMsmTst::SM::s} .....................................................
QP::QMState const QMsmTst::s_s = {
    QM_STATE_NULL, // superstate (top)
    &QMsmTst::s,
    &QMsmTst::s_e,
    &QMsmTst::s_x,
    &QMsmTst::s_i
};
//${SMs::QMsmTst::SM::s}
QM_ACTION_DEF(QMsmTst, s_e) {
    BSP_display("s-ENTRY;");
    return qm_entry(&s_s);
}
//${SMs::QMsmTst::SM::s}
QM_ACTION_DEF(QMsmTst, s_x) {
    BSP_display("s-EXIT;");
    // save shallow history
    hist_s = childStateObj(&s_s);
    return qm_exit(&s_s);
}
//${SMs::QMsmTst::SM::s::initial}
QM_ACTION_DEF(QMsmTst, s_i) {
    //${SMs::QMsmTst::SM::s::initial}
    BSP_display("s-INIT;");

    static struct {
        QP::QMState const *target;
        QP::QActionHandler act[3];
    } const tatbl_ = { // tran-action table
        &sub_s, // target submachine
        {
            &s1_e, // entry
            &sub_i, // initial tran.
            Q_ACTION_NULL // zero terminator
        }
    };
    return qm_tran_init(&tatbl_);
}
//${SMs::QMsmTst::SM::s}
QM_STATE_DEF(QMsmTst, s) {
    QP::QState status_;
    switch (e->sig) {
        //${SMs::QMsmTst::SM::s::E}
        case E_SIG: {
            BSP_display("s-E;");

            static struct {
                QP::QMState const *target;
                QP::QActionHandler act[3];
            } const tatbl_ = { // tran-action table
                &sub_s, // target submachine
                {
                    &s1_e, // entry
                    &sub_ep1_ep, // EP
                    Q_ACTION_NULL // zero terminator
                }
            };
            status_ = qm_tran_ep(&tatbl_);
            break;
        }
        //${SMs::QMsmTst::SM::s::I}
        case I_SIG: {
            BSP_display("s-I;");
            status_ = Q_RET_HANDLED;
            break;
        }
        //${SMs::QMsmTst::SM::s::C}
        case C_SIG: {
            BSP_display("s-C;");

            static struct {
                QP::QMState const *target;
                QP::QActionHandler act[3];
            } const tatbl_ = { // tran-action table
                &t_s, // target state
                {
                    &s_x, // exit
                    &t_e, // entry
                    Q_ACTION_NULL // zero terminator
                }
            };
            status_ = qm_tran(&tatbl_);
            break;
        }
        default: {
            status_ = Q_RET_SUPER;
            break;
        }
    }
    return status_;
}

//${SMs::QMsmTst::SM::s::s1} .................................................
QMsmTst::SM_sub const QMsmTst::s1_s = {
    {
        &QMsmTst::s_s, // superstate
        &QMsmTst::s1,
        &QMsmTst::s1_e,
        Q_ACTION_NULL, // no exit action
        &QMsmTst::sub_i // reuse from submachine
    },
    &QMsmTst::s1_xpH,
    &QMsmTst::s1_xpG
};
//${SMs::QMsmTst::SM::s::s1}
QM_ACTION_DEF(QMsmTst, s1_e) {
    sub_sub = &QMsmTst::s1_s; // attach submachine
    return sub_e(this); // enter submachine
}
//${SMs::QMsmTst::SM::s::s1}
QM_ACTION_DEF(QMsmTst, s1_xpG) {

    static struct {
        QP::QMState const *target;
        QP::QActionHandler act[3];
    } const tatbl_ = { // tran-action table
        &sub_s, // target submachine
        {
            &sub_x, // submachine exit
            &s2_e, // entry
            Q_ACTION_NULL // zero terminator
        }
    };
    return qm_tran_hist(hist_s2, &tatbl_);
}
//${SMs::QMsmTst::SM::s::s1}
QM_ACTION_DEF(QMsmTst, s1_xpH) {

    static struct {
        QP::QMState const *target;
        QP::QActionHandler act[3];
    } const tatbl_ = { // tran-action table
        &s_s, // target state
        {
            &sub_x, // submachine exit
            &s_i, // initial tran.
            Q_ACTION_NULL // zero terminator
        }
    };
    return qm_tran(&tatbl_);
}
//${SMs::QMsmTst::SM::s::s1}
QM_STATE_DEF(QMsmTst, s1) {
    QP::QState status_;
    switch (e->sig) {
        //${SMs::QMsmTst::SM::s::s1::F}
        case F_SIG: {
            BSP_display("s1-F;");

            static struct {
                QP::QMState const *target;
                QP::QActionHandler act[3];
            } const tatbl_ = { // tran-action table
                &sub_s, // target submachine
                {
                    &s2_e, // entry
                    &sub_ep1_ep, // EP
                    Q_ACTION_NULL // zero terminator
                }
            };
            status_ = qm_tran_ep(&tatbl_);
            break;
        }
        default: {
            status_ = Q_RET_SUPER;
            break;
        }
    }
    return status_;
}

//${SMs::QMsmTst::SM::s::s2} .................................................
QMsmTst::SM_sub const QMsmTst::s2_s = {
    {
        &QMsmTst::s_s, // superstate
        &QMsmTst::s2,
        &QMsmTst::s2_e,
        Q_ACTION_NULL, // no exit action
        &QMsmTst::sub_i // reuse from submachine
    },
    &QMsmTst::s2_xpH,
    &QMsmTst::s2_xpG
};
//${SMs::QMsmTst::SM::s::s2}
QM_ACTION_DEF(QMsmTst, s2_e) {
    sub_sub = &QMsmTst::s2_s; // attach submachine
    return sub_e(this); // enter submachine
}
//${SMs::QMsmTst::SM::s::s2}
QM_ACTION_DEF(QMsmTst, s2_xpH) {

    static struct {
        QP::QMState const *target;
        QP::QActionHandler act[3];
    } const tatbl_ = { // tran-action table
        &s_s, // target state
        {
            &sub_x, // submachine exit
            &s_i, // initial tran.
            Q_ACTION_NULL // zero terminator
        }
    };
    return qm_tran(&tatbl_);
}
//${SMs::QMsmTst::SM::s::s2}
QM_ACTION_DEF(QMsmTst, s2_xpG) {

    static struct {
        QP::QMState const *target;
        QP::QActionHandler act[3];
    } const tatbl_ = { // tran-action table
        &sub_s, // target submachine
        {
            &sub_x, // submachine exit
            &s1_e, // entry
            Q_ACTION_NULL // zero terminator
        }
    };
    return qm_tran_hist(hist_s1, &tatbl_);
}
//${SMs::QMsmTst::SM::s::s2}
QM_STATE_DEF(QMsmTst, s2) {
    QP::QState status_;
    switch (e->sig) {
        //${SMs::QMsmTst::SM::s::s2::F}
        case F_SIG: {
            BSP_display("s2-F;");

            static struct {
                QP::QMState const *target;
                QP::QActionHandler act[3];
            } const tatbl_ = { // tran-action table
                &sub_s, // target submachine
                {
                    &s1_e, // entry
                    &sub_ep1_ep, // EP
                    Q_ACTION_NULL // zero terminator
                }
            };
            status_ = qm_tran_ep(&tatbl_);
            break;
        }
        default: {
            status_ = Q_RET_SUPER;
            break;
        }
    }
    return status_;
}

//${SMs::QMsmTst::SM::t} .....................................................
QP::QMState const QMsmTst::t_s = {
    QM_STATE_NULL, // superstate (top)
    &QMsmTst::t,
    &QMsmTst::t_e,
    &QMsmTst::t_x,
    Q_ACTION_NULL  // no initial tran.
};
//${SMs::QMsmTst::SM::t}
QM_ACTION_DEF(QMsmTst, t_e) {
    BSP_display("t-ENTRY;");
    return qm_entry(&t_s);
}
//${SMs::QMsmTst::SM::t}
QM_ACTION_DEF(QMsmTst, t_x) {
    BSP_display("t-EXIT;");
    return qm_exit(&t_s);
}
//${SMs::QMsmTst::SM::t}
QM_STATE_DEF(QMsmTst, t) {
    QP::QState status_;
    switch (e->sig) {
        //${SMs::QMsmTst::SM::t::C}
        case C_SIG: {
            BSP_display("t-C->H-s;");

            static struct {
                QP::QMState const *target;
                QP::QActionHandler act[3];
            } const tatbl_ = { // tran-action table
                &s_s, // target state
                {
                    &t_x, // exit
                    &s_e, // entry
                    Q_ACTION_NULL // zero terminator
                }
            };
            status_ = qm_tran_hist(hist_s, &tatbl_);
            break;
        }
        default: {
            status_ = Q_RET_SUPER;
            break;
        }
    }
    return status_;
}

//${SMs::QMsmTst::SM::sub} ...................................................
//${SMs::QMsmTst::SM::sub}
QP::QMState const QMsmTst::sub_s = {
    QM_STATE_NULL, // superstate unused
    &QMsmTst::sub,
    &QMsmTst::sub_e,
    &QMsmTst::sub_x,
    &QMsmTst::sub_i
};
//${SMs::QMsmTst::SM::sub}
QM_ACTION_DEF(QMsmTst, sub_e) {
    BSP_display("sub-ENTRY;");
    return qm_entry(&sub_s);
}
//${SMs::QMsmTst::SM::sub}
QM_ACTION_DEF(QMsmTst, sub_x) {
    BSP_display("sub-EXIT;");
    return qm_sm_exit(&sub_sub->super);
}
//${SMs::QMsmTst::SM::sub::initial}
QM_ACTION_DEF(QMsmTst, sub_i) {
    //${SMs::QMsmTst::SM::sub::initial}
    BSP_display("sub-INIT;");

    static struct {
        QP::QMState const *target;
        QP::QActionHandler act[3];
    } const tatbl_ = { // tran-action table
        &sub_sub11_s, // target state
        {
            &sub_sub1_e, // entry
            &sub_sub11_e, // entry
            Q_ACTION_NULL // zero terminator
        }
    };
    return qm_tran_init(&tatbl_);
}
//${SMs::QMsmTst::SM::sub}
QM_STATE_DEF(QMsmTst, sub) {
    QP::QState status_;
    switch (e->sig) {
        //${SMs::QMsmTst::SM::sub::E}
        case E_SIG: {
            BSP_display("sub-E;");

            static struct {
                QP::QMState const *target;
                QP::QActionHandler act[2];
            } const tatbl_ = { // tran-action table
                &sub_sub2_s, // target state
                {
                    &sub_sub2_e, // entry
                    Q_ACTION_NULL // zero terminator
                }
            };
            status_ = qm_tran(&tatbl_);
            break;
        }
        //${SMs::QMsmTst::SM::sub::I}
        case I_SIG: {
            //${SMs::QMsmTst::SM::sub::I::[m_foo]}
            if (m_foo) {
                m_foo = 0U;
                BSP_display("sub-I;");
                status_ = Q_RET_HANDLED;
            }
            else {
                status_ = qm_super_sub(&sub_sub->super);
            }
            break;
        }
        default: {
            status_ = qm_super_sub(&sub_sub->super);
            break;
        }
    }
    return status_;
}
//${SMs::QMsmTst::SM::sub::EP-ep1}
QM_ACTION_DEF(QMsmTst, sub_ep1_ep) {
    BSP_display("sub-ep1;");

    static struct {
        QP::QMState const *target;
        QP::QActionHandler act[3];
    } const tatbl_ = { // tran-action table
        &sub_sub1_s, // target state
        {
            &sub_sub1_e, // entry
            &sub_sub1_i, // initial tran.
            Q_ACTION_NULL // zero terminator
        }
    };
    return qm_tran_ep(&tatbl_);
}

//${SMs::QMsmTst::SM::sub::sub1} .............................................
QP::QMState const QMsmTst::sub_sub1_s = {
    &QMsmTst::sub_s, // superstate
    &QMsmTst::sub_sub1,
    &QMsmTst::sub_sub1_e,
    &QMsmTst::sub_sub1_x,
    &QMsmTst::sub_sub1_i
};
//${SMs::QMsmTst::SM::sub::sub1}
QM_ACTION_DEF(QMsmTst, sub_sub1_e) {
    BSP_display("sub1-ENTRY;");
    return qm_entry(&sub_sub1_s);
}
//${SMs::QMsmTst::SM::sub::sub1}
QM_ACTION_DEF(QMsmTst, sub_sub1_x) {
    BSP_display("sub1-EXIT;");
    return qm_exit(&sub_sub1_s);
}
//${SMs::QMsmTst::SM::sub::sub1::initial}
QM_ACTION_DEF(QMsmTst, sub_sub1_i) {
    //${SMs::QMsmTst::SM::sub::sub1::initial}
    BSP_display("sub1-INIT;");

    static struct {
        QP::QMState const *target;
        QP::QActionHandler act[2];
    } const tatbl_ = { // tran-action table
        &sub_sub11_s, // target state
        {
            &sub_sub11_e, // entry
            Q_ACTION_NULL // zero terminator
        }
    };
    return qm_tran_init(&tatbl_);
}
//${SMs::QMsmTst::SM::sub::sub1}
QM_STATE_DEF(QMsmTst, sub_sub1) {
    QP::QState status_;
    switch (e->sig) {
        //${SMs::QMsmTst::SM::sub::sub1::A}
        case A_SIG: {
            BSP_display("sub1-A;");

            static struct {
                QP::QMState const *target;
                QP::QActionHandler act[4];
            } const tatbl_ = { // tran-action table
                &sub_sub1_s, // target state
                {
                    &sub_sub1_x, // exit
                    &sub_sub1_e, // entry
                    &sub_sub1_i, // initial tran.
                    Q_ACTION_NULL // zero terminator
                }
            };
            status_ = qm_tran(&tatbl_);
            break;
        }
        //${SMs::QMsmTst::SM::sub::sub1::B}
        case B_SIG: {
            BSP_display("sub1-B;");

            static struct {
                QP::QMState const *target;
                QP::QActionHandler act[2];
            } const tatbl_ = { // tran-action table
                &sub_sub11_s, // target state
                {
                    &sub_sub11_e, // entry
                    Q_ACTION_NULL // zero terminator
                }
            };
            status_ = qm_tran(&tatbl_);
            break;
        }
        //${SMs::QMsmTst::SM::sub::sub1::D}
        case D_SIG: {
            //${SMs::QMsmTst::SM::sub::sub1::D::[!m_foo]}
            if (!m_foo) {
                m_foo = 1U;
                BSP_display("sub1-D;");

                static struct {
                    QP::QMState const *target;
                    QP::QActionHandler act[3];
                } const tatbl_ = { // tran-action table
                    &sub_s, // target submachine
                    {
                        &sub_sub1_x, // exit
                        &sub_i, // initial tran.
                        Q_ACTION_NULL // zero terminator
                    }
                };
                status_ = qm_tran(&tatbl_);
            }
            else {
                status_ = Q_RET_UNHANDLED;
            }
            break;
        }
        //${SMs::QMsmTst::SM::sub::sub1::G}
        case G_SIG: {
            BSP_display("sub1-G->xpG;");

            static struct {
                QP::QMState const *target;
                QP::QActionHandler act[2];
            } const tatbl_ = { // tran-action table
                &sub_s, // target submachine
                {
                    &sub_sub1_x, // exit
                    Q_ACTION_NULL // zero terminator
                }
            };
            status_ = qm_tran_xp(sub_sub->xpG, &tatbl_);
            break;
        }
        default: {
            status_ = Q_RET_SUPER;
            break;
        }
    }
    return status_;
}

//${SMs::QMsmTst::SM::sub::sub1::sub11} ......................................
QP::QMState const QMsmTst::sub_sub11_s = {
    &QMsmTst::sub_sub1_s, // superstate
    &QMsmTst::sub_sub11,
    &QMsmTst::sub_sub11_e,
    &QMsmTst::sub_sub11_x,
    Q_ACTION_NULL  // no initial tran.
};
//${SMs::QMsmTst::SM::sub::sub1::sub11}
QM_ACTION_DEF(QMsmTst, sub_sub11_e) {
    BSP_display("sub11-ENTRY;");
    return qm_entry(&sub_sub11_s);
}
//${SMs::QMsmTst::SM::sub::sub1::sub11}
QM_ACTION_DEF(QMsmTst, sub_sub11_x) {
    BSP_display("sub11-EXIT;");
    return qm_exit(&sub_sub11_s);
}
//${SMs::QMsmTst::SM::sub::sub1::sub11}
QM_STATE_DEF(QMsmTst, sub_sub11) {
    QP::QState status_;
    switch (e->sig) {
        //${SMs::QMsmTst::SM::sub::sub1::sub11::C}
        case C_SIG: {
            BSP_display("sub11-C;");

            static struct {
                QP::QMState const *target;
                QP::QActionHandler act[3];
            } const tatbl_ = { // tran-action table
                &sub_sub12_s, // target state
                {
                    &sub_sub11_x, // exit
                    &sub_sub12_e, // entry
                    Q_ACTION_NULL // zero terminator
                }
            };
            status_ = qm_tran(&tatbl_);
            break;
        }
        default: {
            status_ = Q_RET_SUPER;
            break;
        }
    }
    return status_;
}

//${SMs::QMsmTst::SM::sub::sub1::sub12} ......................................
QP::QMState const QMsmTst::sub_sub12_s = {
    &QMsmTst::sub_sub1_s, // superstate
    &QMsmTst::sub_sub12,
    &QMsmTst::sub_sub12_e,
    &QMsmTst::sub_sub12_x,
    Q_ACTION_NULL  // no initial tran.
};
//${SMs::QMsmTst::SM::sub::sub1::sub12}
QM_ACTION_DEF(QMsmTst, sub_sub12_e) {
    BSP_display("sub12-ENTRY;");
    return qm_entry(&sub_sub12_s);
}
//${SMs::QMsmTst::SM::sub::sub1::sub12}
QM_ACTION_DEF(QMsmTst, sub_sub12_x) {
    BSP_display("sub12-EXIT;");
    return qm_exit(&sub_sub12_s);
}
//${SMs::QMsmTst::SM::sub::sub1::sub12}
QM_STATE_DEF(QMsmTst, sub_sub12) {
    QP::QState status_;
    switch (e->sig) {
        //${SMs::QMsmTst::SM::sub::sub1::sub12::H}
        case H_SIG: {
            BSP_display("sub12-H->xpH;");

            static struct {
                QP::QMState const *target;
                QP::QActionHandler act[3];
            } const tatbl_ = { // tran-action table
                &sub_s, // target submachine
                {
                    &sub_sub12_x, // exit
                    &sub_sub1_x, // exit
                    Q_ACTION_NULL // zero terminator
                }
            };
            status_ = qm_tran_xp(sub_sub->xpH, &tatbl_);
            break;
        }
        default: {
            status_ = Q_RET_SUPER;
            break;
        }
    }
    return status_;
}

//${SMs::QMsmTst::SM::sub::sub2} .............................................
QP::QMState const QMsmTst::sub_sub2_s = {
    &QMsmTst::sub_s, // superstate
    &QMsmTst::sub_sub2,
    &QMsmTst::sub_sub2_e,
    &QMsmTst::sub_sub2_x,
    Q_ACTION_NULL  // no initial tran.
};
//${SMs::QMsmTst::SM::sub::sub2}
QM_ACTION_DEF(QMsmTst, sub_sub2_e) {
    BSP_display("sub2-ENTRY;");
    return qm_entry(&sub_sub2_s);
}
//${SMs::QMsmTst::SM::sub::sub2}
QM_ACTION_DEF(QMsmTst, sub_sub2_x) {
    BSP_display("sub2-EXIT;");
    return qm_exit(&sub_sub2_s);
}
//${SMs::QMsmTst::SM::sub::sub2}
QM_STATE_DEF(QMsmTst, sub_sub2) {
    QP::QState status_;
    switch (e->sig) {
        default: {
            status_ = Q_RET_SUPER;
            break;
        }
    }
    return status_;
}
//$enddef${SMs::QMsmTst} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

bool QMsmTst_isIn(std::uint32_t const state_num) {
    QP::QMsm * const me = &l_msmtst;
    bool stat = false;
    switch (state_num) {
    case 0:
        stat = me->isIn(Q_STATE_CAST(&QMsmTst::s));
        break;
    case 1:
        stat = me->isIn(Q_STATE_CAST(&QMsmTst::s1));
        break;
    case 2:
        stat = me->isIn(Q_STATE_CAST(&QMsmTst::s2));
        break;
    case 11:
        stat = me->isIn(Q_STATE_CAST(&QMsmTst::sub_sub1));
        break;
    case 111:
        stat = me->isIn(Q_STATE_CAST(&QMsmTst::sub_sub11));
        break;
    case 112:
        stat = me->isIn(Q_STATE_CAST(&QMsmTst::sub_sub12));
        break;
    case 12:
        stat = me->isIn(Q_STATE_CAST(&QMsmTst::sub_sub2));
        break;
    default:
        Q_ERROR();
    }
    return stat;
}

} // namespace APP
