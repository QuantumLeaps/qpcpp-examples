        -:    0:Source:../../../../include/qp.hpp
        -:    0:Graph:build/qep_msm.gcno
        -:    0:Data:build/qep_msm.gcda
        -:    0:Runs:6
        -:    1://$file${include::qp.hpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
        -:    2://
        -:    3:// Model: qpcpp.qm
        -:    4:// File:  ${include::qp.hpp}
        -:    5://
        -:    6:// This code has been generated by QM 7.0.0 <www.state-machine.com/qm>.
        -:    7:// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
        -:    8://
        -:    9:// This generated code is covered by the following QP license:
        -:   10:// License #    : LicenseRef-QL-dual
        -:   11:// Issued to    : General public
        -:   12:// Framework(s) : qpcpp
        -:   13:// Support ends : 2025-12-31
        -:   14://
        -:   15:// Copyright (C) 2005 Quantum Leaps, LLC. All rights reserved.
        -:   16://
        -:   17://                    Q u a n t u m  L e a P s
        -:   18://                    ------------------------
        -:   19://                    Modern Embedded Software
        -:   20://
        -:   21:// SPDX-License-Identifier: GPL-3.0-or-later OR LicenseRef-QL-commercial
        -:   22://
        -:   23:// The QP/C++ software is dual-licensed under the terms of the open-source
        -:   24:// GNU General Public License (GPL) or under the terms of one of the closed-
        -:   25:// source Quantum Leaps commercial licenses.
        -:   26://
        -:   27:// Redistributions in source code must retain this top-level comment block.
        -:   28:// Plagiarizing this software to sidestep the license obligations is illegal.
        -:   29://
        -:   30:// NOTE:
        -:   31:// The GPL (see <www.gnu.org/licenses/gpl-3.0>) does NOT permit the
        -:   32:// incorporation of the QP/C++ software into proprietary programs. Please
        -:   33:// contact Quantum Leaps for commercial licensing options, which expressly
        -:   34:// supersede the GPL and are designed explicitly for licensees interested
        -:   35:// in using QP/C++ in closed-source proprietary applications.
        -:   36://
        -:   37:// Quantum Leaps contact information:
        -:   38:// <www.state-machine.com/licensing>
        -:   39:// <info@state-machine.com>
        -:   40://
        -:   41://$endhead${include::qp.hpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        -:   42:#ifndef QP_HPP_
        -:   43:#define QP_HPP_
        -:   44:
        -:   45://============================================================================
        -:   46:#define QP_VERSION_STR "7.5.0-alpha"
        -:   47:#define QP_VERSION     750U
        -:   48:#define QP_RELEASE     0x7064FCF1U
        -:   49:
        -:   50://============================================================================
        -:   51://! @cond INTERNAL
        -:   52:
        -:   53:#ifndef Q_SIGNAL_SIZE
        -:   54:#define Q_SIGNAL_SIZE 2U
        -:   55:#endif // ndef Q_SIGNAL_SIZE
        -:   56:
        -:   57:#ifndef QF_MAX_ACTIVE
        -:   58:#define QF_MAX_ACTIVE 32U
        -:   59:#endif
        -:   60:
        -:   61:#if (QF_MAX_ACTIVE > 64U)
        -:   62:#error QF_MAX_ACTIVE exceeds the maximum of 64U;
        -:   63:#endif
        -:   64:
        -:   65:#ifndef QF_MAX_TICK_RATE
        -:   66:#define QF_MAX_TICK_RATE 1U
        -:   67:#endif
        -:   68:
        -:   69:#if (QF_MAX_TICK_RATE > 15U)
        -:   70:#error QF_MAX_TICK_RATE exceeds the maximum of 15U;
        -:   71:#endif
        -:   72:
        -:   73:#ifndef QF_MAX_EPOOL
        -:   74:#define QF_MAX_EPOOL 3U
        -:   75:#endif
        -:   76:
        -:   77:#if (QF_MAX_EPOOL > 15U)
        -:   78:#error QF_MAX_EPOOL exceeds the maximum of 15U;
        -:   79:#endif
        -:   80:
        -:   81:#ifndef QF_TIMEEVT_CTR_SIZE
        -:   82:#define QF_TIMEEVT_CTR_SIZE 4U
        -:   83:#endif
        -:   84:
        -:   85:#if (QF_TIMEEVT_CTR_SIZE > 4U)
        -:   86:#error QF_TIMEEVT_CTR_SIZE defined incorrectly, expected 1U, 2U, or 4U;
        -:   87:#endif
        -:   88:
        -:   89:#ifndef QF_EVENT_SIZ_SIZE
        -:   90:#define QF_EVENT_SIZ_SIZE 2U
        -:   91:#endif
        -:   92:
        -:   93:#if (QF_EVENT_SIZ_SIZE > 4U)
        -:   94:#error QF_EVENT_SIZ_SIZE defined incorrectly, expected 1U, 2U, or 4U;
        -:   95:#endif
        -:   96:
        -:   97://! @endcond
        -:   98://============================================================================
        -:   99://$declare${glob-types} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
        -:  100:
        -:  101://${glob-types::int_t} .......................................................
        -:  102:using int_t  = int;
        -:  103:
        -:  104://${glob-types::enum_t} ......................................................
        -:  105:using enum_t  = int;
        -:  106:
        -:  107://${glob-types::float32_t} ...................................................
        -:  108:using float32_t  = float;
        -:  109:
        -:  110://${glob-types::float64_t} ...................................................
        -:  111:using float64_t  = double;
        -:  112://$enddecl${glob-types} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        -:  113:
        -:  114://$declare${QEP} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
        -:  115:namespace QP {
        -:  116:
        -:  117://${QEP::versionStr[]} .......................................................
        -:  118:constexpr char const versionStr[] {QP_VERSION_STR};
        -:  119:
        -:  120://${QEP::QSignal} ............................................................
        -:  121:#if (Q_SIGNAL_SIZE == 1U)
        -:  122:using QSignal = std::uint8_t;
        -:  123:#endif //  (Q_SIGNAL_SIZE == 1U)
        -:  124:
        -:  125://${QEP::QSignal} ............................................................
        -:  126:#if (Q_SIGNAL_SIZE == 2U)
        -:  127:using QSignal = std::uint16_t;
        -:  128:#endif //  (Q_SIGNAL_SIZE == 2U)
        -:  129:
        -:  130://${QEP::QSignal} ............................................................
        -:  131:#if (Q_SIGNAL_SIZE == 4U)
        -:  132:using QSignal = std::uint32_t;
        -:  133:#endif //  (Q_SIGNAL_SIZE == 4U)
        -:  134:
        -:  135://${QEP::QEvt} ...............................................................
        -:  136:class QEvt {
        -:  137:public:
        -:  138:    QSignal sig;
        -:  139:    std::uint8_t volatile refCtr_;
        -:  140:    std::uint8_t evtTag_;
        -:  141:
        -:  142:public:
        -:  143:    static constexpr std::uint8_t MARKER {0xE0U};
        -:  144:    enum DynEvt: std::uint8_t { DYNAMIC };
        -:  145:
        -:  146:public:
        -:  147:    explicit constexpr QEvt(QSignal const s) noexcept
        -:  148:      : sig(s),
        -:  149:        refCtr_(0U),
        -:  150:        evtTag_(MARKER)
        -:  151:    {}
        -:  152:    QEvt() = delete;
        -:  153:    void init() noexcept {
        -:  154:        // no event parameters to initialize
        -:  155:    }
        -:  156:    void init(DynEvt const dummy) noexcept {
        -:  157:        static_cast<void>(dummy);
        -:  158:        // no event parameters to initialize
        -:  159:    }
       41:  160:    static bool verify_(QEvt const * const e) noexcept {
       41:  161:        return (e != nullptr)
       41:  162:               && ((e->evtTag_ & 0xF0U) == MARKER);
        -:  163:    }
        -:  164:    std::uint_fast8_t getPoolNum_() const noexcept {
        -:  165:        return static_cast<std::uint8_t>(evtTag_) & 0x0FU;
        -:  166:    }
        -:  167:}; // class QEvt
        -:  168:
        -:  169://${QEP::QState} .............................................................
        -:  170:using QState = std::uint_fast8_t;
        -:  171:
        -:  172://${QEP::QStateHandler} ......................................................
        -:  173:using QStateHandler = QState (*)(void * const me, QEvt const * const e);
        -:  174:
        -:  175://${QEP::QActionHandler} .....................................................
        -:  176:using QActionHandler = QState (*)(void * const me);
        -:  177:
        -:  178://${QEP::QXThread} ...........................................................
        -:  179:// forward declaration
        -:  180:class QXThread;
        -:  181:
        -:  182://${QEP::QXThreadHandler} ....................................................
        -:  183:using QXThreadHandler = void (*)(QXThread * const me);
        -:  184:
        -:  185://${QEP::QMState} ............................................................
        -:  186:struct QMState {
        -:  187:    QMState const * superstate;
        -:  188:    QStateHandler const stateHandler;
        -:  189:    QActionHandler const entryAction;
        -:  190:    QActionHandler const exitAction;
        -:  191:    QActionHandler const initAction;
        -:  192:};
        -:  193:
        -:  194://${QEP::QMTranActTable} .....................................................
        -:  195:struct QMTranActTable {
        -:  196:    QMState  const * target;
        -:  197:    QActionHandler const act[1];
        -:  198:};
        -:  199:
        -:  200://${QEP::QAsmAttr} ...........................................................
        -:  201:union QAsmAttr {
        -:  202:    QStateHandler   fun;
        -:  203:    QActionHandler  act;
        -:  204:    QXThreadHandler thr;
        -:  205:    QMState         const *obj;
        -:  206:    QMTranActTable  const *tatbl;
        -:  207:#ifndef Q_UNSAFE
        -:  208:    std::uintptr_t  uint;
        -:  209:#endif
        6:  210:    constexpr QAsmAttr() : fun(nullptr) {}
        -:  211:};
        -:  212:
        -:  213://${QEP::Q_USER_SIG} .........................................................
        -:  214:constexpr enum_t  Q_USER_SIG {4};
        -:  215:
        -:  216://${QEP::QAsm} ...............................................................
        -:  217:class QAsm {
        -:  218:protected:
        -:  219:    QAsmAttr m_state;
        -:  220:    QAsmAttr m_temp;
        -:  221:
        -:  222:public:
        -:  223:
        -:  224:    //! All possible return values from state-handlers
        -:  225:    //! @note
        -:  226:    //! The order is important for algorithmic correctness.
        -:  227:    enum QStateRet : QState {
        -:  228:        // unhandled and need to "bubble up"
        -:  229:        Q_RET_SUPER,     //!< event passed to superstate to handle
        -:  230:        Q_RET_UNHANDLED, //!< event unhandled due to a guard
        -:  231:
        -:  232:        // handled and do not need to "bubble up"
        -:  233:        Q_RET_HANDLED,   //!< event handled (internal transition)
        -:  234:        Q_RET_IGNORED,   //!< event silently ignored (bubbled up to top)
        -:  235:
        -:  236:        // entry/exit
        -:  237:        Q_RET_ENTRY,     //!< state entry action executed
        -:  238:        Q_RET_EXIT,      //!< state exit  action executed
        -:  239:
        -:  240:        // no side effects
        -:  241:        Q_RET_NULL,      //!< return value without any effect
        -:  242:
        -:  243:        // transitions need to execute transition-action table in QP::QMsm
        -:  244:        Q_RET_TRAN,      //!< regular transition
        -:  245:        Q_RET_TRAN_INIT, //!< initial transition in a state
        -:  246:
        -:  247:        // transitions that additionally clobber QHsm.m_state
        -:  248:        Q_RET_TRAN_HIST, //!< transition to history of a given state
        -:  249:    };
        -:  250:
        -:  251:    //! Reserved signals by the QP-framework.
        -:  252:    enum ReservedSig : QSignal {
        -:  253:        Q_EMPTY_SIG,     //!< signal to execute the default case
        -:  254:        Q_ENTRY_SIG,     //!< signal for entry actions
        -:  255:        Q_EXIT_SIG,      //!< signal for exit actions
        -:  256:        Q_INIT_SIG       //!< signal for nested initial transitions
        -:  257:    };
        -:  258:
        -:  259:protected:
        6:  260:    explicit QAsm() noexcept
        6:  261:      : m_state(),
        6:  262:        m_temp ()
        -:  263:    {}
        -:  264:
        -:  265:public:
        -:  266:
        -:  267:#ifdef Q_XTOR
        -:  268:    virtual ~QAsm() noexcept {
        -:  269:        // empty
        -:  270:    }
        -:  271:#endif // def Q_XTOR
        -:  272:    virtual void init(
        -:  273:        void const * const e,
        -:  274:        std::uint_fast8_t const qsId) = 0;
        -:  275:    virtual void init(std::uint_fast8_t const qsId) {
        -:  276:        this->init(nullptr, qsId);
        -:  277:    }
        -:  278:    virtual void dispatch(
        -:  279:        QEvt const * const e,
        -:  280:        std::uint_fast8_t const qsId) = 0;
        -:  281:    virtual bool isIn(QStateHandler const state) noexcept {
        -:  282:        static_cast<void>(state);
        -:  283:        return false;
        -:  284:    }
        -:  285:    QStateHandler state() const noexcept {
        -:  286:        return m_state.fun;
        -:  287:    }
        -:  288:    QMState const * stateObj() const noexcept {
        -:  289:        return m_state.obj;
        -:  290:    }
        -:  291:
        -:  292:#ifdef Q_SPY
        -:  293:    virtual QStateHandler getStateHandler() noexcept {
        -:  294:        return m_state.fun;
        -:  295:    }
        -:  296:#endif // def Q_SPY
        -:  297:    static QState top(
        -:  298:        void * const me,
        -:  299:        QEvt const * const e) noexcept
        -:  300:    {
        -:  301:        static_cast<void>(me);
        -:  302:        static_cast<void>(e);
        -:  303:        return Q_RET_IGNORED; // the top state ignores all events
        -:  304:    }
        -:  305:
        -:  306:protected:
        -:  307:    QState tran(QStateHandler const target) noexcept {
        -:  308:        m_temp.fun = target;
        -:  309:        return Q_RET_TRAN;
        -:  310:    }
        -:  311:    QState tran_hist(QStateHandler const hist) noexcept {
        -:  312:        m_temp.fun = hist;
        -:  313:        return Q_RET_TRAN_HIST;
        -:  314:    }
        -:  315:    QState super(QStateHandler const superstate) noexcept {
        -:  316:        m_temp.fun = superstate;
        -:  317:        return Q_RET_SUPER;
        -:  318:    }
        -:  319:    QState qm_tran(void const * const tatbl) noexcept {
        -:  320:        m_temp.tatbl = static_cast<QP::QMTranActTable const *>(tatbl);
        -:  321:        return Q_RET_TRAN;
        -:  322:    }
        -:  323:    QState qm_tran_init(void const * const tatbl) noexcept {
        -:  324:        m_temp.tatbl = static_cast<QP::QMTranActTable const *>(tatbl);
        -:  325:        return Q_RET_TRAN_INIT;
        -:  326:    }
        -:  327:    QState qm_tran_hist(
        -:  328:        QMState const * const hist,
        -:  329:        void const * const tatbl) noexcept
        -:  330:    {
        -:  331:        m_state.obj  = hist;
        -:  332:        m_temp.tatbl = static_cast<QP::QMTranActTable const *>(tatbl);
        -:  333:        return Q_RET_TRAN_HIST;
        -:  334:    }
        -:  335:
        -:  336:#ifdef Q_SPY
        -:  337:    QState qm_entry(QMState const * const s) noexcept {
        -:  338:        m_temp.obj = s;
        -:  339:        return Q_RET_ENTRY;
        -:  340:    }
        -:  341:#endif // def Q_SPY
        -:  342:
        -:  343:#ifndef Q_SPY
        -:  344:    QState qm_entry(QMState const * const s) noexcept {
        -:  345:        static_cast<void>(s); // unused parameter
        -:  346:        return Q_RET_ENTRY;
        -:  347:    }
        -:  348:#endif // ndef Q_SPY
        -:  349:
        -:  350:#ifdef Q_SPY
        -:  351:    QState qm_exit(QMState const * const s) noexcept {
        -:  352:        m_temp.obj = s;
        -:  353:        return Q_RET_EXIT;
        -:  354:    }
        -:  355:#endif // def Q_SPY
        -:  356:
        -:  357:#ifndef Q_SPY
        -:  358:    QState qm_exit(QMState const * const s) noexcept {
        -:  359:        static_cast<void>(s); // unused parameter
        -:  360:        return Q_RET_EXIT;
        -:  361:    }
        -:  362:#endif // ndef Q_SPY
        -:  363:}; // class QAsm
        -:  364:
        -:  365://${QEP::QHsm} ...............................................................
        -:  366:class QHsm : public QP::QAsm {
        -:  367:protected:
        -:  368:    explicit QHsm(QStateHandler const initial) noexcept;
        -:  369:
        -:  370:public:
        -:  371:    void init(
        -:  372:        void const * const e,
        -:  373:        std::uint_fast8_t const qsId) override;
        -:  374:    void init(std::uint_fast8_t const qsId) override {
        -:  375:        this->init(nullptr, qsId);
        -:  376:    }
        -:  377:    void dispatch(
        -:  378:        QEvt const * const e,
        -:  379:        std::uint_fast8_t const qsId) override;
        -:  380:    bool isIn(QStateHandler const state) noexcept override;
        -:  381:    QStateHandler childState(QStateHandler const parent) noexcept;
        -:  382:
        -:  383:#ifdef Q_SPY
        -:  384:    QStateHandler getStateHandler() noexcept override {
        -:  385:        return m_state.fun;
        -:  386:    }
        -:  387:#endif // def Q_SPY
        -:  388:
        -:  389:private:
        -:  390:    std::int_fast8_t hsm_tran(
        -:  391:        QStateHandler * const path,
        -:  392:        std::uint_fast8_t const qsId);
        -:  393:}; // class QHsm
        -:  394:
        -:  395://${QEP::QMsm} ...............................................................
        -:  396:class QMsm : public QP::QAsm {
        -:  397:protected:
        -:  398:    explicit QMsm(QStateHandler const initial) noexcept;
        -:  399:
        -:  400:public:
        -:  401:    void init(
        -:  402:        void const * const e,
        -:  403:        std::uint_fast8_t const qsId) override;
    #####:  404:    void init(std::uint_fast8_t const qsId) override {
    #####:  405:        this->init(nullptr, qsId);
    #####:  406:    }
        -:  407:    void dispatch(
        -:  408:        QEvt const * const e,
        -:  409:        std::uint_fast8_t const qsId) override;
        -:  410:
        -:  411:#ifdef Q_SPY
    #####:  412:    QStateHandler getStateHandler() noexcept override {
    #####:  413:        return m_state.obj->stateHandler;
        -:  414:    }
        -:  415:#endif // def Q_SPY
        -:  416:    bool isIn(QStateHandler const state) noexcept override;
        -:  417:    QMState const * childStateObj(QMState const * const parent) const noexcept;
        -:  418:
        -:  419:private:
        -:  420:    QState execTatbl_(
        -:  421:        QMTranActTable const * const tatbl,
        -:  422:        std::uint_fast8_t const qsId);
        -:  423:    void exitToTranSource_(
        -:  424:        QMState const * const cs,
        -:  425:        QMState const * const ts,
        -:  426:        std::uint_fast8_t const qsId);
        -:  427:    QState enterHistory_(
        -:  428:        QMState const * const hist,
        -:  429:        std::uint_fast8_t const qsId);
        -:  430:
        -:  431:public:
        -:  432:    QMState const * topQMState() const noexcept;
        -:  433:}; // class QMsm
        -:  434:
        -:  435:} // namespace QP
        -:  436://$enddecl${QEP} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        -:  437:
        -:  438://$declare${QEP-macros} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
        -:  439:
        -:  440://${QEP-macros::Q_STATE_DECL} ................................................
        -:  441:#define Q_STATE_DECL(state_) \
        -:  442:    QP::QState state_ ## _h(QP::QEvt const * const e); \
        -:  443:    static QP::QState state_(void * const me, QP::QEvt const * const e)
        -:  444:
        -:  445://${QEP-macros::Q_STATE_DEF} .................................................
        -:  446:#define Q_STATE_DEF(subclass_, state_) \
        -:  447:    QP::QState subclass_::state_(void * const me, QP::QEvt const * const e) { \
        -:  448:        return static_cast<subclass_ *>(me)->state_ ## _h(e); } \
        -:  449:    QP::QState subclass_::state_ ## _h(QP::QEvt const * const e)
        -:  450:
        -:  451://${QEP-macros::Q_HANDLED} ...................................................
        -:  452:#define Q_HANDLED() (Q_RET_HANDLED)
        -:  453:
        -:  454://${QEP-macros::Q_UNHANDLED} .................................................
        -:  455:#define Q_UNHANDLED() (Q_RET_UNHANDLED)
        -:  456:
        -:  457://${QEP-macros::Q_EVT_CAST} ..................................................
        -:  458:#define Q_EVT_CAST(subclass_) (static_cast<subclass_ const *>(e))
        -:  459:
        -:  460://${QEP-macros::Q_STATE_CAST} ................................................
        -:  461:#define Q_STATE_CAST(handler_) \
        -:  462:    (reinterpret_cast<QP::QStateHandler>(handler_))
        -:  463:
        -:  464://${QEP-macros::QM_STATE_DECL} ...............................................
        -:  465:#define QM_STATE_DECL(state_) \
        -:  466:    QP::QState state_ ## _h(QP::QEvt const * const e); \
        -:  467:    static QP::QState state_(void * const me, QP::QEvt const * const e); \
        -:  468:    static QP::QMState const state_ ## _s
        -:  469:
        -:  470://${QEP-macros::QM_ACTION_DECL} ..............................................
        -:  471:#define QM_ACTION_DECL(action_) \
        -:  472:    QP::QState action_ ## _h(); \
        -:  473:    static QP::QState action_(void * const me)
        -:  474:
        -:  475://${QEP-macros::QM_STATE_DEF} ................................................
        -:  476:#define QM_STATE_DEF(subclass_, state_) \
        -:  477:    QP::QState subclass_::state_(void * const me, QP::QEvt const * const e) {\
        -:  478:        return static_cast<subclass_ *>(me)->state_ ## _h(e); } \
        -:  479:    QP::QState subclass_::state_ ## _h(QP::QEvt const * const e)
        -:  480:
        -:  481://${QEP-macros::QM_ACTION_DEF} ...............................................
        -:  482:#define QM_ACTION_DEF(subclass_, action_)  \
        -:  483:    QP::QState subclass_::action_(void * const me) { \
        -:  484:        return static_cast<subclass_ *>(me)->action_ ## _h(); } \
        -:  485:    QP::QState subclass_::action_ ## _h()
        -:  486:
        -:  487://${QEP-macros::QM_HANDLED} ..................................................
        -:  488:#define QM_HANDLED() (Q_RET_HANDLED)
        -:  489:
        -:  490://${QEP-macros::QM_UNHANDLED} ................................................
        -:  491:#define QM_UNHANDLED() (Q_RET_HANDLED)
        -:  492:
        -:  493://${QEP-macros::QM_SUPER} ....................................................
        -:  494:#define QM_SUPER() (Q_RET_SUPER)
        -:  495:
        -:  496://${QEP-macros::QM_STATE_NULL} ...............................................
        -:  497:#define QM_STATE_NULL (nullptr)
        -:  498:
        -:  499://${QEP-macros::Q_ACTION_NULL} ...............................................
        -:  500:#define Q_ACTION_NULL (nullptr)
        -:  501:
        -:  502://${QEP-macros::Q_UNUSED_PAR} ................................................
        -:  503:#define Q_UNUSED_PAR(par_) (static_cast<void>(par_))
        -:  504:
        -:  505://${QEP-macros::Q_DIM} .......................................................
        -:  506:#define Q_DIM(array_) (sizeof(array_) / sizeof((array_)[0U]))
        -:  507:
        -:  508://${QEP-macros::Q_UINT2PTR_CAST} .............................................
        -:  509:#define Q_UINT2PTR_CAST(type_, uint_) (reinterpret_cast<type_ *>(uint_))
        -:  510:
        -:  511://${QEP-macros::INIT} ........................................................
        -:  512:#ifdef Q_SPY
        -:  513:#define INIT(qsId_) init((qsId_))
        -:  514:#endif // def Q_SPY
        -:  515:
        -:  516://${QEP-macros::INIT} ........................................................
        -:  517:#ifndef Q_SPY
        -:  518:#define INIT(dummy) init(0U)
        -:  519:#endif // ndef Q_SPY
        -:  520:
        -:  521://${QEP-macros::DISPATCH} ....................................................
        -:  522:#ifdef Q_SPY
        -:  523:#define DISPATCH(e_, qsId_) dispatch((e_), (qsId_))
        -:  524:#endif // def Q_SPY
        -:  525:
        -:  526://${QEP-macros::DISPATCH} ....................................................
        -:  527:#ifndef Q_SPY
        -:  528:#define DISPATCH(e_, dummy) dispatch((e_), 0U)
        -:  529:#endif // ndef Q_SPY
        -:  530://$enddecl${QEP-macros} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        -:  531:
        -:  532://$declare${QF::types} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
        -:  533:namespace QP {
        -:  534:
        -:  535://${QF::types::QPrioSpec} ....................................................
        -:  536:using QPrioSpec = std::uint16_t;
        -:  537:
        -:  538://${QF::types::QTimeEvtCtr} ..................................................
        -:  539:#if (QF_TIMEEVT_CTR_SIZE == 1U)
        -:  540:using QTimeEvtCtr = std::uint8_t;
        -:  541:#endif //  (QF_TIMEEVT_CTR_SIZE == 1U)
        -:  542:
        -:  543://${QF::types::QTimeEvtCtr} ..................................................
        -:  544:#if (QF_TIMEEVT_CTR_SIZE == 2U)
        -:  545:using QTimeEvtCtr = std::uint16_t;
        -:  546:#endif //  (QF_TIMEEVT_CTR_SIZE == 2U)
        -:  547:
        -:  548://${QF::types::QTimeEvtCtr} ..................................................
        -:  549:#if (QF_TIMEEVT_CTR_SIZE == 4U)
        -:  550:using QTimeEvtCtr = std::uint32_t;
        -:  551:#endif //  (QF_TIMEEVT_CTR_SIZE == 4U)
        -:  552:
        -:  553://${QF::types::QPSetBits} ....................................................
        -:  554:#if (QF_MAX_ACTIVE <= 8U)
        -:  555:using QPSetBits = std::uint8_t;
        -:  556:#endif //  (QF_MAX_ACTIVE <= 8U)
        -:  557:
        -:  558://${QF::types::QPSetBits} ....................................................
        -:  559:#if (8U < QF_MAX_ACTIVE) && (QF_MAX_ACTIVE <= 16U)
        -:  560:using QPSetBits = std::uint16_t;
        -:  561:#endif //  (8U < QF_MAX_ACTIVE) && (QF_MAX_ACTIVE <= 16U)
        -:  562:
        -:  563://${QF::types::QPSetBits} ....................................................
        -:  564:#if (16 < QF_MAX_ACTIVE)
        -:  565:using QPSetBits = std::uint32_t;
        -:  566:#endif //  (16 < QF_MAX_ACTIVE)
        -:  567:
        -:  568://${QF::types::QF_LOG2} ......................................................
        -:  569:#ifndef QF_LOG2
        -:  570:std::uint_fast8_t QF_LOG2(QP::QPSetBits x) noexcept;
        -:  571:#endif // ndef QF_LOG2
        -:  572:
        -:  573://${QF::types::QPSet} ........................................................
        -:  574:class QPSet {
        -:  575:private:
        -:  576:    QPSetBits m_bits[((QF_MAX_ACTIVE + (8U*sizeof(QPSetBits))) - 1U)/(8U*sizeof(QPSetBits))];
        -:  577:
        -:  578:public:
        -:  579:    void setEmpty() noexcept {
        -:  580:        m_bits[0] = 0U;
        -:  581:        #if (QF_MAX_ACTIVE > 32)
        -:  582:        m_bits[1] = 0U;
        -:  583:        #endif
        -:  584:    }
        -:  585:    bool isEmpty() const noexcept {
        -:  586:        #if (QF_MAX_ACTIVE <= 32U)
        -:  587:        return (m_bits[0] == 0U);
        -:  588:        #else
        -:  589:        return (m_bits[0] == 0U) ? (m_bits[1] == 0U) : false;
        -:  590:        #endif
        -:  591:    }
        -:  592:    bool notEmpty() const noexcept {
        -:  593:        #if (QF_MAX_ACTIVE <= 32U)
        -:  594:        return (m_bits[0] != 0U);
        -:  595:        #else
        -:  596:        return (m_bits[0] != 0U) ? true : (m_bits[1] != 0U);
        -:  597:        #endif
        -:  598:    }
        -:  599:    bool hasElement(std::uint_fast8_t const n) const noexcept {
        -:  600:        #if (QF_MAX_ACTIVE <= 32U)
        -:  601:        return (m_bits[0] & (static_cast<QPSetBits>(1U) << (n - 1U))) != 0U;
        -:  602:        #else
        -:  603:        return (n <= 32U)
        -:  604:            ? ((m_bits[0] & (static_cast<QPSetBits>(1U) << (n - 1U)))  != 0U)
        -:  605:            : ((m_bits[1] & (static_cast<QPSetBits>(1U) << (n - 33U))) != 0U);
        -:  606:        #endif
        -:  607:    }
        -:  608:    void insert(std::uint_fast8_t const n) noexcept {
        -:  609:        #if (QF_MAX_ACTIVE <= 32U)
        -:  610:        m_bits[0] = (m_bits[0] | (static_cast<QPSetBits>(1U) << (n - 1U)));
        -:  611:        #else
        -:  612:        if (n <= 32U) {
        -:  613:            m_bits[0] = (m_bits[0] | (static_cast<QPSetBits>(1U) << (n - 1U)));
        -:  614:        }
        -:  615:        else {
        -:  616:            m_bits[1] = (m_bits[1] | (static_cast<QPSetBits>(1U) << (n - 33U)));
        -:  617:        }
        -:  618:        #endif
        -:  619:    }
        -:  620:    void remove(std::uint_fast8_t const n) noexcept {
        -:  621:        #if (QF_MAX_ACTIVE <= 32U)
        -:  622:        m_bits[0] = (m_bits[0] & static_cast<QPSetBits>(~(1U << (n - 1U))));
        -:  623:        #else
        -:  624:        if (n <= 32U) {
        -:  625:            (m_bits[0] = (m_bits[0] & ~(static_cast<QPSetBits>(1U) << (n - 1U))));
        -:  626:        }
        -:  627:        else {
        -:  628:            (m_bits[1] = (m_bits[1] & ~(static_cast<QPSetBits>(1U) << (n - 33U))));
        -:  629:        }
        -:  630:        #endif
        -:  631:    }
        -:  632:    std::uint_fast8_t findMax() const noexcept {
        -:  633:        #if (QF_MAX_ACTIVE <= 32U)
        -:  634:        return QF_LOG2(m_bits[0]);
        -:  635:        #else
        -:  636:        return (m_bits[1] != 0U)
        -:  637:            ? (QF_LOG2(m_bits[1]) + 32U)
        -:  638:            : (QF_LOG2(m_bits[0]));
        -:  639:        #endif
        -:  640:    }
        -:  641:
        -:  642:#ifndef Q_UNSAFE
        -:  643:    void update_(QPSet * const dis) const noexcept {
        -:  644:        dis->m_bits[0] = ~m_bits[0];
        -:  645:        #if (QF_MAX_ACTIVE > 32U)
        -:  646:        dis->m_bits[1] = ~m_bits[1];
        -:  647:        #endif
        -:  648:    }
        -:  649:#endif // ndef Q_UNSAFE
        -:  650:
        -:  651:#ifndef Q_UNSAFE
        -:  652:    bool verify_(QPSet const * const dis) const noexcept {
        -:  653:        #if (QF_MAX_ACTIVE <= 32U)
        -:  654:        return m_bits[0] == static_cast<QPSetBits>(~dis->m_bits[0]);
        -:  655:        #else
        -:  656:        return (m_bits[0] == static_cast<QPSetBits>(~dis->m_bits[0]))
        -:  657:               && (m_bits[1] == static_cast<QPSetBits>(~dis->m_bits[1]));
        -:  658:        #endif
        -:  659:    }
        -:  660:#endif // ndef Q_UNSAFE
        -:  661:}; // class QPSet
        -:  662:
        -:  663://${QF::types::QSubscrList} ..................................................
        -:  664:class QSubscrList {
        -:  665:private:
        -:  666:    QPSet m_set;
        -:  667:
        -:  668:#ifndef Q_UNSAFE
        -:  669:    QPSet m_set_dis;
        -:  670:#endif // ndef Q_UNSAFE
        -:  671:
        -:  672:    // friends...
        -:  673:    friend class QActive;
        -:  674:}; // class QSubscrList
        -:  675:
        -:  676://${QF::types::QEQueue} ......................................................
        -:  677:class QEQueue;
        -:  678:
        -:  679:} // namespace QP
        -:  680://$enddecl${QF::types} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        -:  681:
        -:  682://$declare${QF::QActive} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
        -:  683:namespace QP {
        -:  684:
        -:  685://${QF::QActive} .............................................................
        -:  686:class QActive : public QP::QAsm {
        -:  687:protected:
        -:  688:    std::uint8_t m_prio;
        -:  689:    std::uint8_t m_pthre;
        -:  690:
        -:  691:#ifdef QACTIVE_THREAD_TYPE
        -:  692:    QACTIVE_THREAD_TYPE m_thread;
        -:  693:#endif // def QACTIVE_THREAD_TYPE
        -:  694:
        -:  695:#ifdef QACTIVE_OS_OBJ_TYPE
        -:  696:    QACTIVE_OS_OBJ_TYPE m_osObject;
        -:  697:#endif // def QACTIVE_OS_OBJ_TYPE
        -:  698:
        -:  699:#ifdef QACTIVE_EQUEUE_TYPE
        -:  700:    QACTIVE_EQUEUE_TYPE m_eQueue;
        -:  701:#endif // def QACTIVE_EQUEUE_TYPE
        -:  702:
        -:  703:public:
        -:  704:
        -:  705:#ifndef Q_UNSAFE
        -:  706:    std::uint8_t m_prio_dis;
        -:  707:#endif // ndef Q_UNSAFE
        -:  708:
        -:  709:#ifndef Q_UNSAFE
        -:  710:    std::uint8_t m_pthre_dis;
        -:  711:#endif // ndef Q_UNSAFE
        -:  712:    static QActive * registry_[QF_MAX_ACTIVE + 1U];
        -:  713:    static QSubscrList * subscrList_;
        -:  714:    static enum_t maxPubSignal_;
        -:  715:
        -:  716:    // friends...
        -:  717:    friend class QTimeEvt;
        -:  718:    friend class QTicker;
        -:  719:    friend class QXThread;
        -:  720:    friend class QXMutex;
        -:  721:    friend class QXSemaphore;
        -:  722:    friend class QActiveDummy;
        -:  723:    friend class GuiQActive;
        -:  724:    friend class GuiQMActive;
        -:  725:    friend void schedLock();
        -:  726:
        -:  727:protected:
        -:  728:    explicit QActive(QStateHandler const initial) noexcept
        -:  729:      : QAsm(),
        -:  730:        m_prio(0U),
        -:  731:        m_pthre(0U)
        -:  732:    {
        -:  733:        m_state.fun = Q_STATE_CAST(&top);
        -:  734:        m_temp.fun  = initial;
        -:  735:
        -:  736:        #ifndef Q_UNSAFE
        -:  737:        m_prio_dis  = static_cast<std::uint8_t>(~m_prio);
        -:  738:        m_pthre_dis = static_cast<std::uint8_t>(~m_pthre);
        -:  739:        #endif
        -:  740:    }
        -:  741:
        -:  742:public:
        -:  743:    void init(
        -:  744:        void const * const e,
        -:  745:        std::uint_fast8_t const qsId) override
        -:  746:    {
        -:  747:        reinterpret_cast<QHsm *>(this)->QHsm::init(e, qsId);
        -:  748:    }
        -:  749:    void init(std::uint_fast8_t const qsId) override {
        -:  750:        this->init(nullptr, qsId);
        -:  751:    }
        -:  752:    void dispatch(
        -:  753:        QEvt const * const e,
        -:  754:        std::uint_fast8_t const qsId) override
        -:  755:    {
        -:  756:        reinterpret_cast<QHsm *>(this)->QHsm::dispatch(e, qsId);
        -:  757:    }
        -:  758:    bool isIn(QStateHandler const state) noexcept override {
        -:  759:        return reinterpret_cast<QHsm *>(this)->QHsm::isIn(state);
        -:  760:    }
        -:  761:    QStateHandler childState(QStateHandler const parent) noexcept {
        -:  762:        return reinterpret_cast<QHsm *>(this)->QHsm::childState(parent);
        -:  763:    }
        -:  764:    void setAttr(
        -:  765:        std::uint32_t attr1,
        -:  766:        void const * attr2 = nullptr);
        -:  767:    void start(
        -:  768:        QPrioSpec const prioSpec,
        -:  769:        QEvt const * * const qSto,
        -:  770:        std::uint_fast16_t const qLen,
        -:  771:        void * const stkSto,
        -:  772:        std::uint_fast16_t const stkSize,
        -:  773:        void const * const par);
        -:  774:    void start(
        -:  775:        QPrioSpec const prioSpec,
        -:  776:        QEvt const * * const qSto,
        -:  777:        std::uint_fast16_t const qLen,
        -:  778:        void * const stkSto,
        -:  779:        std::uint_fast16_t const stkSize)
        -:  780:    {
        -:  781:        this->start(prioSpec, qSto, qLen, stkSto, stkSize, nullptr);
        -:  782:    }
        -:  783:
        -:  784:#ifdef QACTIVE_CAN_STOP
        -:  785:    void stop();
        -:  786:#endif // def QACTIVE_CAN_STOP
        -:  787:    void register_() noexcept;
        -:  788:    void unregister_() noexcept;
        -:  789:    bool post_(
        -:  790:        QEvt const * const e,
        -:  791:        std::uint_fast16_t const margin,
        -:  792:        void const * const sender) noexcept;
        -:  793:    void postLIFO(QEvt const * const e) noexcept;
        -:  794:    QEvt const * get_() noexcept;
        -:  795:    static std::uint_fast16_t getQueueMin(std::uint_fast8_t const prio) noexcept;
        -:  796:    static void psInit(
        -:  797:        QSubscrList * const subscrSto,
        -:  798:        enum_t const maxSignal) noexcept;
        -:  799:    static void publish_(
        -:  800:        QEvt const * const e,
        -:  801:        void const * const sender,
        -:  802:        std::uint_fast8_t const qsId) noexcept;
        -:  803:    void subscribe(enum_t const sig) const noexcept;
        -:  804:    void unsubscribe(enum_t const sig) const noexcept;
        -:  805:    void unsubscribeAll() const noexcept;
        -:  806:    bool defer(
        -:  807:        QEQueue * const eq,
        -:  808:        QEvt const * const e) const noexcept;
        -:  809:    bool recall(QEQueue * const eq) noexcept;
        -:  810:    std::uint_fast16_t flushDeferred(
        -:  811:        QEQueue * const eq,
        -:  812:        std::uint_fast16_t const num = 0xFFFFU) const noexcept;
        -:  813:    std::uint_fast8_t getPrio() const noexcept {
        -:  814:        return static_cast<std::uint_fast8_t>(m_prio);
        -:  815:    }
        -:  816:    void setPrio(QPrioSpec const prio) noexcept {
        -:  817:        m_prio  = static_cast<std::uint8_t>(prio & 0xFFU);
        -:  818:        m_pthre = static_cast<std::uint8_t>(prio >> 8U);
        -:  819:    }
        -:  820:    std::uint_fast8_t getPThre() const noexcept {
        -:  821:        return static_cast<std::uint_fast8_t>(m_pthre);
        -:  822:    }
        -:  823:
        -:  824:#ifdef QACTIVE_EQUEUE_TYPE
        -:  825:    QACTIVE_EQUEUE_TYPE const & getEQueue() const noexcept {
        -:  826:        return m_eQueue;
        -:  827:    }
        -:  828:#endif // def QACTIVE_EQUEUE_TYPE
        -:  829:
        -:  830:#ifdef QACTIVE_OS_OBJ_TYPE
        -:  831:    QACTIVE_OS_OBJ_TYPE const & getOsObject() const noexcept {
        -:  832:        return m_osObject;
        -:  833:    }
        -:  834:#endif // def QACTIVE_OS_OBJ_TYPE
        -:  835:
        -:  836:#ifdef QACTIVE_THREAD_TYPE
        -:  837:    QACTIVE_THREAD_TYPE const & getThread() const noexcept {
        -:  838:        return m_thread;
        -:  839:    }
        -:  840:#endif // def QACTIVE_THREAD_TYPE
        -:  841:
        -:  842:#ifdef QACTIVE_THREAD_TYPE
        -:  843:    void setThread(QACTIVE_THREAD_TYPE const & thr) {
        -:  844:        m_thread = thr;
        -:  845:    }
        -:  846:#endif // def QACTIVE_THREAD_TYPE
        -:  847:    static void evtLoop_(QActive * act);
        -:  848:
        -:  849:#ifdef QF_ISR_API
        -:  850:    virtual bool postFromISR(
        -:  851:        QEvt const * const e,
        -:  852:        std::uint_fast16_t const margin,
        -:  853:        void * par,
        -:  854:        void const * const sender) noexcept;
        -:  855:#endif // def QF_ISR_API
        -:  856:
        -:  857:#ifdef QF_ISR_API
        -:  858:    static void publishFromISR(
        -:  859:        QEvt const * e,
        -:  860:        void * par,
        -:  861:        void const * sender) noexcept;
        -:  862:#endif // def QF_ISR_API
        -:  863:}; // class QActive
        -:  864:
        -:  865:} // namespace QP
        -:  866://$enddecl${QF::QActive} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        -:  867:
        -:  868://$declare${QF::QMActive} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
        -:  869:namespace QP {
        -:  870:
        -:  871://${QF::QMActive} ............................................................
        -:  872:class QMActive : public QP::QActive {
        -:  873:protected:
        -:  874:    QMActive(QStateHandler const initial) noexcept;
        -:  875:
        -:  876:public:
        -:  877:    void init(
        -:  878:        void const * const e,
        -:  879:        std::uint_fast8_t const qsId) override
        -:  880:    {
        -:  881:        reinterpret_cast<QMsm *>(this)->QMsm::init(e, qsId);
        -:  882:    }
        -:  883:    void init(std::uint_fast8_t const qsId) override {
        -:  884:        this->init(nullptr, qsId);
        -:  885:    }
        -:  886:    void dispatch(
        -:  887:        QEvt const * const e,
        -:  888:        std::uint_fast8_t const qsId) override
        -:  889:    {
        -:  890:        reinterpret_cast<QMsm *>(this)->QMsm::dispatch(e, qsId);
        -:  891:    }
        -:  892:    bool isIn(QStateHandler const state) noexcept override {
        -:  893:        return reinterpret_cast<QMsm *>(this)->QMsm::isIn(state);
        -:  894:    }
        -:  895:
        -:  896:#ifdef Q_SPY
        -:  897:    QStateHandler getStateHandler() noexcept override {
        -:  898:        return reinterpret_cast<QMsm *>(this)->QMsm::getStateHandler();
        -:  899:    }
        -:  900:#endif // def Q_SPY
        -:  901:    QMState const * childStateObj(QMState const * const parent) const noexcept {
        -:  902:        return reinterpret_cast<QMsm const *>(this)
        -:  903:                   ->QMsm::childStateObj(parent);
        -:  904:    }
        -:  905:}; // class QMActive
        -:  906:
        -:  907:} // namespace QP
        -:  908://$enddecl${QF::QMActive} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        -:  909:
        -:  910://$declare${QF::QTimeEvt} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
        -:  911:namespace QP {
        -:  912:
        -:  913://${QF::QTimeEvt} ............................................................
        -:  914:class QTimeEvt : public QP::QEvt {
        -:  915:private:
        -:  916:    QTimeEvt * volatile m_next;
        -:  917:    void * m_act;
        -:  918:    QTimeEvtCtr volatile m_ctr;
        -:  919:    QTimeEvtCtr m_interval;
        -:  920:
        -:  921:public:
        -:  922:    static QTimeEvt timeEvtHead_[QF_MAX_TICK_RATE];
        -:  923:
        -:  924:private:
        -:  925:    friend class QXThread;
        -:  926:
        -:  927:public:
        -:  928:    QTimeEvt(
        -:  929:        QActive * const act,
        -:  930:        QSignal const sig,
        -:  931:        std::uint_fast8_t const tickRate = 0U) noexcept;
        -:  932:    void armX(
        -:  933:        QTimeEvtCtr const nTicks,
        -:  934:        QTimeEvtCtr const interval = 0U) noexcept;
        -:  935:    bool disarm() noexcept;
        -:  936:    bool rearm(QTimeEvtCtr const nTicks) noexcept;
        -:  937:    bool wasDisarmed() noexcept;
        -:  938:    void const * getAct() const noexcept {
        -:  939:        return m_act;
        -:  940:    }
        -:  941:    QTimeEvtCtr getCtr() const noexcept {
        -:  942:        return m_ctr;
        -:  943:    }
        -:  944:    QTimeEvtCtr getInterval() const noexcept {
        -:  945:        return m_interval;
        -:  946:    }
        -:  947:    static void tick(
        -:  948:        std::uint_fast8_t const tickRate,
        -:  949:        void const * const sender) noexcept;
        -:  950:
        -:  951:#ifdef Q_UTEST
        -:  952:    static void tick1_(
        -:  953:        std::uint_fast8_t const tickRate,
        -:  954:        void const * const sender);
        -:  955:#endif // def Q_UTEST
        -:  956:
        -:  957:#ifdef QF_ISR_API
        -:  958:    static void tickFromISR(
        -:  959:        std::uint_fast8_t const tickRate,
        -:  960:        void * par,
        -:  961:        void const * sender) noexcept;
        -:  962:#endif // def QF_ISR_API
        -:  963:    static bool noActive(std::uint_fast8_t const tickRate) noexcept;
        -:  964:    QActive * toActive() noexcept {
        -:  965:        return static_cast<QActive *>(m_act);
        -:  966:    }
        -:  967:    QTimeEvt * toTimeEvt() noexcept {
        -:  968:        return static_cast<QTimeEvt *>(m_act);
        -:  969:    }
        -:  970:
        -:  971:private:
        -:  972:    QTimeEvt() noexcept;
        -:  973:    QTimeEvt(QTimeEvt const & other) = delete;
        -:  974:    QTimeEvt & operator=(QTimeEvt const & other) = delete;
        -:  975:}; // class QTimeEvt
        -:  976:
        -:  977:} // namespace QP
        -:  978://$enddecl${QF::QTimeEvt} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        -:  979:
        -:  980://$declare${QF::QTicker} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
        -:  981:namespace QP {
        -:  982:
        -:  983://${QF::QTicker} .............................................................
        -:  984:class QTicker : public QP::QActive {
        -:  985:public:
        -:  986:    explicit QTicker(std::uint_fast8_t const tickRate) noexcept;
        -:  987:    void init(
        -:  988:        void const * const e,
        -:  989:        std::uint_fast8_t const qsId) override;
        -:  990:    void init(std::uint_fast8_t const qsId) override {
        -:  991:        this->init(nullptr, qsId);
        -:  992:    }
        -:  993:    void dispatch(
        -:  994:        QEvt const * const e,
        -:  995:        std::uint_fast8_t const qsId) override;
        -:  996:    void trig_(void const * const sender) noexcept;
        -:  997:}; // class QTicker
        -:  998:
        -:  999:} // namespace QP
        -: 1000://$enddecl${QF::QTicker} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        -: 1001:
        -: 1002://$declare${QF::QF-base} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
        -: 1003:namespace QP {
        -: 1004:namespace QF {
        -: 1005:
        -: 1006://${QF::QF-base::init} .......................................................
        -: 1007:void init();
        -: 1008:
        -: 1009://${QF::QF-base::stop} .......................................................
        -: 1010:void stop();
        -: 1011:
        -: 1012://${QF::QF-base::run} ........................................................
        -: 1013:int_t run();
        -: 1014:
        -: 1015://${QF::QF-base::onStartup} ..................................................
        -: 1016:void onStartup();
        -: 1017:
        -: 1018://${QF::QF-base::onCleanup} ..................................................
        -: 1019:void onCleanup();
        -: 1020:
        -: 1021://${QF::QF-base::psInit} .....................................................
        -: 1022://! @deprecated
        -: 1023:inline void psInit(
        -: 1024:    QSubscrList * const subscrSto,
        -: 1025:    enum_t const maxSignal) noexcept
        -: 1026:{
        -: 1027:    QActive::psInit(subscrSto, maxSignal);
        -: 1028:}
        -: 1029:
        -: 1030://${QF::QF-base::publish_} ...................................................
        -: 1031://! @deprecated
        -: 1032:inline void publish_(
        -: 1033:    QEvt const * const e,
        -: 1034:    void const * const sender,
        -: 1035:    std::uint_fast8_t const qsId) noexcept
        -: 1036:{
        -: 1037:    QActive::publish_(e, sender, qsId);
        -: 1038:}
        -: 1039:
        -: 1040://${QF::QF-base::tick} .......................................................
        -: 1041://! @deprecated
        -: 1042:inline void tick(
        -: 1043:    std::uint_fast8_t const tickRate,
        -: 1044:    void const * const sender) noexcept
        -: 1045:{
        -: 1046:    QTimeEvt::tick(tickRate, sender);
        -: 1047:}
        -: 1048:
        -: 1049://${QF::QF-base::getQueueMin} ................................................
        -: 1050://! @deprecated
        -: 1051:inline std::uint_fast16_t getQueueMin(std::uint_fast8_t const prio) noexcept {
        -: 1052:    return QActive::getQueueMin(prio);
        -: 1053:}
        -: 1054:
        -: 1055://${QF::QF-base::NO_MARGIN} ..................................................
        -: 1056:constexpr std::uint_fast16_t NO_MARGIN {0xFFFFU};
        -: 1057:
        -: 1058:} // namespace QF
        -: 1059:} // namespace QP
        -: 1060://$enddecl${QF::QF-base} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        -: 1061:
        -: 1062://$declare${QF::QF-dyn} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
        -: 1063:namespace QP {
        -: 1064:namespace QF {
        -: 1065:
        -: 1066://${QF::QF-dyn::poolInit} ....................................................
        -: 1067:void poolInit(
        -: 1068:    void * const poolSto,
        -: 1069:    std::uint_fast32_t const poolSize,
        -: 1070:    std::uint_fast16_t const evtSize) noexcept;
        -: 1071:
        -: 1072://${QF::QF-dyn::poolGetMaxBlockSize} .........................................
        -: 1073:std::uint_fast16_t poolGetMaxBlockSize() noexcept;
        -: 1074:
        -: 1075://${QF::QF-dyn::getPoolMin} ..................................................
        -: 1076:std::uint_fast16_t getPoolMin(std::uint_fast8_t const poolNum) noexcept;
        -: 1077:
        -: 1078://${QF::QF-dyn::newX_} .......................................................
        -: 1079:QEvt * newX_(
        -: 1080:    std::uint_fast16_t const evtSize,
        -: 1081:    std::uint_fast16_t const margin,
        -: 1082:    enum_t const sig) noexcept;
        -: 1083:
        -: 1084://${QF::QF-dyn::gc} ..........................................................
        -: 1085:void gc(QEvt const * const e) noexcept;
        -: 1086:
        -: 1087://${QF::QF-dyn::newRef_} .....................................................
        -: 1088:QEvt const * newRef_(
        -: 1089:    QEvt const * const e,
        -: 1090:    QEvt const * const evtRef) noexcept;
        -: 1091:
        -: 1092://${QF::QF-dyn::deleteRef_} ..................................................
        -: 1093:void deleteRef_(QEvt const * const evtRef) noexcept;
        -: 1094:
        -: 1095://${QF::QF-dyn::q_new} .......................................................
        -: 1096:#ifndef QEVT_PAR_INIT
        -: 1097:template<class evtT_>
        -: 1098:inline evtT_ * q_new(enum_t const sig) {
        -: 1099:    return static_cast<evtT_*>(
        -: 1100:        QP::QF::newX_(sizeof(evtT_), QP::QF::NO_MARGIN, sig));
        -: 1101:}
        -: 1102:#endif // ndef QEVT_PAR_INIT
        -: 1103:
        -: 1104://${QF::QF-dyn::q_new} .......................................................
        -: 1105:#ifdef QEVT_PAR_INIT
        -: 1106:template<class evtT_, typename... Args>
        -: 1107:inline evtT_ * q_new(
        -: 1108:    enum_t const sig,
        -: 1109:    Args... args)
        -: 1110:{
        -: 1111:    evtT_ *e = static_cast<evtT_*>(
        -: 1112:        QP::QF::newX_(sizeof(evtT_), QP::QF::NO_MARGIN, sig));
        -: 1113:    e->init(args...); // e cannot be nullptr
        -: 1114:    return e;
        -: 1115:}
        -: 1116:#endif // def QEVT_PAR_INIT
        -: 1117:
        -: 1118://${QF::QF-dyn::q_new_x} .....................................................
        -: 1119:#ifndef QEVT_PAR_INIT
        -: 1120:template<class evtT_>
        -: 1121:inline evtT_ * q_new_x(
        -: 1122:    std::uint_fast16_t const margin,
        -: 1123:    enum_t const sig)
        -: 1124:{
        -: 1125:    return static_cast<evtT_*>(QP::QF::newX_(sizeof(evtT_), margin, sig));
        -: 1126:}
        -: 1127:#endif // ndef QEVT_PAR_INIT
        -: 1128:
        -: 1129://${QF::QF-dyn::q_new_x} .....................................................
        -: 1130:#ifdef QEVT_PAR_INIT
        -: 1131:template<class evtT_, typename... Args>
        -: 1132:inline evtT_ * q_new_x(
        -: 1133:    std::uint_fast16_t const margin,
        -: 1134:    enum_t const sig,
        -: 1135:    Args... args)
        -: 1136:{
        -: 1137:    evtT_ *e = static_cast<evtT_*>(QP::QF::newX_(sizeof(evtT_), margin, sig));
        -: 1138:    if (e != nullptr) {
        -: 1139:        e->init(args...);
        -: 1140:    }
        -: 1141:    return e;
        -: 1142:}
        -: 1143:#endif // def QEVT_PAR_INIT
        -: 1144:
        -: 1145://${QF::QF-dyn::q_new_ref} ...................................................
        -: 1146:template<class evtT_>
        -: 1147:inline void q_new_ref(
        -: 1148:    QP::QEvt const * const e,
        -: 1149:    evtT_ const *& evtRef)
        -: 1150:{
        -: 1151:    evtRef = static_cast<evtT_ const *>(QP::QF::newRef_(e, evtRef));
        -: 1152:}
        -: 1153:
        -: 1154://${QF::QF-dyn::q_delete_ref} ................................................
        -: 1155:template<class evtT_>
        -: 1156:inline void q_delete_ref(evtT_ const *& evtRef) {
        -: 1157:    QP::QF::deleteRef_(evtRef);
        -: 1158:    evtRef = nullptr;
        -: 1159:}
        -: 1160:
        -: 1161://${QF::QF-dyn::newXfromISR_} ................................................
        -: 1162:#ifdef QF_ISR_API
        -: 1163:QEvt * newXfromISR_(
        -: 1164:    std::uint_fast16_t const evtSize,
        -: 1165:    std::uint_fast16_t const margin,
        -: 1166:    enum_t const sig) noexcept;
        -: 1167:#endif // def QF_ISR_API
        -: 1168:
        -: 1169://${QF::QF-dyn::gcFromISR} ...................................................
        -: 1170:#ifdef QF_ISR_API
        -: 1171:void gcFromISR(QEvt const * e) noexcept;
        -: 1172:#endif // def QF_ISR_API
        -: 1173:
        -: 1174:} // namespace QF
        -: 1175:} // namespace QP
        -: 1176://$enddecl${QF::QF-dyn} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        -: 1177:
        -: 1178:extern "C" {
        -: 1179://$declare${QF-extern-C} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
        -: 1180:
        -: 1181://${QF-extern-C::QF_onContextSw} .............................................
        -: 1182:#ifdef QF_ON_CONTEXT_SW
        -: 1183:void QF_onContextSw(
        -: 1184:    QP::QActive * prev,
        -: 1185:    QP::QActive * next);
        -: 1186:#endif // def QF_ON_CONTEXT_SW
        -: 1187://$enddecl${QF-extern-C} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        -: 1188:} // extern "C"
        -: 1189:
        -: 1190://$declare${QF-macros} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
        -: 1191:
        -: 1192://${QF-macros::Q_PRIO} .......................................................
        -: 1193:#define Q_PRIO(prio_, pthre_) \
        -: 1194:    (static_cast<QP::QPrioSpec>((prio_) | (pthre_) << 8U))
        -: 1195:
        -: 1196://${QF-macros::Q_NEW} ........................................................
        -: 1197:#ifndef QEVT_PAR_INIT
        -: 1198:#define Q_NEW(evtT_, sig_) (QP::QF::q_new<evtT_>((sig_)))
        -: 1199:#endif // ndef QEVT_PAR_INIT
        -: 1200:
        -: 1201://${QF-macros::Q_NEW} ........................................................
        -: 1202:#ifdef QEVT_PAR_INIT
        -: 1203:#define Q_NEW(evtT_, sig_, ...) (QP::QF::q_new<evtT_>((sig_), __VA_ARGS__))
        -: 1204:#endif // def QEVT_PAR_INIT
        -: 1205:
        -: 1206://${QF-macros::Q_NEW_X} ......................................................
        -: 1207:#ifndef QEVT_PAR_INIT
        -: 1208:#define Q_NEW_X(evtT_, margin_, sig_) (QP::QF::q_new_x<evtT_>((margin_), (sig_)))
        -: 1209:#endif // ndef QEVT_PAR_INIT
        -: 1210:
        -: 1211://${QF-macros::Q_NEW_X} ......................................................
        -: 1212:#ifdef QEVT_PAR_INIT
        -: 1213:#define Q_NEW_X(evtT_, margin_, sig_, ...) (QP::QF::q_new_x<evtT_>((margin_), (sig_), __VA_ARGS__))
        -: 1214:#endif // def QEVT_PAR_INIT
        -: 1215:
        -: 1216://${QF-macros::Q_NEW_REF} ....................................................
        -: 1217:#define Q_NEW_REF(evtRef_, evtT_) (QP::QF::q_new_ref<evtT_>(e, (evtRef_)))
        -: 1218:
        -: 1219://${QF-macros::Q_DELETE_REF} .................................................
        -: 1220:#define Q_DELETE_REF(evtRef_) do { \
        -: 1221:    QP::QF::deleteRef_((evtRef_)); \
        -: 1222:    (evtRef_) = nullptr; \
        -: 1223:} while (false)
        -: 1224:
        -: 1225://${QF-macros::PUBLISH} ......................................................
        -: 1226:#ifdef Q_SPY
        -: 1227:#define PUBLISH(e_, sender_) \
        -: 1228:    publish_((e_), (sender_), (sender_)->getPrio())
        -: 1229:#endif // def Q_SPY
        -: 1230:
        -: 1231://${QF-macros::PUBLISH} ......................................................
        -: 1232:#ifndef Q_SPY
        -: 1233:#define PUBLISH(e_, dummy) publish_((e_), nullptr, 0U)
        -: 1234:#endif // ndef Q_SPY
        -: 1235:
        -: 1236://${QF-macros::POST} .........................................................
        -: 1237:#ifdef Q_SPY
        -: 1238:#define POST(e_, sender_) post_((e_), QP::QF::NO_MARGIN, (sender_))
        -: 1239:#endif // def Q_SPY
        -: 1240:
        -: 1241://${QF-macros::POST} .........................................................
        -: 1242:#ifndef Q_SPY
        -: 1243:#define POST(e_, dummy) post_((e_), QP::QF::NO_MARGIN, nullptr)
        -: 1244:#endif // ndef Q_SPY
        -: 1245:
        -: 1246://${QF-macros::POST_X} .......................................................
        -: 1247:#ifdef Q_SPY
        -: 1248:#define POST_X(e_, margin_, sender_) \
        -: 1249:    post_((e_), (margin_), (sender_))
        -: 1250:#endif // def Q_SPY
        -: 1251:
        -: 1252://${QF-macros::POST_X} .......................................................
        -: 1253:#ifndef Q_SPY
        -: 1254:#define POST_X(e_, margin_, dummy) post_((e_), (margin_), nullptr)
        -: 1255:#endif // ndef Q_SPY
        -: 1256:
        -: 1257://${QF-macros::TICK_X} .......................................................
        -: 1258:#ifdef Q_SPY
        -: 1259:#define TICK_X(tickRate_, sender_) tick((tickRate_), (sender_))
        -: 1260:#endif // def Q_SPY
        -: 1261:
        -: 1262://${QF-macros::TICK_X} .......................................................
        -: 1263:#ifndef Q_SPY
        -: 1264:#define TICK_X(tickRate_, dummy) tick((tickRate_), nullptr)
        -: 1265:#endif // ndef Q_SPY
        -: 1266:
        -: 1267://${QF-macros::TICK} .........................................................
        -: 1268:#define TICK(sender_) TICK_X(0U, (sender_))
        -: 1269:
        -: 1270://${QF-macros::TRIG} .........................................................
        -: 1271:#ifdef Q_SPY
        -: 1272:#define TRIG(sender_) trig_((sender_))
        -: 1273:#endif // def Q_SPY
        -: 1274:
        -: 1275://${QF-macros::TRIG} .........................................................
        -: 1276:#ifndef Q_SPY
        -: 1277:#define TRIG(sender_) trig_(nullptr)
        -: 1278:#endif // ndef Q_SPY
        -: 1279:
        -: 1280://${QF-macros::QF_CRIT_EXIT_NOP} .............................................
        -: 1281:#ifndef QF_CRIT_EXIT_NOP
        -: 1282:#define QF_CRIT_EXIT_NOP() (static_cast<void>(0))
        -: 1283:#endif // ndef QF_CRIT_EXIT_NOP
        -: 1284:
        -: 1285://${QF-macros::QF_MEM_SYS} ...................................................
        -: 1286:#ifndef QF_MEM_SYS
        -: 1287:#define QF_MEM_SYS() (static_cast<void>(0))
        -: 1288:#endif // ndef QF_MEM_SYS
        -: 1289:
        -: 1290://${QF-macros::QF_MEM_APP} ...................................................
        -: 1291:#ifndef QF_MEM_APP
        -: 1292:#define QF_MEM_APP() (static_cast<void>(0))
        -: 1293:#endif // ndef QF_MEM_APP
        -: 1294://$enddecl${QF-macros} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        -: 1295:
        -: 1296:#endif // QP_HPP_
