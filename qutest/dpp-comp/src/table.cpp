//$file${.::table.cpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: dpp-comp.qm
// File:  ${.::table.cpp}
//
// This code has been generated by QM 7.0.2 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// Copyright (c) 2005 Quantum Leaps, LLC. All rights reserved.
//
//                 ____________________________________
//                /                                   /
//               /    GGGGGGG    PPPPPPPP   LL       /
//              /   GG     GG   PP     PP  LL       /
//             /   GG          PP     PP  LL       /
//            /   GG   GGGGG  PPPPPPPP   LL       /
//           /   GG      GG  PP         LL       /
//          /     GGGGGGG   PP         LLLLLLL  /
//         /___________________________________/
//
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This generated code is open-source software licensed under the GNU
// General Public License (GPL) as published by the Free Software Foundation
// (see <https://www.gnu.org/licenses>).
//
// NOTE:
// The GPL does NOT permit the incorporation of this code into proprietary
// programs. Please contact Quantum Leaps for commercial licensing options,
// which expressly supersede the GPL and are designed explicitly for
// closed-source distribution.
//
// Quantum Leaps contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${.::table.cpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#include "qpcpp.hpp"
#include "dpp.hpp"
#include "bsp.hpp"

namespace {

Q_DEFINE_THIS_FILE

// helper function to provide the RIGHT neighbour of a Philo[n]
static inline std::uint8_t RIGHT(std::uint8_t const n) {
    return static_cast<std::uint8_t>(
               (n + (APP::N_PHILO - 1U)) % APP::N_PHILO);
}

// helper function to provide the LEFT neighbour of a Philo[n]
static inline std::uint8_t LEFT(std::uint8_t const n) {
    return static_cast<std::uint8_t>((n + 1U) % APP::N_PHILO);
}

static std::uint8_t const FREE = static_cast<std::uint8_t>(0);
static std::uint8_t const USED = static_cast<std::uint8_t>(1);

static char const * const THINKING = "thinking";
static char const * const HUNGRY   = "hungry  ";
static char const * const EATING   = "eating  ";

} // unnamed namespace

//$declare${Cont::Table} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace APP {

//${Cont::Table} .............................................................
class Table : public QP::QActive {
public:
    static Table inst;

private:
    std::uint8_t m_fork[N_PHILO];
    bool m_isHungry[N_PHILO];

public:
    Table();

protected:
    Q_STATE_DECL(initial);
    Q_STATE_DECL(active);
    Q_STATE_DECL(serving);
    Q_STATE_DECL(paused);
}; // class Table

} // namespace APP
//$enddecl${Cont::Table} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//$skip${QP_VERSION} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
// Check for the minimum required QP version
#if (QP_VERSION < 730U) || (QP_VERSION != ((QP_RELEASE^4294967295U)%0x2710U))
#error qpcpp version 7.3.0 or higher required
#endif
//$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$define${Shared::AO_Table} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace APP {

//${Shared::AO_Table} ........................................................
QP::QActive * const AO_Table = &Table::inst;

} // namespace APP
//$enddef${Shared::AO_Table} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$define${Cont} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace APP {

//${Cont::Table} .............................................................
Table Table::inst;

//${Cont::Table::Table} ......................................................
Table::Table()
  : QActive(Q_STATE_CAST(&Table::initial))
{
    for (std::uint8_t n = 0U; n < N_PHILO; ++n) {
        m_fork[n] = FREE;
        m_isHungry[n] = false;
    }
}

//${Cont::Table::SM} .........................................................
Q_STATE_DEF(Table, initial) {
    //${Cont::Table::SM::initial}
    Q_UNUSED_PAR(e);

    QS_OBJ_DICTIONARY(&Table::inst);

    subscribe(PAUSE_SIG);
    subscribe(SERVE_SIG);
    subscribe(TEST_SIG);

    for (std::uint8_t n = 0U; n < N_PHILO; ++n) {
        m_fork[n] = FREE;
        m_isHungry[n] = false;

        // take top-most initial tran. in the Philo SM
        SM_Philo[n]->INIT(QP::QS_ID_AP + n);
        BSP::displayPhilStat(n, THINKING);
    }

    QS_FUN_DICTIONARY(&Table::active);
    QS_FUN_DICTIONARY(&Table::serving);
    QS_FUN_DICTIONARY(&Table::paused);

    return tran(&serving);
}

//${Cont::Table::SM::active} .................................................
Q_STATE_DEF(Table, active) {
    QP::QState status_;
    switch (e->sig) {
        //${Cont::Table::SM::active::EAT}
        case EAT_SIG: {
            Q_ERROR();
            status_ = Q_RET_HANDLED;
            break;
        }
        //${Cont::Table::SM::active::TEST}
        case TEST_SIG: {
            status_ = Q_RET_HANDLED;
            break;
        }
        //${Cont::Table::SM::active::TIMEOUT}
        case TIMEOUT_SIG: {
            std::uint16_t n = Q_EVT_CAST(CompTimeEvt)->compNum;
            SM_Philo[n]->DISPATCH(e, QP::QS_ID_AP + n);
            status_ = Q_RET_HANDLED;
            break;
        }
        default: {
            status_ = super(&top);
            break;
        }
    }
    return status_;
}

//${Cont::Table::SM::active::serving} ........................................
Q_STATE_DEF(Table, serving) {
    QP::QState status_;
    switch (e->sig) {
        //${Cont::Table::SM::active::serving}
        case Q_ENTRY_SIG: {
            for (std::uint8_t n = 0U; n < N_PHILO; ++n) { // give permissions to eat...
                if (m_isHungry[n]
                    && (m_fork[LEFT(n)] == FREE)
                    && (m_fork[n] == FREE))
                {
                    m_fork[LEFT(n)] = USED;
                    m_fork[n] = USED;

                    // synchronoulsy dispatch EAT event to the Philo component
                    TableEvt const evt(EAT_SIG, n);
                    SM_Philo[n]->DISPATCH(&evt, QP::QS_ID_AP + n);

                    m_isHungry[n] = false;
                    BSP::displayPhilStat(n, EATING);
                }
            }
            status_ = Q_RET_HANDLED;
            break;
        }
        //${Cont::Table::SM::active::serving::HUNGRY}
        case HUNGRY_SIG: {
            // find the index of the Philo from the event
            std::uint8_t n = Q_EVT_CAST(TableEvt)->philoId;
            // philo ID must be in range and he must be not hungry
            Q_ASSERT((n < N_PHILO) && (!m_isHungry[n]));

            BSP::displayPhilStat(n, HUNGRY);
            std::uint8_t m = LEFT(n);
            //${Cont::Table::SM::active::serving::HUNGRY::[bothfree]}
            if ((m_fork[m] == FREE) && (m_fork[n] == FREE)) {
                m_fork[m] = USED;
                m_fork[n] = USED;

                // synchronoulsy dispatch EAT event to the Philo component
                TableEvt const evt(EAT_SIG, n);
                SM_Philo[n]->DISPATCH(&evt, QP::QS_ID_AP + n);
                BSP::displayPhilStat(n, EATING);
                status_ = Q_RET_HANDLED;
            }
            //${Cont::Table::SM::active::serving::HUNGRY::[else]}
            else {
                m_isHungry[n] = true;
                status_ = Q_RET_HANDLED;
            }
            break;
        }
        //${Cont::Table::SM::active::serving::DONE}
        case DONE_SIG: {
            // find the index of the Philo from the event
            std::uint8_t n = Q_EVT_CAST(TableEvt)->philoId;
            // philo ID must be in range and he must be not hungry
            Q_ASSERT((n < N_PHILO) && (!m_isHungry[n]));

            BSP::displayPhilStat(n, THINKING);
            std::uint8_t m = LEFT(n);
            // both forks of Phil[n] must be used
            Q_ASSERT((m_fork[n] == USED) && (m_fork[m] == USED));

            m_fork[m] = FREE;
            m_fork[n] = FREE;
            m = RIGHT(n); // check the right neighbor

            if (m_isHungry[m] && (m_fork[m] == FREE)) {
                m_fork[n] = USED;
                m_fork[m] = USED;
                m_isHungry[m] = false;

                // synchronoulsy dispatch EAT event to the Philo component
                TableEvt const evt(EAT_SIG, m);
                SM_Philo[m]->DISPATCH(&evt, QP::QS_ID_AP + n);

                BSP::displayPhilStat(m, EATING);
            }
            m = LEFT(n); // check the left neighbor
            n = LEFT(m); // left fork of the left neighbor
            if (m_isHungry[m] && (m_fork[n] == FREE)) {
                m_fork[m] = USED;
                m_fork[n] = USED;
                m_isHungry[m] = false;

                // synchronoulsy dispatch EAT event to the Philo component
                TableEvt const evt(EAT_SIG, m);
                SM_Philo[m]->DISPATCH(&evt, QP::QS_ID_AP + n);

                BSP::displayPhilStat(m, EATING);
            }
            status_ = Q_RET_HANDLED;
            break;
        }
        //${Cont::Table::SM::active::serving::EAT}
        case EAT_SIG: {
            Q_ERROR();
            status_ = Q_RET_HANDLED;
            break;
        }
        //${Cont::Table::SM::active::serving::PAUSE}
        case PAUSE_SIG: {
            status_ = tran(&paused);
            break;
        }
        default: {
            status_ = super(&active);
            break;
        }
    }
    return status_;
}

//${Cont::Table::SM::active::paused} .........................................
Q_STATE_DEF(Table, paused) {
    QP::QState status_;
    switch (e->sig) {
        //${Cont::Table::SM::active::paused}
        case Q_ENTRY_SIG: {
            BSP::displayPaused(1U);
            status_ = Q_RET_HANDLED;
            break;
        }
        //${Cont::Table::SM::active::paused}
        case Q_EXIT_SIG: {
            BSP::displayPaused(0U);
            status_ = Q_RET_HANDLED;
            break;
        }
        //${Cont::Table::SM::active::paused::SERVE}
        case SERVE_SIG: {
            status_ = tran(&serving);
            break;
        }
        //${Cont::Table::SM::active::paused::HUNGRY}
        case HUNGRY_SIG: {
            // find the index of the Philo from the event
            std::uint8_t n = Q_EVT_CAST(TableEvt)->philoId;
            // philo ID must be in range and he must be not hungry
            Q_ASSERT((n < N_PHILO) && (!m_isHungry[n]));

            m_isHungry[n] = true;
            BSP::displayPhilStat(n, HUNGRY);
            status_ = Q_RET_HANDLED;
            break;
        }
        //${Cont::Table::SM::active::paused::DONE}
        case DONE_SIG: {
            // find the index of the Philo from the event
            std::uint8_t n = Q_EVT_CAST(TableEvt)->philoId;
            // philo ID must be in range and he must be not hungry
            Q_ASSERT((n < N_PHILO) && (!m_isHungry[n]));

            BSP::displayPhilStat(n, THINKING);

            std::uint8_t m = LEFT(n);
            // both forks of Phil[n] must be used
            Q_ASSERT((m_fork[n] == USED) && (m_fork[m] == USED));

            m_fork[m] = FREE;
            m_fork[n] = FREE;
            status_ = Q_RET_HANDLED;
            break;
        }
        default: {
            status_ = super(&active);
            break;
        }
    }
    return status_;
}

} // namespace APP
//$enddef${Cont} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
