<?xml version="1.0" encoding="UTF-8"?>
<model version="5.3.0" links="1">
 <documentation>Improved model of the Calculator described in Chapter 4 of PSiCC2. Improvements include:

- using &quot;no me-&gt;&quot; pointer implementation
- placing the &quot;negated1&quot; state inside &quot;operand1&quot; superstate
- placing the &quot;negated2&quot; state inside &quot;operand2&quot; superstate
- adding handling of operator precedence '*','/' before '+','-'</documentation>
 <!--${qpcpp}-->
 <framework name="qpcpp"/>
 <!--${Events}-->
 <package name="Events" stereotype="0x01">
  <!--${Events::CalcEvt}-->
  <class name="CalcEvt" superclass="qpcpp::QEvt">
   <!--${Events::CalcEvt::key_code}-->
   <attribute name="key_code" type="std::uint8_t" visibility="0x00" properties="0x00"/>
   <!--${Events::CalcEvt::CalcEvt}-->
   <operation name="CalcEvt" type="" visibility="0x00" properties="0x02">
    <!--${Events::CalcEvt::CalcEvt::sig}-->
    <parameter name="sig" type="QP::QSignal"/>
    <!--${Events::CalcEvt::CalcEvt::kc}-->
    <parameter name="kc" type="std::uint8_t"/>
    <code>  : QEvt(sig),
    key_code(kc)</code>
   </operation>
  </class>
 </package>
 <!--${SMs}-->
 <package name="SMs" stereotype="0x02">
  <!--${SMs::Calc}-->
  <class name="Calc" superclass="qpcpp::QHsm">
   <documentation>Calculator state machine</documentation>
   <!--${SMs::Calc::inst}-->
   <attribute name="inst" type="Calc" visibility="0x00" properties="0x01">
    <documentation>The only inst of the Calc object (Singleton pattern).</documentation>
   </attribute>
   <!--${SMs::Calc::m_op1}-->
   <attribute name="m_op1" type="double" visibility="0x02" properties="0x00"/>
   <!--${SMs::Calc::m_op2}-->
   <attribute name="m_op2" type="double" visibility="0x02" properties="0x00"/>
   <!--${SMs::Calc::m_oper1}-->
   <attribute name="m_oper1" type="uint8_t" visibility="0x02" properties="0x00"/>
   <!--${SMs::Calc::m_oper2}-->
   <attribute name="m_oper2" type="uint8_t" visibility="0x02" properties="0x00"/>
   <!--${SMs::Calc::Calc}-->
   <operation name="Calc" type="" visibility="0x00" properties="0x00">
    <documentation>constructor</documentation>
    <code> : QHsm(Q_STATE_CAST(&amp;Calc::initial))</code>
   </operation>
   <!--${SMs::Calc::eval}-->
   <operation name="eval" type="bool" visibility="0x00" properties="0x00">
    <specifiers>noexcept</specifiers>
    <documentation>// guard function to evaluate the current expression
// taking into account the precedence of operands.
// return: true if evaluation successful
// false when error encountered</documentation>
    <!--${SMs::Calc::eval::op}-->
    <parameter name="op" type="double"/>
    <!--${SMs::Calc::eval::oper}-->
    <parameter name="oper" type="uint8_t"/>
    <code>double result;
if ((oper == KEY_NULL) || (oper == KEY_PLUS) || (oper == KEY_MINUS)) {
    switch (m_oper2) {
        case KEY_MULT: {
            m_op2 *= op;
            break;
        }
        case KEY_DIVIDE: {
            if ((-1e-30 &lt; op) &amp;&amp; (op &lt; 1e-30)) {
                BSP_display_error(&quot; Error 0 &quot;); // divide by zero
                return false;
            }
            m_op2 /= op;
            break;
         }
         default: { /* no op2 yet */
            m_op2 = op;
            m_oper2 = oper;
            break;
         }
    }
    switch (m_oper1) {
        case KEY_PLUS: {
            m_op1 += m_op2;
            break;
        }
        case KEY_MINUS: {
            m_op1 -= m_op2;
            break;
        }
        case KEY_MULT: {
            m_op1 *= m_op2;
            break;
        }
        case KEY_DIVIDE: {
            if ((-1e-30 &lt; m_op2) &amp;&amp; (m_op2 &lt; 1e-30)) {
                BSP_display_error(&quot; Error 0 &quot;); // divide by zero
                return false;
            }
            m_op1 /= m_op2;
            break;
        }
        default: {
            Q_ERROR();
            break;
        }
    }
    m_oper1 = oper;
    m_oper2 = KEY_NULL;
    result = m_op1;
}
else { // (oper == KEY_MULT) || (oper == KEY_DIV)
    switch (m_oper2) {
        case KEY_MULT: {
            m_op2 *= op;
            break;
        }
        case KEY_DIVIDE: {
            if ((-1e-30 &lt; op) &amp;&amp; (op &lt; 1e-30)) {
                BSP_display_error(&quot; Error 0 &quot;); // divide by zero
                return false;
            }
            m_op2 /= op;
            break;
        }
        default: { // oper2 not provided yet
            m_op2 = op;
            break;
        }
    }
    m_oper2 = oper;
    result = m_op2;
}

if ((result &lt; -99999999.0) || (99999999.0 &lt; result)) {
    BSP_display_error(&quot; Error 1 &quot;); // out of range
    return false;
}
if ((-0.0000001 &lt; result) &amp;&amp; (result &lt; 0.0000001)) {
    result = 0.0;
}
BSP_display(result);

return true;</code>
   </operation>
   <!--${SMs::Calc::SM}-->
   <statechart properties="0x02">
    <!--${SMs::Calc::SM::initial}-->
    <initial target="../1">
     <action>BSP_clear();
(void)e; /* unused parameter */</action>
     <initial_glyph conn="2,2,5,1,92,4,-2">
      <action box="1,-2,13,4"/>
     </initial_glyph>
    </initial>
    <!--${SMs::Calc::SM::on}-->
    <state name="on">
     <entry>BSP_message(&quot;on-ENTRY;&quot;);</entry>
     <exit>BSP_message(&quot;on-EXIT;&quot;);</exit>
     <!--${SMs::Calc::SM::on::initial}-->
     <initial target="../3">
      <action>BSP_message(&quot;on-INIT;&quot;);</action>
      <initial_glyph conn="15,9,5,1,45,9,-2">
       <action box="1,0,5,2"/>
      </initial_glyph>
     </initial>
     <!--${SMs::Calc::SM::on::C}-->
     <tran trig="C" target="..">
      <action>BSP_clear();</action>
      <tran_glyph conn="2,12,3,1,90">
       <action box="0,-2,4,2"/>
      </tran_glyph>
     </tran>
     <!--${SMs::Calc::SM::on::OFF}-->
     <tran trig="OFF" target="../../2">
      <tran_glyph conn="2,14,3,1,92,104,-75">
       <action box="0,0,5,2"/>
      </tran_glyph>
     </tran>
     <!--${SMs::Calc::SM::on::ready}-->
     <state name="ready">
      <entry>BSP_message(&quot;ready-ENTRY;&quot;);
m_oper2 = KEY_NULL;</entry>
      <exit>BSP_message(&quot;ready-EXIT;&quot;);</exit>
      <!--${SMs::Calc::SM::on::ready::initial}-->
      <initial target="../5">
       <action>BSP_message(&quot;ready-INIT;&quot;);</action>
       <initial_glyph conn="18,20,5,0,20,2">
        <action box="0,-2,6,2"/>
       </initial_glyph>
      </initial>
      <!--${SMs::Calc::SM::on::ready::DIGIT_0}-->
      <tran trig="DIGIT_0" target="../../4/3">
       <action>BSP_clear();</action>
       <tran_glyph conn="18,34,2,0,11">
        <action box="1,0,6,2"/>
       </tran_glyph>
      </tran>
      <!--${SMs::Calc::SM::on::ready::DIGIT_1_9}-->
      <tran trig="DIGIT_1_9" target="../../4/4">
       <action>BSP_clear();
BSP_insert(Q_EVT_CAST(CalcEvt)-&gt;key_code);</action>
       <tran_glyph conn="32,34,2,0,11">
        <action box="1,0,9,2"/>
       </tran_glyph>
      </tran>
      <!--${SMs::Calc::SM::on::ready::POINT}-->
      <tran trig="POINT" target="../../4/5">
       <action>BSP_clear();
BSP_insert((int)'0');
BSP_insert((int)'.');</action>
       <tran_glyph conn="52,34,2,0,11">
        <action box="0,0,6,2"/>
       </tran_glyph>
      </tran>
      <!--${SMs::Calc::SM::on::ready::OPER}-->
      <tran trig="OPER" target="../../5">
       <action>m_op1  = BSP_get_value();
m_oper1 = Q_EVT_CAST(CalcEvt)-&gt;key_code;</action>
       <tran_glyph conn="58,24,1,1,32,48,-32">
        <action box="0,-2,6,2"/>
       </tran_glyph>
      </tran>
      <!--${SMs::Calc::SM::on::ready::begin}-->
      <state name="begin">
       <entry>BSP_message(&quot;begin-ENTRY;&quot;);</entry>
       <exit>BSP_message(&quot;begin-EXIT;&quot;);</exit>
       <!--${SMs::Calc::SM::on::ready::begin::OPER}-->
       <tran trig="OPER">
        <!--${SMs::Calc::SM::on::ready::begin::OPER::[e->key=='-']}-->
        <choice target="../../../../4/6">
         <guard brief="e-&gt;key == '-'">Q_EVT_CAST(CalcEvt)-&gt;key_code == KEY_MINUS</guard>
         <choice_glyph conn="40,30,5,0,34,15">
          <action box="1,0,11,2"/>
         </choice_glyph>
        </choice>
        <!--${SMs::Calc::SM::on::ready::begin::OPER::[else]}-->
        <choice>
         <guard>else</guard>
         <choice_glyph conn="40,30,4,-1,-4,4">
          <action box="1,-3,6,2"/>
         </choice_glyph>
        </choice>
        <tran_glyph conn="30,30,3,-1,10">
         <action box="0,-2,6,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="30,22,16,10">
        <entry box="1,2,5,2"/>
        <exit box="1,4,5,2"/>
       </state_glyph>
      </state>
      <!--${SMs::Calc::SM::on::ready::result}-->
      <state name="result">
       <entry>BSP_message(&quot;result-ENTRY;&quot;);</entry>
       <exit>BSP_message(&quot;result-EXIT;&quot;);</exit>
       <state_glyph node="14,22,10,10">
        <entry box="1,2,5,2"/>
        <exit box="1,4,5,2"/>
       </state_glyph>
      </state>
      <state_glyph node="8,16,50,18">
       <entry box="1,2,5,2"/>
       <exit box="1,4,5,2"/>
      </state_glyph>
     </state>
     <!--${SMs::Calc::SM::on::operand1}-->
     <state name="operand1">
      <entry>BSP_message(&quot;operand1-ENTRY;&quot;);</entry>
      <exit>BSP_message(&quot;operand1-EXIT;&quot;);</exit>
      <!--${SMs::Calc::SM::on::operand1::CE}-->
      <tran trig="CE" target="../../3/5">
       <action>BSP_clear();</action>
       <tran_glyph conn="26,38,0,3,-14,4">
        <action box="0,-2,6,2"/>
       </tran_glyph>
      </tran>
      <!--${SMs::Calc::SM::on::operand1::OPER}-->
      <tran trig="OPER" target="../../5">
       <action>m_op1  = BSP_get_value();
m_oper1 = Q_EVT_CAST(CalcEvt)-&gt;key_code;</action>
       <tran_glyph conn="60,64,2,1,6,-2">
        <action box="1,0,6,2"/>
       </tran_glyph>
      </tran>
      <!--${SMs::Calc::SM::on::operand1::EQUALS}-->
      <tran trig="EQUALS" target="../../3/6">
       <tran_glyph conn="10,38,0,3,-12,4">
        <action box="0,-2,6,2"/>
       </tran_glyph>
      </tran>
      <!--${SMs::Calc::SM::on::operand1::zero1}-->
      <state name="zero1">
       <entry>BSP_message(&quot;zero1-ENTRY;&quot;);</entry>
       <exit>BSP_message(&quot;zero1-EXIT;&quot;);</exit>
       <!--${SMs::Calc::SM::on::operand1::zero1::DIGIT_0}-->
       <tran trig="DIGIT_0">
        <action>;</action>
        <tran_glyph conn="12,56,3,-1,10">
         <action box="0,-2,7,2"/>
        </tran_glyph>
       </tran>
       <!--${SMs::Calc::SM::on::operand1::zero1::DIGIT_1_9}-->
       <tran trig="DIGIT_1_9" target="../../4">
        <action>BSP_insert(Q_EVT_CAST(CalcEvt)-&gt;key_code);</action>
        <tran_glyph conn="12,53,3,3,16,-6,2">
         <action box="0,-2,9,2"/>
        </tran_glyph>
       </tran>
       <!--${SMs::Calc::SM::on::operand1::zero1::POINT}-->
       <tran trig="POINT" target="../../5">
        <action>BSP_insert((int)'0');
BSP_insert((int)'.');</action>
        <tran_glyph conn="14,58,2,2,2,40,-2">
         <action box="1,0,6,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="12,45,14,13">
        <entry box="1,2,5,2"/>
        <exit box="1,4,5,2"/>
       </state_glyph>
      </state>
      <!--${SMs::Calc::SM::on::operand1::int1}-->
      <state name="int1">
       <entry>BSP_message(&quot;int1-ENTRY;&quot;);</entry>
       <exit>BSP_message(&quot;int1-EXIT;&quot;);</exit>
       <!--${SMs::Calc::SM::on::operand1::int1::POINT}-->
       <tran trig="POINT" target="../../5">
        <action>BSP_insert((int)'.');</action>
        <tran_glyph conn="30,53,3,3,16,-6,2">
         <action box="0,-2,6,2"/>
        </tran_glyph>
       </tran>
       <!--${SMs::Calc::SM::on::operand1::int1::DIGIT_0, DIGIT_1_9}-->
       <tran trig="DIGIT_0, DIGIT_1_9">
        <action>BSP_insert(Q_EVT_CAST(CalcEvt)-&gt;key_code);</action>
        <tran_glyph conn="30,56,3,-1,10">
         <action box="0,-2,14,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="30,45,14,13">
        <entry box="1,2,5,2"/>
        <exit box="1,4,5,2"/>
       </state_glyph>
      </state>
      <!--${SMs::Calc::SM::on::operand1::frac1}-->
      <state name="frac1">
       <entry>BSP_message(&quot;frac1-ENTRY;&quot;);</entry>
       <exit>BSP_message(&quot;frac1-EXIT;&quot;);</exit>
       <!--${SMs::Calc::SM::on::operand1::frac1::POINT}-->
       <tran trig="POINT">
        <action>;</action>
        <tran_glyph conn="48,56,3,-1,10">
         <action box="0,-2,6,2"/>
        </tran_glyph>
       </tran>
       <!--${SMs::Calc::SM::on::operand1::frac1::DIGIT_0, DIGIT_1_9}-->
       <tran trig="DIGIT_0, DIGIT_1_9">
        <action>BSP_insert(Q_EVT_CAST(CalcEvt)-&gt;key_code);</action>
        <tran_glyph conn="48,53,3,-1,10">
         <action box="0,-2,15,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="48,45,14,13">
        <entry box="1,2,5,2"/>
        <exit box="1,4,5,2"/>
       </state_glyph>
      </state>
      <!--${SMs::Calc::SM::on::operand1::negated1}-->
      <state name="negated1">
       <entry>BSP_message(&quot;negated1-ENTRY;&quot;);
BSP_negate();</entry>
       <exit>BSP_message(&quot;negated1-EXIT;&quot;);</exit>
       <!--${SMs::Calc::SM::on::operand1::negated1::DIGIT_0}-->
       <tran trig="DIGIT_0" target="../../3">
        <action>BSP_insert(Q_EVT_CAST(CalcEvt)-&gt;key_code);</action>
        <tran_glyph conn="66,57,2,2,4,-44,-3">
         <action box="0,0,6,2"/>
        </tran_glyph>
       </tran>
       <!--${SMs::Calc::SM::on::operand1::negated1::DIGIT_1_9}-->
       <tran trig="DIGIT_1_9" target="../../4">
        <action>BSP_insert(Q_EVT_CAST(CalcEvt)-&gt;key_code);</action>
        <tran_glyph conn="73,57,2,2,5,-35,-4">
         <action box="0,0,9,2"/>
        </tran_glyph>
       </tran>
       <!--${SMs::Calc::SM::on::operand1::negated1::POINT}-->
       <tran trig="POINT" target="../../5">
        <action>BSP_insert(Q_EVT_CAST(CalcEvt)-&gt;key_code);</action>
        <tran_glyph conn="81,57,2,2,6,-25,-5">
         <action box="1,0,6,2"/>
        </tran_glyph>
       </tran>
       <!--${SMs::Calc::SM::on::operand1::negated1::OPER}-->
       <tran trig="OPER">
        <!--${SMs::Calc::SM::on::operand1::negated1::OPER::[else]}-->
        <choice>
         <guard>else</guard>
         <choice_glyph conn="74,53,4,-1,-4,8">
          <action box="1,-4,6,2"/>
         </choice_glyph>
        </choice>
        <!--${SMs::Calc::SM::on::operand1::negated1::OPER::[e->key=='-']}-->
        <choice>
         <guard brief="e-&gt;key == '-'">Q_EVT_CAST(CalcEvt)-&gt;key_code == KEY_MINUS</guard>
         <action>;</action>
         <choice_glyph conn="74,53,5,-1,8">
          <action box="1,0,11,2"/>
         </choice_glyph>
        </choice>
        <tran_glyph conn="64,53,3,-1,10">
         <action box="0,-2,6,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="64,45,22,12">
        <entry box="1,2,5,2"/>
        <exit box="1,4,5,2"/>
       </state_glyph>
      </state>
      <state_glyph node="8,38,80,26">
       <entry box="1,2,5,2"/>
       <exit box="1,4,5,2"/>
      </state_glyph>
     </state>
     <!--${SMs::Calc::SM::on::opEntered}-->
     <state name="opEntered">
      <entry>BSP_message(&quot;opEntered-ENTRY;&quot;);</entry>
      <exit>BSP_message(&quot;opEntered-EXIT;&quot;);</exit>
      <!--${SMs::Calc::SM::on::opEntered::DIGIT_0}-->
      <tran trig="DIGIT_0" target="../../6/3">
       <action>BSP_clear();</action>
       <tran_glyph conn="27,82,2,0,2,-5,9">
        <action box="1,0,6,2"/>
       </tran_glyph>
      </tran>
      <!--${SMs::Calc::SM::on::opEntered::DIGIT_1_9}-->
      <tran trig="DIGIT_1_9" target="../../6/4">
       <action>BSP_clear();
BSP_insert(Q_EVT_CAST(CalcEvt)-&gt;key_code);</action>
       <tran_glyph conn="34,82,2,0,11">
        <action box="1,0,9,2"/>
       </tran_glyph>
      </tran>
      <!--${SMs::Calc::SM::on::opEntered::POINT}-->
      <tran trig="POINT" target="../../6/5">
       <action>BSP_clear();
BSP_insert((int)'0');
BSP_insert((int)'.');</action>
       <tran_glyph conn="52,82,2,0,11">
        <action box="0,0,6,2"/>
       </tran_glyph>
      </tran>
      <!--${SMs::Calc::SM::on::opEntered::OPER}-->
      <tran trig="OPER">
       <!--${SMs::Calc::SM::on::opEntered::OPER::[e->key=='-']}-->
       <choice target="../../../6/6">
        <guard brief="e-&gt;key == '-'">Q_EVT_CAST(CalcEvt)-&gt;key_code == KEY_MINUS</guard>
        <choice_glyph conn="34,78,5,0,40,15">
         <action box="1,0,11,2"/>
        </choice_glyph>
       </choice>
       <!--${SMs::Calc::SM::on::opEntered::OPER::[else]}-->
       <choice>
        <guard>else</guard>
        <choice_glyph conn="34,78,4,-1,-4,4">
         <action box="1,-3,6,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="26,78,3,-1,8">
        <action box="0,-2,6,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="26,68,32,14">
       <entry box="1,2,5,2"/>
       <exit box="1,4,5,2"/>
      </state_glyph>
     </state>
     <!--${SMs::Calc::SM::on::operand2}-->
     <state name="operand2">
      <entry>BSP_message(&quot;operand2-ENTRY;&quot;);</entry>
      <exit>BSP_message(&quot;operand2-EXIT;&quot;);</exit>
      <!--${SMs::Calc::SM::on::operand2::CE}-->
      <tran trig="CE" target="../../5">
       <action>BSP_clear();</action>
       <tran_glyph conn="16,86,0,3,-5,8,-5,2">
        <action box="0,-4,6,2"/>
       </tran_glyph>
      </tran>
      <!--${SMs::Calc::SM::on::operand2::EQUALS}-->
      <tran trig="EQUALS">
       <!--${SMs::Calc::SM::on::operand2::EQUALS::[else]}-->
       <choice target="../../../7">
        <guard brief="else"/>
        <choice_glyph conn="4,70,5,3,7">
         <action box="1,0,6,2"/>
        </choice_glyph>
       </choice>
       <!--${SMs::Calc::SM::on::operand2::EQUALS::[eval()]}-->
       <choice target="../../../3/6">
        <guard brief="eval()">eval(BSP_get_value(), KEY_NULL)</guard>
        <choice_glyph conn="4,70,4,3,-46,10">
         <action box="0,-4,10,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="8,102,3,-1,-4,-32">
        <action box="-4,-2,6,2"/>
       </tran_glyph>
      </tran>
      <!--${SMs::Calc::SM::on::operand2::OPER}-->
      <tran trig="OPER">
       <!--${SMs::Calc::SM::on::operand2::OPER::[else]}-->
       <choice target="../../../7">
        <guard brief="else"/>
        <choice_glyph conn="6,79,4,3,-5,5">
         <action box="0,-5,6,2"/>
        </choice_glyph>
       </choice>
       <!--${SMs::Calc::SM::on::operand2::OPER::[eval()]}-->
       <choice target="../../../5">
        <guard brief="eval()">eval(BSP_get_value(), Q_EVT_CAST(CalcEvt)-&gt;key_code)</guard>
        <choice_glyph conn="6,79,5,3,16,-5,4">
         <action box="1,0,12,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="8,98,3,-1,-2,-19">
        <action box="-4,-2,6,2"/>
       </tran_glyph>
      </tran>
      <!--${SMs::Calc::SM::on::operand2::zero2}-->
      <state name="zero2">
       <entry>BSP_message(&quot;zero2-ENTRY;&quot;);</entry>
       <exit>BSP_message(&quot;zero2-EXIT;&quot;);</exit>
       <!--${SMs::Calc::SM::on::operand2::zero2::DIGIT_0}-->
       <tran trig="DIGIT_0">
        <action>;</action>
        <tran_glyph conn="12,104,3,-1,10">
         <action box="0,-2,7,2"/>
        </tran_glyph>
       </tran>
       <!--${SMs::Calc::SM::on::operand2::zero2::DIGIT_1_9}-->
       <tran trig="DIGIT_1_9" target="../../4">
        <action>BSP_insert(Q_EVT_CAST(CalcEvt)-&gt;key_code);</action>
        <tran_glyph conn="12,101,3,3,16,-6,2">
         <action box="0,-2,9,2"/>
        </tran_glyph>
       </tran>
       <!--${SMs::Calc::SM::on::operand2::zero2::POINT}-->
       <tran trig="POINT" target="../../5">
        <action>BSP_insert((int)'0');
BSP_insert((int)'.');</action>
        <tran_glyph conn="14,106,2,2,2,40,-2">
         <action box="1,0,6,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="12,93,14,13">
        <entry box="1,2,5,2"/>
        <exit box="1,4,5,2"/>
       </state_glyph>
      </state>
      <!--${SMs::Calc::SM::on::operand2::int2}-->
      <state name="int2">
       <entry>BSP_message(&quot;int2-ENTRY;&quot;);</entry>
       <exit>BSP_message(&quot;int2-EXIT;&quot;);</exit>
       <!--${SMs::Calc::SM::on::operand2::int2::POINT}-->
       <tran trig="POINT" target="../../5">
        <action>BSP_insert((int)'.');</action>
        <tran_glyph conn="30,101,3,3,16,-6,2">
         <action box="0,-2,6,2"/>
        </tran_glyph>
       </tran>
       <!--${SMs::Calc::SM::on::operand2::int2::DIGIT_0, DIGIT_1_9}-->
       <tran trig="DIGIT_0, DIGIT_1_9">
        <action>BSP_insert(Q_EVT_CAST(CalcEvt)-&gt;key_code);</action>
        <tran_glyph conn="30,104,3,-1,10">
         <action box="0,-2,14,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="30,93,14,13">
        <entry box="1,2,5,2"/>
        <exit box="1,4,5,2"/>
       </state_glyph>
      </state>
      <!--${SMs::Calc::SM::on::operand2::frac2}-->
      <state name="frac2">
       <entry>BSP_message(&quot;frac2-ENTRY;&quot;);</entry>
       <exit>BSP_message(&quot;frac2-EXIT;&quot;);</exit>
       <!--${SMs::Calc::SM::on::operand2::frac2::POINT}-->
       <tran trig="POINT">
        <action>;</action>
        <tran_glyph conn="48,104,3,-1,10">
         <action box="0,-2,6,2"/>
        </tran_glyph>
       </tran>
       <!--${SMs::Calc::SM::on::operand2::frac2::DIGIT_0, DIGIT_1_9}-->
       <tran trig="DIGIT_0, DIGIT_1_9">
        <action>BSP_insert(Q_EVT_CAST(CalcEvt)-&gt;key_code);</action>
        <tran_glyph conn="48,101,3,-1,10">
         <action box="0,-2,15,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="48,93,14,13">
        <entry box="1,2,5,2"/>
        <exit box="1,4,5,2"/>
       </state_glyph>
      </state>
      <!--${SMs::Calc::SM::on::operand2::negated2}-->
      <state name="negated2">
       <entry>BSP_message(&quot;negated2-ENTRY;&quot;);
BSP_negate();</entry>
       <exit>BSP_message(&quot;negated2-EXIT;&quot;);</exit>
       <!--${SMs::Calc::SM::on::operand2::negated2::DIGIT_0}-->
       <tran trig="DIGIT_0" target="../../3">
        <action>BSP_insert(Q_EVT_CAST(CalcEvt)-&gt;key_code);</action>
        <tran_glyph conn="66,105,2,2,4,-44,-3">
         <action box="0,0,6,2"/>
        </tran_glyph>
       </tran>
       <!--${SMs::Calc::SM::on::operand2::negated2::DIGIT_1_9}-->
       <tran trig="DIGIT_1_9" target="../../4">
        <action>BSP_insert(Q_EVT_CAST(CalcEvt)-&gt;key_code);</action>
        <tran_glyph conn="73,105,2,2,5,-37,-4">
         <action box="0,0,9,2"/>
        </tran_glyph>
       </tran>
       <!--${SMs::Calc::SM::on::operand2::negated2::POINT}-->
       <tran trig="POINT" target="../../5">
        <action>BSP_insert(Q_EVT_CAST(CalcEvt)-&gt;key_code);</action>
        <tran_glyph conn="81,105,2,2,6,-25,-5">
         <action box="1,0,6,2"/>
        </tran_glyph>
       </tran>
       <!--${SMs::Calc::SM::on::operand2::negated2::OPER}-->
       <tran trig="OPER">
        <!--${SMs::Calc::SM::on::operand2::negated2::OPER::[else]}-->
        <choice>
         <guard>else</guard>
         <choice_glyph conn="74,102,4,-1,-4,8">
          <action box="1,-4,6,2"/>
         </choice_glyph>
        </choice>
        <!--${SMs::Calc::SM::on::operand2::negated2::OPER::[e->key=='-']}-->
        <choice>
         <guard brief="e-&gt;key == '-'">Q_EVT_CAST(CalcEvt)-&gt;key_code == KEY_MINUS</guard>
         <action>;</action>
         <choice_glyph conn="74,102,5,-1,8">
          <action box="1,0,11,2"/>
         </choice_glyph>
        </choice>
        <tran_glyph conn="64,102,3,-1,10">
         <action box="0,-2,6,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="64,93,22,12">
        <entry box="1,2,5,2"/>
        <exit box="1,4,5,2"/>
       </state_glyph>
      </state>
      <state_glyph node="8,86,80,26">
       <entry box="1,2,5,2"/>
       <exit box="1,4,5,2"/>
      </state_glyph>
     </state>
     <!--${SMs::Calc::SM::on::error}-->
     <state name="error">
      <entry>BSP_message(&quot;error-ENTRY;&quot;);</entry>
      <exit>BSP_message(&quot;error-EXIT;&quot;);</exit>
      <state_glyph node="11,68,9,8">
       <entry box="1,2,5,2"/>
       <exit box="1,4,5,2"/>
      </state_glyph>
     </state>
     <state_glyph node="2,4,90,110">
      <entry box="1,2,5,2"/>
      <exit box="1,4,5,2"/>
     </state_glyph>
    </state>
    <!--${SMs::Calc::SM::final}-->
    <state name="final">
     <entry>BSP_message(&quot;final-ENTRY;&quot;);
BSP_exit();</entry>
     <state_glyph node="2,116,17,6">
      <entry box="1,2,5,2"/>
     </state_glyph>
    </state>
    <state_diagram size="96,124"/>
   </statechart>
  </class>
  <!--${SMs::the_calc}-->
  <attribute name="the_calc" type="QP::QHsm * const" visibility="0x00" properties="0x00">
   <documentation>Global opaque pointer to the Calc inst</documentation>
   <code>= &amp;Calc::inst;</code>
  </attribute>
 </package>
 <!--${.}-->
 <directory name=".">
  <!--${.::calc.hpp}-->
  <file name="calc.hpp">
   <text>#ifndef CALC_HPP_
#define CALC_HPP_

enum CalcSignals {
    C_SIG = QP::Q_USER_SIG,
    CE_SIG,
    DIGIT_0_SIG,
    DIGIT_1_9_SIG,
    POINT_SIG,
    OPER_SIG,
    EQUALS_SIG,
    OFF_SIG
};

$declare${Events::CalcEvt}

$declare${SMs::the_calc}

#endif // CALC_HPP_</text>
  </file>
  <!--${.::calc.cpp}-->
  <file name="calc.cpp">
   <text>#include &quot;qpcpp.hpp&quot; // QP/C++
#include &quot;bsp.hpp&quot;   // board support package
#include &quot;calc.hpp&quot;  // application

Q_DEFINE_THIS_FILE

#define KEY_NULL    '\0'
#define KEY_PLUS    '+'
#define KEY_MINUS   '-'
#define KEY_MULT    '*'
#define KEY_DIVIDE  '/'

$declare${SMs::Calc}

$define${SMs::the_calc}
$define(SMs::Calc)</text>
  </file>
 </directory>
</model>
