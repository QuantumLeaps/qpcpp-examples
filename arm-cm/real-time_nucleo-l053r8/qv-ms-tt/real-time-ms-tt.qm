<?xml version="1.0" encoding="UTF-8"?>
<model version="5.3.0" links="0">
 <framework name="qpcpp"/>
 <package name="Shared" stereotype="0x01" namespace="APP::">
  <attribute name="AppSignals" type="enum" visibility="0x04" properties="0x00">
   <code>: QP::QSignal {
    TICK_SIG = QP::Q_USER_SIG,
    RUN_SIG,
    MODE0_SIG,
    MODE1_SIG,

    PERIODIC_SPEC_SIG,
    SPORADIC_A_SIG,
    SPORADIC_B_SIG,
    // ...
    MAX_SIG  // the last signal
};</code>
  </attribute>
  <class name="PeriodicSpecEvt" superclass="qpcpp::QEvt">
   <attribute name="toggles" type="std::uint16_t" visibility="0x00" properties="0x00"/>
   <attribute name="ticks" type="std::uint8_t" visibility="0x00" properties="0x00"/>
   <operation name="PeriodicSpecEvt" type="constexpr" visibility="0x00" properties="0x02">
    <parameter name="s" type="QP::QSignal"/>
    <parameter name="tg" type="std::uint16_t"/>
    <parameter name="ti" type="std::uint8_t"/>
    <code> : QP::QEvt(s),
   toggles(tg),
   ticks(ti)</code>
   </operation>
  </class>
  <class name="SporadicSpecEvt" superclass="qpcpp::QEvt">
   <attribute name="toggles" type="std::uint16_t" visibility="0x00" properties="0x00"/>
   <attribute name="rtc_toggles" type="std::uint16_t" visibility="0x00" properties="0x00"/>
   <operation name="SporadicSpecEvt" type="constexpr" visibility="0x00" properties="0x02">
    <parameter name="s" type="QP::QSignal"/>
    <parameter name="tg" type="std::uint16_t"/>
    <parameter name="trc_tg" type="std::uint16_t"/>
    <code> : QP::QEvt(s),
   toggles(tg),
   rtc_toggles(trc_tg)</code>
   </operation>
  </class>
  <attribute name="AO_Periodic1" type="QP::QActive * const" visibility="0x00" properties="0x00">
   <code>{&amp;Periodic1::inst};</code>
  </attribute>
  <attribute name="AO_Periodic4" type="QP::QActive * const" visibility="0x00" properties="0x00">
   <code>{&amp;Periodic4::inst};</code>
  </attribute>
  <attribute name="AO_Sporadic2" type="QP::QActive * const" visibility="0x00" properties="0x00">
   <code>{&amp;Sporadic2::inst};</code>
  </attribute>
  <attribute name="AO_Sporadic3" type="QP::QActive * const" visibility="0x00" properties="0x00">
   <code>{&amp;Sporadic3::inst};</code>
  </attribute>
  <operation name="TTSched_tick" type="void" visibility="0x00" properties="0x00">
   <code>static QP::QEvt const tickEvt(TICK_SIG);
TTSched::inst.dispatch(&amp;tickEvt, 0U);</code>
  </operation>
  <operation name="TTSched_mode" type="void" visibility="0x00" properties="0x00">
   <parameter name="mode" type="uint8_t"/>
   <code>static QP::QEvt const modeEvt[2] {
    QP::QEvt(MODE0_SIG),
    QP::QEvt(MODE1_SIG),
};
TTSched::inst.dispatch(&amp;modeEvt[mode], 0U);</code>
  </operation>
 </package>
 <package name="Components" stereotype="0x02" namespace="APP::">
  <class name="TTSched" superclass="qpcpp::QMsm">
   <attribute name="inst" type="TTSched" visibility="0x00" properties="0x01"/>
   <operation name="TTSched" type="" visibility="0x00" properties="0x00">
    <code>  : QMsm(Q_STATE_CAST(&amp;TTSched::initial))

init(0U);</code>
   </operation>
   <statechart properties="0x00">
    <initial target="../1/2">
     <initial_glyph conn="2,2,5,0,28,10">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <state name="active">
     <tran trig="MODE0" target="../2">
      <tran_glyph conn="2,10,3,0,13,2">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <tran trig="MODE1" target="../6">
      <tran_glyph conn="86,10,1,0,-28,2">
       <action box="-8,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state name="m0tick0">
      <tran trig="TICK" target="../../3">
       <action>AO_Periodic4-&gt;POST(&amp;runEvt, 0U);</action>
       <tran_glyph conn="4,16,3,1,36,12,-2">
        <action box="0,-2,34,5"/>
       </tran_glyph>
      </tran>
      <state_glyph node="4,12,34,10"/>
     </state>
     <state name="m0tick1">
      <tran trig="TICK" target="../../4">
       <tran_glyph conn="4,30,3,1,36,12,-2">
        <action box="0,-2,32,4"/>
       </tran_glyph>
      </tran>
      <state_glyph node="4,26,34,10"/>
     </state>
     <state name="m0tick2">
      <tran trig="TICK" target="../../5">
       <action>AO_Periodic4-&gt;POST(&amp;runEvt, 0U);</action>
       <tran_glyph conn="4,44,3,1,36,12,-2">
        <action box="0,-2,32,4"/>
       </tran_glyph>
      </tran>
      <state_glyph node="4,40,34,10"/>
     </state>
     <state name="m0tick3">
      <tran trig="TICK" target="../../2">
       <action>AO_Periodic1-&gt;POST(&amp;runEvt, 0U);</action>
       <tran_glyph conn="4,58,3,1,38,-44,-4">
        <action box="0,-2,32,4"/>
       </tran_glyph>
      </tran>
      <state_glyph node="4,54,34,10"/>
     </state>
     <state name="m1tick0">
      <tran trig="TICK" target="../../7">
       <action>AO_Periodic4-&gt;POST(&amp;runEvt, 0U);
AO_Sporadic3-&gt;POST(&amp;runEvt, 0U);</action>
       <tran_glyph conn="46,16,3,1,36,12,-2">
        <action box="0,-2,34,8"/>
       </tran_glyph>
      </tran>
      <state_glyph node="46,12,34,10"/>
     </state>
     <state name="m1tick1">
      <tran trig="TICK" target="../../8">
       <action>AO_Periodic4-&gt;POST(&amp;runEvt, 0U);
AO_Sporadic3-&gt;POST(&amp;runEvt, 0U);</action>
       <tran_glyph conn="46,30,3,1,36,12,-2">
        <action box="0,-2,36,8"/>
       </tran_glyph>
      </tran>
      <state_glyph node="46,26,34,10"/>
     </state>
     <state name="m1tick2">
      <tran trig="TICK" target="../../9">
       <action>AO_Periodic4-&gt;POST(&amp;runEvt, 0U);
AO_Sporadic2-&gt;POST(&amp;runEvt, 0U);</action>
       <tran_glyph conn="46,44,3,1,36,12,-2">
        <action box="0,-2,36,8"/>
       </tran_glyph>
      </tran>
      <state_glyph node="46,40,34,10"/>
     </state>
     <state name="m1tick3">
      <tran trig="TICK" target="../../10">
       <action>AO_Periodic4-&gt;POST(&amp;runEvt, 0U);
AO_Sporadic3-&gt;POST(&amp;runEvt, 0U);</action>
       <tran_glyph conn="46,58,3,1,36,12,-2">
        <action box="0,-2,36,8"/>
       </tran_glyph>
      </tran>
      <state_glyph node="46,54,34,10"/>
     </state>
     <state name="m1tick4">
      <tran trig="TICK" target="../../11">
       <action>AO_Periodic4-&gt;POST(&amp;runEvt, 0U);
AO_Periodic1-&gt;POST(&amp;runEvt, 0U);</action>
       <tran_glyph conn="46,72,3,1,36,12,-2">
        <action box="0,-2,36,8"/>
       </tran_glyph>
      </tran>
      <state_glyph node="46,68,34,10"/>
     </state>
     <state name="m1tick5">
      <tran trig="TICK" target="../../6">
       <action>AO_Periodic4-&gt;POST(&amp;runEvt, 0U);
AO_Sporadic3-&gt;POST(&amp;runEvt, 0U);</action>
       <tran_glyph conn="46,86,3,1,38,-72,-4">
        <action box="0,-2,36,8"/>
       </tran_glyph>
      </tran>
      <state_glyph node="46,82,34,10"/>
     </state>
     <state_glyph node="2,4,84,92"/>
    </state>
    <state_diagram size="90,103"/>
   </statechart>
  </class>
  <class name="Periodic1" superclass="qpcpp::QMActive">
   <attribute name="m_toggles" type="std::uint16_t" visibility="0x02" properties="0x00"/>
   <attribute name="inst" type="Periodic1" visibility="0x00" properties="0x01"/>
   <operation name="Periodic1" type="" visibility="0x00" properties="0x00">
    <code>  : QMActive(Q_STATE_CAST(&amp;Periodic1::initial))</code>
   </operation>
   <statechart properties="0x02">
    <initial target="../1">
     <action>Q_REQUIRE_ID(300, (QP::QEvt::verify_(e))
             &amp;&amp; (e-&gt;sig == PERIODIC_SPEC_SIG));

m_toggles = Q_EVT_CAST(PeriodicSpecEvt)-&gt;toggles;</action>
     <initial_glyph conn="2,4,5,1,46,4,-2">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <state name="active">
     <tran trig="RUN">
      <action brief="long-RTC">for (std::uint16_t i = m_toggles; i &gt; 0U; --i) {
    BSP::d6on();
    BSP::d6off();
}</action>
      <tran_glyph conn="2,20,3,-1,40">
       <action box="0,-2,19,2"/>
      </tran_glyph>
     </tran>
     <tran trig="PERIODIC_SPEC">
      <action>BSP::d6on();
m_toggles = Q_EVT_CAST(PeriodicSpecEvt)-&gt;toggles;
BSP::d6off();</action>
      <tran_glyph conn="2,14,3,-1,40">
       <action box="0,-2,35,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="2,6,44,18"/>
    </state>
    <state_diagram size="50,28"/>
   </statechart>
  </class>
  <class name="Periodic4" superclass="qpcpp::QMActive">
   <attribute name="m_toggles" type="std::uint16_t" visibility="0x02" properties="0x00"/>
   <attribute name="inst" type="Periodic4" visibility="0x00" properties="0x01"/>
   <operation name="Periodic4" type="" visibility="0x00" properties="0x00">
    <code>  : QMActive(Q_STATE_CAST(&amp;Periodic4::initial))</code>
   </operation>
   <statechart properties="0x02">
    <initial target="../1">
     <action>Q_REQUIRE_ID(300, QP::QEvt::verify_(e)
             &amp;&amp; (e-&gt;sig == PERIODIC_SPEC_SIG));

m_toggles = Q_EVT_CAST(PeriodicSpecEvt)-&gt;toggles;</action>
     <initial_glyph conn="2,4,5,1,46,4,-2">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <state name="active">
     <tran trig="RUN">
      <action brief="long-RTC">for (std::uint16_t i = m_toggles; i &gt; 0U; --i) {
    BSP::d3on();
    BSP::d3off();
}</action>
      <tran_glyph conn="2,20,3,-1,40">
       <action box="0,-2,19,2"/>
      </tran_glyph>
     </tran>
     <tran trig="PERIODIC_SPEC">
      <action>BSP::d3on();
m_toggles = Q_EVT_CAST(PeriodicSpecEvt)-&gt;toggles;
BSP::d3off();</action>
      <tran_glyph conn="2,14,3,-1,40">
       <action box="0,-2,15,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="2,6,44,18"/>
    </state>
    <state_diagram size="50,28"/>
   </statechart>
  </class>
  <class name="Sporadic2" superclass="qpcpp::QMActive">
   <attribute name="m_per_rtc" type="std::uint16_t" visibility="0x00" properties="0x00"/>
   <attribute name="m_total" type="std::uint16_t" visibility="0x00" properties="0x00"/>
   <attribute name="m_done" type="std::uint16_t" visibility="0x00" properties="0x00"/>
   <attribute name="inst" type="Sporadic2" visibility="0x00" properties="0x01"/>
   <operation name="Sporadic2" type="" visibility="0x00" properties="0x00">
    <code>  : QMActive(Q_STATE_CAST(&amp;Sporadic2::initial))</code>
   </operation>
   <statechart properties="0x02">
    <initial target="../1">
     <action>Q_UNUSED_PAR(e);</action>
     <initial_glyph conn="2,4,5,1,44,4,-2">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <state name="active">
     <tran trig="SPORADIC_A">
      <action brief="post-Sporadic3">BSP::d5on();
AO_Sporadic3-&gt;POST(e, this); // Sporadic2 --&gt; Sporadic3
BSP::d5off();</action>
      <tran_glyph conn="2,12,3,-1,34">
       <action box="0,-2,35,3"/>
      </tran_glyph>
     </tran>
     <tran trig="SPORADIC_B" target="../3">
      <action brief="post-to-Periodic1,long-RTC">BSP::d5on();
AO_Periodic1-&gt;POST(BSP::getEvtPeriodic1(1U), this);

m_per_rtc = Q_EVT_CAST(SporadicSpecEvt)-&gt;rtc_toggles;
m_total = Q_EVT_CAST(SporadicSpecEvt)-&gt;toggles;
m_done = 0U;
BSP::d5off();</action>
      <tran_glyph conn="2,16,3,1,40,6,-2">
       <action box="0,-2,34,2"/>
      </tran_glyph>
     </tran>
     <tran trig="RUN">
      <action>BSP::d5on();
BSP::d5off();</action>
      <tran_glyph conn="2,22,3,-1,34">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state name="busy">
      <entry>std::uint16_t toggles = m_total - m_done;
if (toggles &gt; m_per_rtc) {
    toggles = m_per_rtc;
}
m_done += toggles;
for (; toggles &gt; 0U; --toggles) {
    BSP::d5on();
    BSP::d5off();
}</entry>
      <tran trig="RUN">
       <choice target="../..">
        <guard>m_done &lt; m_total</guard>
        <choice_glyph conn="18,28,5,0,22">
         <action box="1,0,21,2"/>
        </choice_glyph>
       </choice>
       <choice target="../../..">
        <guard brief="else"/>
        <action>BSP::d5on();
BSP::d5off();</action>
        <choice_glyph conn="18,28,4,1,6,26">
         <action box="1,6,10,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="4,28,3,-1,14">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="4,20,36,12">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state_glyph node="2,6,42,34"/>
    </state>
    <state_diagram size="50,44"/>
   </statechart>
  </class>
  <class name="Sporadic3" superclass="qpcpp::QMActive">
   <attribute name="m_per_rtc" type="std::uint16_t" visibility="0x00" properties="0x00"/>
   <attribute name="m_total" type="std::uint16_t" visibility="0x00" properties="0x00"/>
   <attribute name="m_done" type="std::uint16_t" visibility="0x00" properties="0x00"/>
   <attribute name="inst" type="Sporadic3" visibility="0x00" properties="0x01"/>
   <operation name="Sporadic3" type="" visibility="0x00" properties="0x00">
    <code>  : QMActive(Q_STATE_CAST(&amp;Sporadic3::initial))</code>
   </operation>
   <statechart properties="0x02">
    <initial target="../1">
     <action>Q_UNUSED_PAR(e);</action>
     <initial_glyph conn="2,4,5,1,44,4,-2">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <state name="active">
     <tran trig="SPORADIC_A" target="../2">
      <action brief="post-to-Periodic4,long-RTC">BSP::d4on();
AO_Periodic4-&gt;POST(BSP::getEvtPeriodic4(1U), this);

m_per_rtc = Q_EVT_CAST(SporadicSpecEvt)-&gt;rtc_toggles;
m_total = Q_EVT_CAST(SporadicSpecEvt)-&gt;toggles;
m_done = 0U;
BSP::d4off();</action>
      <tran_glyph conn="2,12,3,1,40,10,-2">
       <action box="0,-2,37,2"/>
      </tran_glyph>
     </tran>
     <tran trig="RUN">
      <action>BSP::d4on();
BSP::d4off();</action>
      <tran_glyph conn="2,22,3,-1,34">
       <action box="1,0,10,2"/>
      </tran_glyph>
     </tran>
     <state name="busy">
      <entry>std::uint16_t toggles = m_total - m_done;
if (toggles &gt; m_per_rtc) {
    toggles = m_per_rtc;
}
m_done += toggles;
for (; toggles &gt; 0U; --toggles) {
    BSP::d4on();
    BSP::d4off();
}</entry>
      <tran trig="RUN">
       <choice target="../..">
        <guard>m_done &lt; m_total</guard>
        <choice_glyph conn="18,28,5,0,22">
         <action box="1,0,21,2"/>
        </choice_glyph>
       </choice>
       <choice target="../../..">
        <guard brief="else"/>
        <action>BSP::d4on();
BSP::d4off();</action>
        <choice_glyph conn="18,28,4,1,6,26">
         <action box="1,6,10,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="4,28,3,-1,14">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="4,20,36,12">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state_glyph node="2,6,42,34"/>
    </state>
    <state_diagram size="50,44"/>
   </statechart>
  </class>
 </package>
 <directory name=".">
  <file name="app.hpp">
   <text>#ifndef APP_HPP_
#define APP_HPP_

$declare ${Shared}

#endif // APP_HPP_</text>
  </file>
  <file name="ttsched.cpp">
   <text>#include &quot;qpcpp.hpp&quot;           // QP/C++ real-time embedded framework
#include &quot;bsp.hpp&quot;             // Board Support Package
#include &quot;app.hpp&quot;             // Application interface

$declare ${Components::TTSched}

Q_DEFINE_THIS_MODULE(&quot;ttsched&quot;)

static QP::QEvt const runEvt(APP::RUN_SIG);

$define ${Shared::TTSched_tick}
$define ${Shared::TTSched_mode}
$define ${Components::TTSched}</text>
  </file>
  <file name="periodic1.cpp">
   <text>#include &quot;qpcpp.hpp&quot;           // QP/C++ real-time embedded framework
#include &quot;bsp.hpp&quot;             // Board Support Package
#include &quot;app.hpp&quot;             // Application interface

namespace {
Q_DEFINE_THIS_MODULE(&quot;periodic1&quot;)
}

$declare ${Components::Periodic1}

$define ${Shared::AO_Periodic1}
$define ${Components::Periodic1}</text>
  </file>
  <file name="periodic4.cpp">
   <text>#include &quot;qpcpp.hpp&quot;           // QP/C++ real-time embedded framework
#include &quot;bsp.hpp&quot;             // Board Support Package
#include &quot;app.hpp&quot;             // Application interface

namespace {
Q_DEFINE_THIS_MODULE(&quot;periodic4&quot;)
}

$declare ${Components::Periodic4}

$define ${Shared::AO_Periodic4}
$define ${Components::Periodic4}</text>
  </file>
  <file name="sporadic2.cpp">
   <text>#include &quot;qpcpp.hpp&quot;           // QP/C++ real-time embedded framework
#include &quot;bsp.hpp&quot;             // Board Support Package
#include &quot;app.hpp&quot;             // Application interface

namespace {
Q_DEFINE_THIS_MODULE(&quot;sporadic2&quot;)
}

$declare ${Components::Sporadic2}

$define ${Shared::AO_Sporadic2}
$define ${Components::Sporadic2}</text>
  </file>
  <file name="sporadic3.cpp">
   <text>#include &quot;qpcpp.hpp&quot;           // QP/C++ real-time embedded framework
#include &quot;bsp.hpp&quot;             // Board Support Package
#include &quot;app.hpp&quot;             // Application interface

namespace {
Q_DEFINE_THIS_MODULE(&quot;sporadic3&quot;)
}

$declare ${Components::Sporadic3}

$define ${Shared::AO_Sporadic3}
$define ${Components::Sporadic3}</text>
  </file>
 </directory>
</model>
