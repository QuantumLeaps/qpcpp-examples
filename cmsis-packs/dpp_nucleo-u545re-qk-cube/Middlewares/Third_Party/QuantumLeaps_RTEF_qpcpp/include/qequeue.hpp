//$file${include::qequeue.hpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: qpcpp.qm
// File:  ${include::qequeue.hpp}
//
// This code has been generated by QM 7.0.0 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// Copyright (C) 2005 Quantum Leaps, LLC. All rights reserved.
//
//                    Q u a n t u m  L e a P s
//                    ------------------------
//                    Modern Embedded Software
//
// SPDX-License-Identifier: GPL-3.0-or-later OR LicenseRef-QL-commercial
//
// The QP/C++ software is dual-licensed under the terms of the open-source
// GNU General Public License (GPL) or under the terms of one of the closed-
// source Quantum Leaps commercial licenses.
//
// Redistributions in source code must retain this top-level comment block.
// Plagiarizing this software to sidestep the license obligations is illegal.
//
// NOTE:
// The GPL does NOT permit the incorporation of this code into proprietary
// programs. Please contact Quantum Leaps for commercial licensing options,
// which expressly supersede the GPL and are designed explicitly for
// closed-source distribution.
//
// Quantum Leaps contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${include::qequeue.hpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#ifndef QEQUEUE_HPP_
#define QEQUEUE_HPP_

#ifndef QF_EQUEUE_CTR_SIZE
    #define QF_EQUEUE_CTR_SIZE 1U
#endif

namespace QP {

#if (QF_EQUEUE_CTR_SIZE == 1U)
    using QEQueueCtr = std::uint8_t;
#elif (QF_EQUEUE_CTR_SIZE == 2U)
    using QEQueueCtr = std::uint16_t;
#else
    #error "QF_EQUEUE_CTR_SIZE defined incorrectly, expected 1U or 2U"
#endif

class QEvt; // forward declaration

} // namespace QP

//$declare${QF::QEQueue} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace QP {

//${QF::QEQueue} .............................................................
class QEQueue {
private:
    QEvt const * volatile m_frontEvt;
    QEvt const * * m_ring;
    QEQueueCtr m_end;
    QEQueueCtr volatile m_head;
    QEQueueCtr volatile m_tail;
    QEQueueCtr volatile m_nFree;

#ifndef Q_UNSAFE
    std::uintptr_t m_frontEvt_dis;
#endif // ndef Q_UNSAFE

#ifndef Q_UNSAFE
    QEQueueCtr m_head_dis;
#endif // ndef Q_UNSAFE

#ifndef Q_UNSAFE
    QEQueueCtr m_tail_dis;
#endif // ndef Q_UNSAFE

#ifndef Q_UNSAFE
    QEQueueCtr m_nFree_dis;
#endif // ndef Q_UNSAFE
    QEQueueCtr m_nMin;

    // friends...
    friend class QActive;
    friend class QTicker;
    friend class QXMutex;
    friend class QXThread;

public:
    QEQueue() noexcept
      : m_frontEvt(nullptr),
        m_ring(nullptr),
        m_end(0U),
        m_head(0U),
        m_tail(0U),
        m_nFree(0U),
    #ifndef Q_UNSAFE
        m_frontEvt_dis(static_cast<std::uintptr_t>(~0U)),
        m_head_dis(static_cast<QEQueueCtr>(~0U)),
        m_tail_dis(static_cast<QEQueueCtr>(~0U)),
        m_nFree_dis(static_cast<QEQueueCtr>(~0U)),
    #endif
        m_nMin(0U)
    {}
    void init(
        QEvt const * qSto[],
        std::uint_fast16_t const qLen) noexcept;
    bool post(
        QEvt const * const e,
        std::uint_fast16_t const margin,
        std::uint_fast8_t const qsId) noexcept;
    void postLIFO(
        QEvt const * const e,
        std::uint_fast8_t const qsId) noexcept;
    QEvt const * get(std::uint_fast8_t const qsId) noexcept;
    QEQueueCtr getNFree() const noexcept {
        return m_nFree;
    }
    QEQueueCtr getNMin() const noexcept {
        #ifndef Q_UNSAFE
        return m_nMin;
        #else
        return 0U;
        #endif
    }
    bool isEmpty() const noexcept {
        return m_frontEvt == nullptr;
    }

private:
    QEQueue(QEQueue const & other) = delete;
    QEQueue & operator=(QEQueue const & other) = delete;
}; // class QEQueue

} // namespace QP
//$enddecl${QF::QEQueue} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

#endif // QEQUEUE_HPP_
