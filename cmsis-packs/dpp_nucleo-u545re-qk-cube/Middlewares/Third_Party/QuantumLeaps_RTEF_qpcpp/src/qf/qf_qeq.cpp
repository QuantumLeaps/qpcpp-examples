//$file${src::qf::qf_qeq.cpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: qpcpp.qm
// File:  ${src::qf::qf_qeq.cpp}
//
// This code has been generated by QM 7.0.0 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// Copyright (C) 2005 Quantum Leaps, LLC. All rights reserved.
//
//                    Q u a n t u m  L e a P s
//                    ------------------------
//                    Modern Embedded Software
//
// SPDX-License-Identifier: GPL-3.0-or-later OR LicenseRef-QL-commercial
//
// The QP/C++ software is dual-licensed under the terms of the open-source
// GNU General Public License (GPL) or under the terms of one of the closed-
// source Quantum Leaps commercial licenses.
//
// Redistributions in source code must retain this top-level comment block.
// Plagiarizing this software to sidestep the license obligations is illegal.
//
// NOTE:
// The GPL does NOT permit the incorporation of this code into proprietary
// programs. Please contact Quantum Leaps for commercial licensing options,
// which expressly supersede the GPL and are designed explicitly for
// closed-source distribution.
//
// Quantum Leaps contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${src::qf::qf_qeq.cpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#define QP_IMPL             // this is QP implementation
#include "qp_port.hpp"      // QP port
#include "qp_pkg.hpp"       // QP package-scope interface
#include "qsafe.h"          // QP Functional Safety (FuSa) Subsystem
#ifdef Q_SPY                // QS software tracing enabled?
    #include "qs_port.hpp"  // QS port
    #include "qs_pkg.hpp"   // QS facilities for pre-defined trace records
#else
    #include "qs_dummy.hpp" // disable the QS software tracing
#endif // Q_SPY

// unnamed namespace for local definitions with internal linkage
namespace {
Q_DEFINE_THIS_MODULE("qf_qeq")
} // unnamed namespace

//$skip${QP_VERSION} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
// Check for the minimum required QP version
#if (QP_VERSION < 730U) || (QP_VERSION != ((QP_RELEASE^4294967295U)%0x2710U))
#error qpcpp version 7.3.0 or higher required
#endif
//$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$define${QF::QEQueue} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace QP {

//${QF::QEQueue} .............................................................

//${QF::QEQueue::init} .......................................................
void QEQueue::init(
    QEvt const * qSto[],
    std::uint_fast16_t const qLen) noexcept
{
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
    QF_MEM_SYS();

    #if (QF_EQUEUE_CTR_SIZE == 1U)
    Q_REQUIRE_INCRIT(100, qLen < 0xFFU);
    #endif

    m_frontEvt = nullptr; // no events in the queue
    m_ring     = &qSto[0];
    m_end      = static_cast<QEQueueCtr>(qLen);
    if (qLen > 0U) {
        m_head = 0U;
        m_tail = 0U;
    }
    m_nFree    = static_cast<QEQueueCtr>(qLen + 1U); //+1 for frontEvt
    m_nMin     = m_nFree;

    #ifndef Q_UNSAFE
    m_frontEvt_dis = static_cast<std::uintptr_t>(~Q_PTR2UINT_CAST_(m_frontEvt));
    m_head_dis  = static_cast<QEQueueCtr>(~m_head);
    m_tail_dis  = static_cast<QEQueueCtr>(~m_tail);
    m_nFree_dis = static_cast<QEQueueCtr>(~m_nFree);
    #endif

    QF_MEM_APP();
    QF_CRIT_EXIT();
}

//${QF::QEQueue::post} .......................................................
bool QEQueue::post(
    QEvt const * const e,
    std::uint_fast16_t const margin,
    std::uint_fast8_t const qsId) noexcept
{
    #ifndef Q_SPY
    Q_UNUSED_PAR(qsId);
    #endif

    QF_CRIT_STAT
    QF_CRIT_ENTRY();
    QF_MEM_SYS();

    Q_REQUIRE_INCRIT(200, e != nullptr);
    Q_INVARIANT_INCRIT(201, e->verify_());

    QEQueueCtr tmp = m_nFree; // get volatile into temporary
    #ifndef Q_UNSAFE
    QEQueueCtr dis = static_cast<QEQueueCtr>(~m_nFree_dis);
    Q_INVARIANT_INCRIT(201, tmp == dis);
    #endif // ndef Q_UNSAFE

    // test-probe#1 for faking queue overflow
    QS_TEST_PROBE_DEF(&QEQueue::post)
    QS_TEST_PROBE_ID(1,
        tmp = 0U; // fake no free events
    )

    // required margin available?
    bool status;
    if (((margin == QF::NO_MARGIN) && (tmp > 0U))
        || (tmp > static_cast<QEQueueCtr>(margin)))
    {
        // is it a mutable event?
        if (e->getPoolNum_() != 0U) {
            QEvt_refCtr_inc_(e); // increment the reference counter
        }

        --tmp; // one free entry just used up

        m_nFree = tmp; // update the original
    #ifndef Q_UNSAFE
        m_nFree_dis = static_cast<QEQueueCtr>(~tmp);
    #endif // ndef Q_UNSAFE

        if (m_nMin > tmp) {
            m_nMin = tmp; // update minimum so far
        }

        QS_BEGIN_PRE(QS_QF_EQUEUE_POST, qsId)
            QS_TIME_PRE();        // timestamp
            QS_SIG_PRE(e->sig);   // the signal of the event
            QS_OBJ_PRE(this);     // this queue object
            QS_2U8_PRE(e->getPoolNum_(), e->refCtr_);
            QS_EQC_PRE(tmp);      // # free entries
            QS_EQC_PRE(m_nMin);   // min # free entries
        QS_END_PRE()

        if (m_frontEvt == nullptr) { // is the queue empty?
            m_frontEvt = e; // deliver event directly
    #ifndef Q_UNSAFE
            Q_INVARIANT_INCRIT(211, m_frontEvt_dis
                == static_cast<std::uintptr_t>(~Q_PTR2UINT_CAST_(nullptr)));
            m_frontEvt_dis = static_cast<std::uintptr_t>(~Q_PTR2UINT_CAST_(e));
    #endif // ndef Q_UNSAFE
        }
        else { // queue was not empty, insert event into the ring-buffer
            tmp = m_head; // get volatile into temporary
    #ifndef Q_UNSAFE
            dis = static_cast<QEQueueCtr>(~m_head_dis);
            Q_INVARIANT_INCRIT(212, tmp == dis);
    #endif // ndef Q_UNSAFE
            m_ring[tmp] = e; // insert e into buffer

            if (tmp == 0U) { // need to wrap the head?
                tmp = m_end;
            }
            --tmp; // advance head (counter-clockwise)

            m_head = tmp; // update the original
    #ifndef Q_UNSAFE
            m_head_dis = static_cast<QEQueueCtr>(~tmp);
    #endif // ndef Q_UNSAFE
        }
        status = true; // event posted successfully
    }
    else { // event cannot be posted
        // dropping events must be acceptable
        Q_ASSERT_INCRIT(210, margin != QF::NO_MARGIN);

        QS_BEGIN_PRE(QS_QF_EQUEUE_POST_ATTEMPT, qsId)
            QS_TIME_PRE();        // timestamp
            QS_SIG_PRE(e->sig);   // the signal of this event
            QS_OBJ_PRE(this);     // this queue object
            QS_2U8_PRE(e->getPoolNum_(), e->refCtr_);
            QS_EQC_PRE(tmp);      // # free entries
            QS_EQC_PRE(margin);   // margin requested
        QS_END_PRE()

        status = false; // event not posted
    }

    QF_MEM_APP();
    QF_CRIT_EXIT();

    return status;
}

//${QF::QEQueue::postLIFO} ...................................................
void QEQueue::postLIFO(
    QEvt const * const e,
    std::uint_fast8_t const qsId) noexcept
{
    #ifndef Q_SPY
    Q_UNUSED_PAR(qsId);
    #endif

    QF_CRIT_STAT
    QF_CRIT_ENTRY();
    QF_MEM_SYS();

    Q_REQUIRE_INCRIT(300, e != nullptr);
    Q_INVARIANT_INCRIT(301, e->verify_());

    QEQueueCtr tmp = m_nFree; // get volatile into temporary
    #ifndef Q_UNSAFE
    QEQueueCtr dis = static_cast<QEQueueCtr>(~m_nFree_dis);
    Q_INVARIANT_INCRIT(301, tmp == dis);
    #endif // ndef Q_UNSAFE

    // test-probe#1 for faking queue overflow
    QS_TEST_PROBE_DEF(&QEQueue::postLIFO)
    QS_TEST_PROBE_ID(1,
        tmp = 0U; // fake no free events
    )

    // must be able to LIFO-post the event
    Q_REQUIRE_INCRIT(310, tmp != 0U);

    if (e->getPoolNum_() != 0U) { // is it a mutable event?
        QEvt_refCtr_inc_(e); // increment the reference counter
    }

    --tmp; // one free entry just used up

    m_nFree = tmp; // update the original
    #ifndef Q_UNSAFE
    m_nFree_dis = static_cast<QEQueueCtr>(~tmp);
    #endif // ndef Q_UNSAFE

    if (m_nMin > tmp) {
        m_nMin = tmp; // update minimum so far
    }

    QS_BEGIN_PRE(QS_QF_EQUEUE_POST_LIFO, qsId)
        QS_TIME_PRE();       // timestamp
        QS_SIG_PRE(e->sig);  // the signal of this event
        QS_OBJ_PRE(this);    // this queue object
        QS_2U8_PRE(e->getPoolNum_(), e->refCtr_);
        QS_EQC_PRE(tmp);     // # free entries
        QS_EQC_PRE(m_nMin);  // min # free entries
    QS_END_PRE()

    QEvt const * const frontEvt = m_frontEvt; // read into temporary
    m_frontEvt = e; // deliver the event directly to the front
    #ifndef Q_UNSAFE
    m_frontEvt_dis = static_cast<std::uintptr_t>(~Q_PTR2UINT_CAST_(e));
    #endif // ndef Q_UNSAFE

    if (frontEvt != nullptr) { // was the queue NOT empty?
        tmp = m_tail; // get volatile into temporary;
    #ifndef Q_UNSAFE
        dis = static_cast<QEQueueCtr>(~m_tail_dis);
        Q_INVARIANT_INCRIT(311, tmp == dis);
    #endif // ndef Q_UNSAFE
        ++tmp;
        if (tmp == m_end) { // need to wrap the tail?
            tmp = 0U; // wrap around
        }
        m_tail = tmp;
    #ifndef Q_UNSAFE
        m_tail_dis = static_cast<QEQueueCtr>(~tmp);
    #endif
        m_ring[tmp] = frontEvt;
    }

    QF_MEM_APP();
    QF_CRIT_EXIT();
}

//${QF::QEQueue::get} ........................................................
QEvt const * QEQueue::get(std::uint_fast8_t const qsId) noexcept {
    #ifndef Q_SPY
    Q_UNUSED_PAR(qsId);
    #endif

    QF_CRIT_STAT
    QF_CRIT_ENTRY();
    QF_MEM_SYS();

    QEvt const * const e = m_frontEvt; // always remove evt from the front
    #ifndef Q_UNSAFE
    Q_INVARIANT_INCRIT(411, Q_PTR2UINT_CAST_(e)
                            == static_cast<std::uintptr_t>(~m_frontEvt_dis));
    #endif // ndef Q_UNSAFE

    if (e != nullptr) { // was the queue not empty?
        QEQueueCtr tmp = m_nFree; // get volatile into temporary
    #ifndef Q_UNSAFE
        QEQueueCtr const dis = static_cast<QEQueueCtr>(~m_nFree_dis);
        Q_INVARIANT_INCRIT(412, tmp == dis);
    #endif // ndef Q_UNSAFE

        ++tmp; // one more free event in the queue

        m_nFree = tmp; // update the # free
    #ifndef Q_UNSAFE
        m_nFree_dis = static_cast<QEQueueCtr>(~tmp);
    #endif // ndef Q_UNSAFE

        // any events in the ring buffer?
        if (tmp <= m_end) {

            QS_BEGIN_PRE(QS_QF_EQUEUE_GET, qsId)
                QS_TIME_PRE();      // timestamp
                QS_SIG_PRE(e->sig); // the signal of this event
                QS_OBJ_PRE(this);   // this queue object
                QS_2U8_PRE(e->getPoolNum_(), e->refCtr_);
                QS_EQC_PRE(tmp);    // # free entries
            QS_END_PRE()

            tmp = m_tail; // get volatile into temporary
            QEvt const * const frontEvt = m_ring[tmp];
    #ifndef Q_UNSAFE
            Q_ASSERT_INCRIT(421, frontEvt != nullptr);
            m_frontEvt_dis =
                static_cast<std::uintptr_t>(~Q_PTR2UINT_CAST_(frontEvt));
    #endif // ndef Q_UNSAFE
            m_frontEvt = frontEvt; // update the original

            if (tmp == 0U) { // need to wrap the tail?
                tmp = m_end;
            }
            --tmp; // advance the tail (counter-clockwise)
            m_tail = tmp; // update the original
    #ifndef Q_UNSAFE
            m_tail_dis = static_cast<QEQueueCtr>(~tmp);
    #endif // ndef Q_UNSAFE
        }
        else {
            m_frontEvt = nullptr; // queue becomes empty
    #ifndef Q_UNSAFE
            m_frontEvt_dis =
                static_cast<std::uintptr_t>(~Q_PTR2UINT_CAST_(nullptr));
    #endif // ndef Q_UNSAFE

            // all entries in the queue must be free (+1 for frontEvt)
            Q_INVARIANT_INCRIT(440, tmp == (m_end + 1U));

            QS_BEGIN_PRE(QS_QF_EQUEUE_GET_LAST, qsId)
                QS_TIME_PRE();      // timestamp
                QS_SIG_PRE(e->sig); // the signal of this event
                QS_OBJ_PRE(this);   // this queue object
                QS_2U8_PRE(e->getPoolNum_(), e->refCtr_);
            QS_END_PRE()
        }
    }

    QF_MEM_APP();
    QF_CRIT_EXIT();

    return e;
}

} // namespace QP
//$enddef${QF::QEQueue} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
